{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/shell.js"],"names":["__webpack_require__","r","__webpack_exports__","d","shell","words","define","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenString","quote","close","stream","state","next","escaped","tokens","shift","peek","backUp","unshift","tokenDollar","tokenize","test","tokenStringStart","eat","ch","eatWhile","eatSpace","delim","sol","skipToEnd","match","heredoc","string","eol","cur","current","hasOwnProperty","name","startState","token","languageData","autocomplete","concat","closeBrackets","brackets","commentTokens","line"],"mappings":"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","file":"static/js/82.56edbf35.chunk.js","sourcesContent":["var words = {};\nfunction define(style, dict) {\n  for (var i = 0; i < dict.length; i++) {\n    words[dict[i]] = style;\n  }\n}\n;\nvar commonAtoms = [\"true\", \"false\"];\nvar commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\", \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\nvar commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\", \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\", \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\", \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\", \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\", \"yes\", \"zsh\"];\ndefine('atom', commonAtoms);\ndefine('keyword', commonKeywords);\ndefine('builtin', commonCommands);\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) return null;\n  var sol = stream.sol();\n  var ch = stream.next();\n  if (ch === '\\\\') {\n    stream.next();\n    return null;\n  }\n  if (ch === '\\'' || ch === '\"' || ch === '`') {\n    state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n    return tokenize(stream, state);\n  }\n  if (ch === '#') {\n    if (sol && stream.eat('!')) {\n      stream.skipToEnd();\n      return 'meta'; // 'comment'?\n    }\n\n    stream.skipToEnd();\n    return 'comment';\n  }\n  if (ch === '$') {\n    state.tokens.unshift(tokenDollar);\n    return tokenize(stream, state);\n  }\n  if (ch === '+' || ch === '=') {\n    return 'operator';\n  }\n  if (ch === '-') {\n    stream.eat('-');\n    stream.eatWhile(/\\w/);\n    return 'attribute';\n  }\n  if (ch == \"<\") {\n    if (stream.match(\"<<\")) return \"operator\";\n    var heredoc = stream.match(/^<-?\\s*['\"]?([^'\"]*)['\"]?/);\n    if (heredoc) {\n      state.tokens.unshift(tokenHeredoc(heredoc[1]));\n      return 'string.special';\n    }\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/\\d/);\n    if (stream.eol() || !/\\w/.test(stream.peek())) {\n      return 'number';\n    }\n  }\n  stream.eatWhile(/[\\w-]/);\n  var cur = stream.current();\n  if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n  return words.hasOwnProperty(cur) ? words[cur] : null;\n}\nfunction tokenString(quote, style) {\n  var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote;\n  return function (stream, state) {\n    var next,\n      escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === close && !escaped) {\n        state.tokens.shift();\n        break;\n      } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n        escaped = true;\n        stream.backUp(1);\n        state.tokens.unshift(tokenDollar);\n        break;\n      } else if (!escaped && quote !== close && next === quote) {\n        state.tokens.unshift(tokenString(quote, style));\n        return tokenize(stream, state);\n      } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n        state.tokens.unshift(tokenStringStart(next, \"string\"));\n        stream.backUp(1);\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    return style;\n  };\n}\n;\nfunction tokenStringStart(quote, style) {\n  return function (stream, state) {\n    state.tokens[0] = tokenString(quote, style);\n    stream.next();\n    return tokenize(stream, state);\n  };\n}\nvar tokenDollar = function tokenDollar(stream, state) {\n  if (state.tokens.length > 1) stream.eat('$');\n  var ch = stream.next();\n  if (/['\"({]/.test(ch)) {\n    state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n    return tokenize(stream, state);\n  }\n  if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n  state.tokens.shift();\n  return 'def';\n};\nfunction tokenHeredoc(delim) {\n  return function (stream, state) {\n    if (stream.sol() && stream.string == delim) state.tokens.shift();\n    stream.skipToEnd();\n    return \"string.special\";\n  };\n}\nfunction tokenize(stream, state) {\n  return (state.tokens[0] || tokenBase)(stream, state);\n}\n;\nexport var shell = {\n  name: \"shell\",\n  startState: function startState() {\n    return {\n      tokens: []\n    };\n  },\n  token: function token(stream, state) {\n    return tokenize(stream, state);\n  },\n  languageData: {\n    autocomplete: commonAtoms.concat(commonKeywords, commonCommands),\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"`\"]\n    },\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}