{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/octave.js"],"names":["wordRegexp","words","RegExp","join","__webpack_require__","r","__webpack_exports__","d","octave","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","expressionEnd","identifiers","builtins","keywords","tokenTranspose","stream","state","sol","peek","tokenize","tokenBase","next","tokenComment","match","skipToEnd","eatSpace","m","name","startState","token","style","languageData","commentTokens","line"],"mappings":"2FAAA,SAAAA,EAAAC,GACA,WAAAC,OAAA,MAAAD,EAAAE,KAAA,gBADAC,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,2BAAAE,IAGA,IAAAC,EAAA,IAAAP,OAAA,gCACAQ,EAAA,IAAAR,OAAA,0BACAS,EAAA,IAAAT,OAAA,6DACAU,EAAA,IAAAV,OAAA,wDACAW,EAAA,IAAAX,OAAA,kBACAY,EAAA,IAAAZ,OAAA,aACAa,EAAA,IAAAb,OAAA,iDACAc,EAAAhB,EAAA,+fACAiB,EAAAjB,EAAA,kQAGA,SAAAkB,EAAAC,EAAAC,GACA,OAAAD,EAAAE,OAAA,MAAAF,EAAAG,QAKAF,EAAAG,SAAAC,EACAA,EAAAL,EAAAC,KALAD,EAAAM,OACAL,EAAAG,SAAAC,EACA,YAKA,SAAAE,EAAAP,EAAAC,GACA,OAAAD,EAAAQ,MAAA,UACAP,EAAAG,SAAAC,EACA,YAGAL,EAAAS,YACA,WAEA,SAAAJ,EAAAL,EAAAC,GAEA,GAAAD,EAAAU,WAAA,YAGA,GAAAV,EAAAQ,MAAA,MAGA,OAFAP,EAAAG,SAAAG,EACAP,EAAAS,YACA,UAEA,GAAAT,EAAAQ,MAAA,SAEA,OADAR,EAAAS,YACA,UAIA,GAAAT,EAAAQ,MAAA,kBACA,GAAAR,EAAAQ,MAAA,6BAEA,OADAR,EAAAI,SAAAC,EACA,SAGA,GAAAL,EAAAQ,MAAA,wCACA,eAGA,GAAAR,EAAAQ,MAAA,mCACA,eAIA,GAAAR,EAAAQ,MAAA3B,EAAA,4BACA,eAKA,IAAA8B,EAAAX,EAAAQ,MAAA,wBAAAR,EAAAQ,MAAA,uBACA,OAAAG,EACAA,EAAA,oBAIAX,EAAAQ,MAAAV,GACA,UAGAE,EAAAQ,MAAAX,GACA,UAGAG,EAAAQ,MAAAZ,GACA,WAGAI,EAAAQ,MAAAlB,IAAAU,EAAAQ,MAAAhB,GACA,WAGAQ,EAAAQ,MAAAjB,IAAAS,EAAAQ,MAAAf,IAAAO,EAAAQ,MAAAd,GACA,KAGAM,EAAAQ,MAAAb,IACAM,EAAAG,SAAAL,EACA,OAKAC,EAAAM,OACA,SAGO,IAAAjB,EAAA,CACPuB,KAAA,SACAC,WAAA,WACA,OACAT,SAAAC,IAGAS,MAAA,SAAAd,EAAAC,GACA,IAAAc,EAAAd,EAAAG,SAAAJ,EAAAC,GAIA,MAHA,WAAAc,GAAA,aAAAA,IACAd,EAAAG,SAAAL,GAEAgB,GAEAC,aAAA,CACAC,cAAA,CACAC,KAAA","file":"static/js/66.180968fb.chunk.js","sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\nvar doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\nvar expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\nvar identifiers = new RegExp(\"^[_A-Za-z\\xA1-\\uFFFF][_A-Za-z0-9\\xA1-\\uFFFF]*\");\nvar builtins = wordRegexp(['error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos', 'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones', 'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov', 'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot', 'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str', 'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember']);\nvar keywords = wordRegexp(['return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction', 'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events', 'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until', 'continue', 'pkg']);\n\n// tokenizers\nfunction tokenTranspose(stream, state) {\n  if (!stream.sol() && stream.peek() === '\\'') {\n    stream.next();\n    state.tokenize = tokenBase;\n    return 'operator';\n  }\n  state.tokenize = tokenBase;\n  return tokenBase(stream, state);\n}\nfunction tokenComment(stream, state) {\n  if (stream.match(/^.*%}/)) {\n    state.tokenize = tokenBase;\n    return 'comment';\n  }\n  ;\n  stream.skipToEnd();\n  return 'comment';\n}\nfunction tokenBase(stream, state) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match('%{')) {\n    state.tokenize = tokenComment;\n    stream.skipToEnd();\n    return 'comment';\n  }\n  if (stream.match(/^[%#]/)) {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n      stream.tokenize = tokenBase;\n      return 'number';\n    }\n    ;\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n      return 'number';\n    }\n    ;\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) {\n      return 'number';\n    }\n    ;\n  }\n  if (stream.match(wordRegexp(['nan', 'NaN', 'inf', 'Inf']))) {\n    return 'number';\n  }\n  ;\n\n  // Handle Strings\n  var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);\n  if (m) {\n    return m[1] ? 'string' : \"error\";\n  }\n\n  // Handle words\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n  ;\n  if (stream.match(builtins)) {\n    return 'builtin';\n  }\n  ;\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n  ;\n  if (stream.match(singleOperators) || stream.match(doubleOperators)) {\n    return 'operator';\n  }\n  ;\n  if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) {\n    return null;\n  }\n  ;\n  if (stream.match(expressionEnd)) {\n    state.tokenize = tokenTranspose;\n    return null;\n  }\n  ;\n\n  // Handle non-detected items\n  stream.next();\n  return 'error';\n}\n;\nexport var octave = {\n  name: \"octave\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function token(stream, state) {\n    var style = state.tokenize(stream, state);\n    if (style === 'number' || style === 'variable') {\n      state.tokenize = tokenTranspose;\n    }\n    return style;\n  },\n  languageData: {\n    commentTokens: {\n      line: \"%\"\n    }\n  }\n};"],"sourceRoot":""}