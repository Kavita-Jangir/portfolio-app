{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/pascal.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pascal","keywords","str","obj","words","split","i","length","atoms","null","isOperatorChar","tokenComment","stream","state","ch","maybeEnd","next","tokenize","tokenCommentBraces","name","startState","token","eatSpace","style","quote","startOfLine","skipToEnd","escaped","end","eat","test","eatWhile","cur","current","propertyIsEnumerable","languageData","indentOnInput","commentTokens","block","open","close"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,2BAAAE,IAMA,IAAAC,EANA,SAAAC,GAGA,IAFA,IAAAC,EAAA,GACAC,EAAAF,EAAAG,MAAA,KACAC,EAAA,EAAiBA,EAAAF,EAAAG,SAAkBD,EAAAH,EAAAC,EAAAE,KAAA,EACnC,OAAAH,EAEAC,CAAA,w9BACAI,EAAA,CACAC,MAAA,GAEAC,EAAA,mBA0DA,SAAAC,EAAAC,EAAAC,GAGA,IAFA,IACAC,EADAC,GAAA,EAEAD,EAAAF,EAAAI,QAAA,CACA,QAAAF,GAAAC,EAAA,CACAF,EAAAI,SAAA,KACA,MAEAF,EAAA,KAAAD,EAEA,gBAEA,SAAAI,EAAAN,EAAAC,GAEA,IADA,IAAAC,EACAA,EAAAF,EAAAI,QACA,QAAAF,EAAgB,CAChBD,EAAAI,SAAA,KACA,MAGA,gBAKO,IAAAjB,EAAA,CACPmB,KAAA,SACAC,WAAA,WACA,OACAH,SAAA,OAGAI,MAAA,SAAAT,EAAAC,GACA,GAAAD,EAAAU,WAAA,YACA,IAAAC,GAAAV,EAAAI,UA3FA,SAAAL,EAAAC,GACA,IAwCAW,EAxCAV,EAAAF,EAAAI,OACA,QAAAF,GAAAD,EAAAY,YAEA,OADAb,EAAAc,YACA,OAEA,QAAAZ,GAAA,KAAAA,EAEA,OADAD,EAAAI,UAkCAO,EAlCAV,EAmCA,SAAAF,EAAAC,GAIA,IAHA,IACAG,EADAW,GAAA,EAEAC,GAAA,EACA,OAAAZ,EAAAJ,EAAAI,SAAA,CACA,GAAAA,GAAAQ,IAAAG,EAAA,CACAC,GAAA,EACA,MAEAD,MAAA,MAAAX,EAGA,OADAY,GAAAD,IAAAd,EAAAI,SAAA,MACA,WA9CAJ,EAAAI,SAAAL,EAAAC,GAEA,QAAAC,GAAAF,EAAAiB,IAAA,KAEA,OADAhB,EAAAI,SAAAN,EACAA,EAAAC,EAAAC,GAEA,QAAAC,EAEA,OADAD,EAAAI,SAAAC,EACAA,EAAAN,EAAAC,GAEA,sBAAkBiB,KAAAhB,GAClB,YAEA,QAAAgB,KAAAhB,GAEA,OADAF,EAAAmB,SAAA,UACA,SAEA,QAAAjB,GACAF,EAAAiB,IAAA,KAEA,OADAjB,EAAAc,YACA,UAGA,GAAAhB,EAAAoB,KAAAhB,GAEA,OADAF,EAAAmB,SAAArB,GACA,WAEAE,EAAAmB,SAAA,WACA,IAAAC,EAAApB,EAAAqB,UACA,OAAAhC,EAAAiC,qBAAAF,GAAA,UACAxB,EAAA0B,qBAAAF,GAAA,OACA,aAoDApB,EAAAC,GACA,OAAAU,GAGAY,aAAA,CACAC,cAAA,YACAC,cAAA,CACAC,MAAA,CACAC,KAAA,KACAC,MAAA","file":"static/js/68.d32970ea.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\"absolute and array asm begin case const constructor destructor div do \" + \"downto else end file for function goto if implementation in inherited \" + \"inline interface label mod nil not object of operator or packed procedure \" + \"program record reintroduce repeat self set shl shr string then to type \" + \"unit until uses var while with xor as class dispinterface except exports \" + \"finalization finally initialization inline is library on out packed \" + \"property raise resourcestring threadvar try absolute abstract alias \" + \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" + \"dynamic enumerator experimental export external far far16 forward generic \" + \"helper implements index interrupt iocheck local message name near \" + \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" + \"pascal platform private protected public published read register \" + \"reintroduce result safecall saveregisters softfloat specialize static \" + \"stdcall stored strict unaligned unimplemented varargs virtual write\");\nvar atoms = {\n  \"null\": true\n};\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"#\" && state.startOfLine) {\n    stream.skipToEnd();\n    return \"meta\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\" && stream.eat(\"*\")) {\n    state.tokenize = tokenComment;\n    return tokenComment(stream, state);\n  }\n  if (ch == \"{\") {\n    state.tokenize = tokenCommentBraces;\n    return tokenCommentBraces(stream, state);\n  }\n  if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction tokenCommentBraces(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"}\") {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"comment\";\n}\n\n// Interface\n\nexport var pascal = {\n  name: \"pascal\",\n  startState: function startState() {\n    return {\n      tokenize: null\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      block: {\n        open: \"(*\",\n        close: \"*)\"\n      }\n    }\n  }\n};"],"sourceRoot":""}