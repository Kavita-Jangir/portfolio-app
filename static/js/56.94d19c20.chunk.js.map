{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/julia.js"],"names":["wordRegexp","words","end","pre","RegExp","join","__webpack_require__","r","__webpack_exports__","d","julia","asciiOperatorsList","operators","delimiters","identifiers","chars","keywordsList","builtinsList","openers","closers","keywords","builtins","macro","symbol","stringPrefixes","macroOperators","symbolOperators","inArray","state","nestedArrays","currentScope","n","scopes","length","tokenBase","stream","match","tokenize","tokenComment","leavingExpr","sol","eatSpace","ch","peek","skipToEnd","push","nestedGenerators","pop","inGenerator","lastToken","tokenAnnotation","imMatcher","numberLiteral","tokenChar","delimiter","substr","eat","next","eatWhile","tokenStringFactory","current","isDefinition","nestedParameters","nestedComments","isChar","value","parseInt","name","startState","firstParenPos","token","style","indent","textAfter","cx","delta","test","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets","autocomplete","concat"],"mappings":"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","file":"static/js/56.94d19c20.chunk.js","sourcesContent":["function wordRegexp(words, end, pre) {\n  if (typeof pre === \"undefined\") pre = \"\";\n  if (typeof end === \"undefined\") {\n    end = \"\\\\b\";\n  }\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\nvar asciiOperatorsList = [\"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\", \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"];\nvar operators = wordRegexp([\"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\", \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\", \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\", \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\", \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\", \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\", \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\", \"finally\", \"catch\", \"do\"];\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\", \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\", \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\", \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\", \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\", \"bitstype\"];\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\nfunction inArray(state) {\n  return state.nestedArrays > 0;\n}\nfunction inGenerator(state) {\n  return state.nestedGenerators > 0;\n}\nfunction currentScope(state, n) {\n  if (typeof n === \"undefined\") {\n    n = 0;\n  }\n  if (state.scopes.length <= n) {\n    return null;\n  }\n  return state.scopes[state.scopes.length - (n + 1)];\n}\n\n// tokenizers\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle scope changes\n  var leavingExpr = state.leavingExpr;\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n  state.leavingExpr = false;\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n  if (stream.eatSpace()) {\n    return null;\n  }\n  var ch = stream.peek();\n\n  // Handle single line comments\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") {\n      state.scopes.pop();\n    }\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") {\n      state.scopes.pop();\n    }\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n  var match;\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  }\n\n  // Handle type annotations\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle symbols\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n    return \"builtin\";\n  }\n\n  // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n\n  // Handle operators and Delimiters\n  if (stream.match(operators)) {\n    return \"operator\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) {\n      numberLiteral = true;\n    }\n    // Integers\n    if (stream.match(/^0x[0-9a-f_]+/i)) {\n      numberLiteral = true;\n    } // Hex\n    if (stream.match(/^0b[01_]+/i)) {\n      numberLiteral = true;\n    } // Binary\n    if (stream.match(/^0o[0-7_]+/i)) {\n      numberLiteral = true;\n    } // Octal\n    // Floats\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) {\n      numberLiteral = true;\n    }\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) {\n      numberLiteral = true;\n    } // Decimal\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  }\n\n  // Handle Chars\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n  if (stream.match(macro) || stream.match(macroOperators)) {\n    return \"meta\";\n  }\n  if (stream.match(delimiters)) {\n    return null;\n  }\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" || state.lastToken == \"macro\" || state.lastToken == \"type\" || state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n      state.isDefinition = false;\n      return \"def\";\n    }\n    state.leavingExpr = true;\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n  return \"builtin\";\n}\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0) state.tokenize = tokenBase;\n  }\n  return \"comment\";\n}\nfunction tokenChar(stream, state) {\n  var isChar = false,\n    match;\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 55295 || value >= 57344) {\n      // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 1114111) {\n      // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n  if (!stream.match(/^[^']+(?=')/)) {\n    stream.skipToEnd();\n  }\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenBase;\n  }\n  return \"error\";\n}\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n  return tokenString;\n}\nexport var julia = {\n  name: \"julia\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n  token: function token(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n    if (current && style) {\n      state.lastToken = current;\n    }\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var delta = 0;\n    if (textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) || /^finally/.test(textAfter)) {\n      delta = -1;\n    }\n    return (state.scopes.length + delta) * cx.unit;\n  },\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {\n      line: \"#\",\n      block: {\n        open: \"#=\",\n        close: \"=#\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};"],"sourceRoot":""}