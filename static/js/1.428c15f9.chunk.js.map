{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/css.js"],"names":["__webpack_require__","r","__webpack_exports__","d","mkCSS","keywords","css","sCSS","less","gss","C_Users_Anurag_Desktop_Portfolio_website_port_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","parserConfig","type","override","inline","Object","defaults","tokenHooks","documentTypes","mediaTypes","mediaFeatures","mediaValueKeywords","propertyKeywords","nonStandardPropertyKeywords","fontProperties","counterDescriptors","colorKeywords","valueKeywords","allowNested","lineComment","supportsAtComponent","highlightNonStandardPropertyKeywords","ret","style","tp","tokenString","quote","stream","state","ch","escaped","next","backUp","tokenize","tokenParenthesized","match","Context","indent","prev","this","pushContext","context","indentation","indentUnit","popContext","pass","states","popAndPass","n","i","wordAsValue","word","current","toLowerCase","hasOwnProperty","top","test","stateArg","charAt","block","maybeprop","prop","propBlock","_stream","parens","pseudo","atBlock","atComponentBlock","atBlock_parens","restricted_atBlock_before","restricted_atBlock","keyframes","at","interpolation","name","startState","token","eatSpace","result","eatWhile","eat","peek","textAfter","iCx","cx","Math","max","unit","languageData","indentOnInput","commentTokens","line","open","close","autocomplete","allWords","keySet","array","keys","length","documentTypes_","mediaTypes_","mediaFeatures_","mediaValueKeywords_","propertyKeywords_","nonStandardPropertyKeywords_","fontProperties_","colorKeywords_","valueKeywords_","concat","properties","colors","fonts","values","all","/","tokenCComment","maybeEnd","skipToEnd",":","$","#","@","&"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAAL,EAAAG,EAAAD,EAAA,wBAAAI,IAAAN,EAAAG,EAAAD,EAAA,yBAAAK,IAAAP,EAAAG,EAAAD,EAAA,yBAAAM,IAAAR,EAAAG,EAAAD,EAAA,wBAAAO,IAAA,IAAAC,EAAAV,EAAA,IACO,SAAAI,EAAAO,GAEP,IAgBAC,EAAAC,EAhBAC,GADAH,EAAiBI,OAAAL,EAAA,EAAAK,CAAa,GAAGC,EAAAL,IACjCG,OACAG,EAAAN,EAAAM,WACAC,EAAAP,EAAAO,eAAA,GACAC,EAAAR,EAAAQ,YAAA,GACAC,EAAAT,EAAAS,eAAA,GACAC,EAAAV,EAAAU,oBAAA,GACAC,EAAAX,EAAAW,kBAAA,GACAC,EAAAZ,EAAAY,6BAAA,GACAC,EAAAb,EAAAa,gBAAA,GACAC,EAAAd,EAAAc,oBAAA,GACAC,EAAAf,EAAAe,eAAA,GACAC,EAAAhB,EAAAgB,eAAA,GACAC,EAAAjB,EAAAiB,YACAC,EAAAlB,EAAAkB,YACAC,GAAA,IAAAnB,EAAAmB,oBACAC,GAAA,IAAApB,EAAAoB,qCAEA,SAAAC,EAAAC,EAAAC,GAEA,OADAtB,EAAAsB,EACAD,EAyDA,SAAAE,EAAAC,GACA,gBAAAC,EAAAC,GAGA,IAFA,IACAC,EADAC,GAAA,EAEA,OAAAD,EAAAF,EAAAI,SAAA,CACA,GAAAF,GAAAH,IAAAI,EAAA,CACA,KAAAJ,GAAAC,EAAAK,OAAA,GACA,MAEAF,MAAA,MAAAD,EAGA,OADAA,GAAAH,IAAAI,GAAA,KAAAJ,KAAAE,EAAAK,SAAA,MACAX,EAAA,oBAGA,SAAAY,EAAAP,EAAAC,GAGA,OAFAD,EAAAI,OACAJ,EAAAQ,MAAA,kBAA+EP,EAAAK,SAAA,KAA/EL,EAAAK,SAAAR,EAAA,KACAH,EAAA,UAKA,SAAAc,EAAAlC,EAAAmC,EAAAC,GACAC,KAAArC,OACAqC,KAAAF,SACAE,KAAAD,OAEA,SAAAE,EAAAZ,EAAAD,EAAAzB,EAAAmC,GAEA,OADAT,EAAAa,QAAA,IAAAL,EAAAlC,EAAAyB,EAAAe,gBAAA,IAAAL,EAAA,EAAAV,EAAAgB,YAAAf,EAAAa,SACAvC,EAEA,SAAA0C,EAAAhB,GAEA,OADAA,EAAAa,QAAAH,OAAAV,EAAAa,QAAAb,EAAAa,QAAAH,MACAV,EAAAa,QAAAvC,KAEA,SAAA2C,EAAA3C,EAAAyB,EAAAC,GACA,OAAAkB,EAAAlB,EAAAa,QAAAvC,QAAAyB,EAAAC,GAEA,SAAAmB,EAAA7C,EAAAyB,EAAAC,EAAAoB,GACA,QAAAC,EAAAD,GAAA,EAAwBC,EAAA,EAAOA,IAAArB,EAAAa,QAAAb,EAAAa,QAAAH,KAC/B,OAAAO,EAAA3C,EAAAyB,EAAAC,GAKA,SAAAsB,EAAAvB,GACA,IAAAwB,EAAAxB,EAAAyB,UAAAC,cACAlD,EAAAc,EAAAqC,eAAAH,GAAA,OAA8DnC,EAAAsC,eAAAH,GAAA,UAAkE,WAEhI,IAAAL,EAAA,CACAS,IAAA,SAAArD,EAAAyB,EAAAC,GACA,QAAA1B,EACA,OAAAsC,EAAAZ,EAAAD,EAAA,SACK,QAAAzB,GAAoB0B,EAAAa,QAAAH,KACzB,OAAAM,EAAAhB,GACK,GAAAR,GAAA,cAAAoC,KAAAtD,GACL,OAAAsC,EAAAZ,EAAAD,EAAA,oBACK,0BAAA6B,KAAAtD,GACL,OAAAsC,EAAAZ,EAAAD,EAAA,iBACK,kDAAA6B,KAAAtD,GACL,OAAAsC,EAAAZ,EAAAD,EAAA,WACK,kCAAA6B,KAAAtD,GAEL,OADA0B,EAAA6B,SAAAvD,EACA,4BACK,yCAAAsD,KAAAtD,GACL,kBACK,GAAAA,GAAA,KAAAA,EAAAwD,OAAA,GACL,OAAAlB,EAAAZ,EAAAD,EAAA,MACK,WAAAzB,EACLC,EAAA,eACK,WAAAD,EACLC,EAAA,UACK,2BAAAD,EACL,kBACK,oBAAAA,EACL,OAAAsC,EAAAZ,EAAAD,EAAA,iBACK,QAAAzB,EACL,eACK,GAAAgB,GAAA,KAAAhB,EACL,OAAAsC,EAAAZ,EAAAD,EAAA,UAEA,OAAAC,EAAAa,QAAAvC,MAEAyD,MAAA,SAAAzD,EAAAyB,EAAAC,GACA,WAAA1B,EAAA,CACA,IAAAiD,EAAAxB,EAAAyB,UAAAC,cACA,OAAAzC,EAAA0C,eAAAH,IACAhD,EAAA,WACA,aACOU,EAAAyC,eAAAH,IACPhD,EAAAkB,EAAA,4BACA,aACOH,GACPf,EAAAwB,EAAAQ,MAAA,qCACA,UAEAhC,EAAA,QACA,aAEK,cAAAD,EACL,QACKgB,GAAA,QAAAhB,GAAA,aAAAA,EAIL4C,EAAAS,IAAArD,EAAAyB,EAAAC,IAHAzB,EAAA,QACA,UAKAyD,UAAA,SAAA1D,EAAAyB,EAAAC,GACA,WAAA1B,EAAAsC,EAAAZ,EAAAD,EAAA,QACAkB,EAAA3C,EAAAyB,EAAAC,IAEAiC,KAAA,SAAA3D,EAAAyB,EAAAC,GACA,QAAA1B,EAAkB,OAAA0C,EAAAhB,GAClB,QAAA1B,GAAkBgB,EAAA,OAAAsB,EAAAZ,EAAAD,EAAA,aAClB,QAAAzB,GAAkB,KAAAA,EAAe,OAAA6C,EAAA7C,EAAAyB,EAAAC,GACjC,QAAA1B,EAAA,OAAAsC,EAAAZ,EAAAD,EAAA,UACA,WAAAzB,GAAA,sDAA6EsD,KAAA7B,EAAAyB,YAExE,WAAAlD,EACLgD,EAAAvB,QACK,oBAAAzB,EACL,OAAAsC,EAAAZ,EAAAD,EAAA,sBAJAxB,EAAA,QAMA,cAEA2D,UAAA,SAAA5D,EAAA6D,EAAAnC,GACA,WAAA1B,EAAkB0C,EAAAhB,GAClB,QAAA1B,GACAC,EAAA,WACA,aAEAyB,EAAAa,QAAAvC,MAEA8D,OAAA,SAAA9D,EAAAyB,EAAAC,GACA,WAAA1B,GAAkB,KAAAA,EAAe6C,EAAA7C,EAAAyB,EAAAC,GACjC,KAAA1B,EAAA0C,EAAAhB,GACA,KAAA1B,EAAAsC,EAAAZ,EAAAD,EAAA,UACA,iBAAAzB,EAAAsC,EAAAZ,EAAAD,EAAA,kBACA,QAAAzB,GAAAgD,EAAAvB,GACA,WAEAsC,OAAA,SAAA/D,EAAAyB,EAAAC,GACA,cAAA1B,EAAA,SACA,QAAAA,GACAC,EAAA,wBACAyB,EAAAa,QAAAvC,MAEA2C,EAAA3C,EAAAyB,EAAAC,IAEApB,cAAA,SAAAN,EAAAyB,EAAAC,GACA,cAAA1B,GAAAM,EAAA8C,eAAA3B,EAAAyB,YACAjD,EAAA,MACAyB,EAAAa,QAAAvC,MAEA4C,EAAAoB,QAAAhE,EAAAyB,EAAAC,IAGAsC,QAAA,SAAAhE,EAAAyB,EAAAC,GACA,QAAA1B,EAAA,OAAAsC,EAAAZ,EAAAD,EAAA,kBACA,QAAAzB,GAAkB,KAAAA,EAAe,OAAA6C,EAAA7C,EAAAyB,EAAAC,GACjC,QAAA1B,EAAkB,OAAA0C,EAAAhB,IAAAY,EAAAZ,EAAAD,EAAAT,EAAA,eAClB,oBAAAhB,EAAA,OAAAsC,EAAAZ,EAAAD,EAAA,iBACA,WAAAzB,EAAA,CACA,IAAAiD,EAAAxB,EAAAyB,UAAAC,cACAlD,EAAA,QAAAgD,GAAA,OAAAA,GAAA,OAAAA,GAAA,MAAAA,EAAA,UAAiG1C,EAAA6C,eAAAH,GAAA,YAAiEzC,EAAA4C,eAAAH,GAAA,WAAmExC,EAAA2C,eAAAH,GAAA,UAAuEvC,EAAA0C,eAAAH,GAAA,WAAsEtC,EAAAyC,eAAAH,GAAA9B,EAAA,4BAA2IJ,EAAAqC,eAAAH,GAAA,OAA+DnC,EAAAsC,eAAAH,GAAA,UAAkE,QAE9nB,OAAAvB,EAAAa,QAAAvC,MAEAiE,iBAAA,SAAAjE,EAAAyB,EAAAC,GACA,WAAA1B,EAAkB6C,EAAA7C,EAAAyB,EAAAC,GAClB,KAAA1B,EAAkB0C,EAAAhB,IAAAY,EAAAZ,EAAAD,EAAAT,EAAA,mBAClB,QAAAhB,IAAAC,EAAA,SACAyB,EAAAa,QAAAvC,OAEAkE,eAAA,SAAAlE,EAAAyB,EAAAC,GACA,WAAA1B,EAAA0C,EAAAhB,GACA,KAAA1B,GAAkB,KAAAA,EAAe6C,EAAA7C,EAAAyB,EAAAC,EAAA,GACjCkB,EAAAoB,QAAAhE,EAAAyB,EAAAC,IAEAyC,0BAAA,SAAAnE,EAAAyB,EAAAC,GACA,WAAA1B,EAAkBsC,EAAAZ,EAAAD,EAAA,sBAClB,QAAAzB,GAAA,kBAAA0B,EAAA6B,UACAtD,EAAA,WACA,6BAEA0C,EAAA3C,EAAAyB,EAAAC,IAEA0C,mBAAA,SAAApE,EAAAyB,EAAAC,GACA,WAAA1B,GACA0B,EAAA6B,SAAA,KACAb,EAAAhB,IAEA,QAAA1B,GACAC,EAAA,cAAAyB,EAAA6B,WAAA3C,EAAAwC,eAAA3B,EAAAyB,UAAAC,gBAAA,kBAAAzB,EAAA6B,WAAA1C,EAAAuC,eAAA3B,EAAAyB,UAAAC,eAAA,QAA2O,WAC3O,aAEA,sBAEAkB,UAAA,SAAArE,EAAAyB,EAAAC,GACA,cAAA1B,GACAC,EAAA,WACA,aAEA,KAAAD,EAAkBsC,EAAAZ,EAAAD,EAAA,OAClBkB,EAAA3C,EAAAyB,EAAAC,IAEA4C,GAAA,SAAAtE,EAAAyB,EAAAC,GACA,WAAA1B,EAAkB0C,EAAAhB,GAClB,KAAA1B,GAAkB,KAAAA,EAAe6C,EAAA7C,EAAAyB,EAAAC,IACjC,QAAA1B,EAAAC,EAAA,MAAyC,QAAAD,IAAAC,EAAA,WACzC,OAEAsE,cAAA,SAAAvE,EAAAyB,EAAAC,GACA,WAAA1B,EAAkB0C,EAAAhB,GAClB,KAAA1B,GAAkB,KAAAA,EAAe6C,EAAA7C,EAAAyB,EAAAC,IACjC,QAAA1B,EAAAC,EAAA,WAA8C,YAAAD,GAAA,KAAAA,GAAA,KAAAA,IAAAC,EAAA,SAC9C,mBAEA,OACAuE,KAAAzE,EAAAyE,KACAC,WAAA,WACA,OACA1C,SAAA,KACAL,MAAAxB,EAAA,cACAqD,SAAA,KACAhB,QAAA,IAAAL,EAAAhC,EAAA,wBAGAwE,MAAA,SAAAjD,EAAAC,GACA,IAAAA,EAAAK,UAAAN,EAAAkD,WAAA,YACA,IAAAtD,GAAAK,EAAAK,UA5RA,SAAAN,EAAAC,GACA,IAAAC,EAAAF,EAAAI,OACA,GAAAxB,EAAAsB,GAAA,CACA,IAAAiD,EAAAvE,EAAAsB,GAAAF,EAAAC,GACA,QAAAkD,EAAA,OAAAA,EAEA,WAAAjD,GACAF,EAAAoD,SAAA,YACAzD,EAAA,MAAAK,EAAAyB,YACK,KAAAvB,IAAA,KAAAA,GAAA,KAAAA,IAAAF,EAAAqD,IAAA,KACL1D,EAAA,gBACK,KAAAO,GAAA,KAAAA,GACLD,EAAAK,SAAAR,EAAAI,GACAD,EAAAK,SAAAN,EAAAC,IACK,KAAAC,GACLF,EAAAoD,SAAA,YACAzD,EAAA,gBACK,KAAAO,GACLF,EAAAQ,MAAA,WACAb,EAAA,wBACK,KAAAkC,KAAA3B,IAAA,KAAAA,GAAAF,EAAAqD,IAAA,OACLrD,EAAAoD,SAAA,UACAzD,EAAA,kBACK,MAAAO,EAWA,WAAA2B,KAAA3B,GACLP,EAAA,kBACK,KAAAO,GAAAF,EAAAQ,MAAA,yBACLb,EAAA,yBACK,iBAAgBkC,KAAA3B,GACrBP,EAAA,KAAAO,GACKF,EAAAQ,MAAA,mBACL,mCAAAqB,KAAA7B,EAAAyB,aACAxB,EAAAK,SAAAC,GAEAZ,EAAA,qCACK,WAAAkC,KAAA3B,IACLF,EAAAoD,SAAA,YACAzD,EAAA,oBAEAA,EAAA,WAzBA,QAAAkC,KAAA7B,EAAAsD,SACAtD,EAAAoD,SAAA,UACAzD,EAAA,kBACOK,EAAAQ,MAAA,gBACPR,EAAAoD,SAAA,YACApD,EAAAQ,MAAA,YAAAb,EAAA,6BACAA,EAAA,4BACOK,EAAAQ,MAAA,SACPb,EAAA,oBADO,IA6PPK,EAAAC,GAOA,OANAL,GAAA,iBAAAA,IACArB,EAAAqB,EAAA,GACAA,IAAA,IAEApB,EAAAoB,EACA,WAAArB,IAAA0B,QAAAkB,EAAAlB,SAAA1B,EAAAyB,EAAAC,IACAzB,GAEAkC,OAAA,SAAAT,EAAAsD,EAAAC,GACA,IAAAC,EAAAxD,EAAAa,QACAZ,EAAAqD,KAAAxB,OAAA,GACArB,EAAA+C,EAAA/C,OAYA,MAXA,QAAA+C,EAAAlF,MAAA,KAAA2B,GAAwC,KAAAA,IAAAuD,IAAA9C,MACxC8C,EAAA9C,OACA,KAAAT,GAAoB,SAAAuD,EAAAlF,MAAA,OAAAkF,EAAAlF,MAAA,iBAAAkF,EAAAlF,MAAA,sBAAAkF,EAAAlF,MAIX,KAAA2B,GAAA,UAAAuD,EAAAlF,MAAA,kBAAAkF,EAAAlF,QAAA,KAAA2B,GAAuF,MAAAuD,EAAAlF,MAAA,WAAAkF,EAAAlF,QAEhGmC,EAAAgD,KAAAC,IAAA,EAAAF,EAAA/C,OAAA8C,EAAAI,OAHAlD,GADA+C,IAAA9C,MACAD,QAMAA,GAEAmD,aAAA,CACAC,cAAA,UACAC,cAAA,CACAC,KAAAxE,EACAwC,MAAA,CACAiC,KAAA,KACAC,MAAA,OAGAC,aAAAC,IAKA,SAAAC,EAAAC,GAEA,IADA,IAAAC,EAAA,GACAjD,EAAA,EAAiBA,EAAAgD,EAAAE,SAAkBlD,EACnCiD,EAAAD,EAAAhD,GAAAI,gBAAA,EAEA,OAAA6C,EAEA,IAAAE,EAAA,uCACA5F,EAAAwF,EAAAI,GACAC,EAAA,yFACA5F,EAAAuF,EAAAK,GACAC,EAAA,6qBACA5F,EAAAsF,EAAAM,GACAC,EAAA,+HACA5F,EAAAqF,EAAAO,GACAC,EAAA,4+MAEA,2nBACA5F,EAAAoF,EAAAQ,GACAC,EAAA,6tCACA5F,EAAAmF,EAAAS,GACAC,EAAA,sIACA5F,EAAAkF,EAAAU,GAEA3F,EAAAiF,EADA,0GAEAW,EAAA,wuDACA3F,EAAAgF,EAAAW,GACAC,EAAA,43MACA3F,EAAA+E,EAAAY,GACAb,EAAAK,EAAAS,OAAAR,GAAAQ,OAAAP,GAAAO,OAAAN,GAAAM,OAAAL,GAAAK,OAAAJ,GAAAI,OAAAF,GAAAE,OAAAD,GACOjH,EAAA,CACPmH,WAAAN,EACAO,OAAAJ,EACAK,MAAAN,EACAO,OAAAL,EACAM,IAAAnB,GAEAzF,EAAA,CACAE,gBACAC,aACAC,gBACAC,qBACAC,mBACAC,8BACAC,iBACAC,qBACAC,gBACAC,gBACAV,WAAA,CACA4G,IAAA,SAAAxF,EAAAC,GACA,QAAAD,EAAAqD,IAAA,OACApD,EAAAK,SAAAmF,EACAA,EAAAzF,EAAAC,OAIOhC,EAAAF,EAAA,CACPgF,KAAA,QAEA,SAAA0C,EAAAzF,EAAAC,GAGA,IAFA,IACAC,EADAwF,GAAA,EAEA,OAAAxF,EAAAF,EAAAI,SAAA,CACA,GAAAsF,GAAA,KAAAxF,EAAA,CACAD,EAAAK,SAAA,KACA,MAEAoF,EAAA,KAAAxF,EAEA,4BAEO,IAAAhC,EAAAH,EAAA,CACPgF,KAAA,OACAjE,aACAC,gBACAC,qBACAC,mBACAC,8BACAG,gBACAC,gBACAH,iBACAI,aAAA,EACAC,YAAA,KACAZ,WAAA,CACA4G,IAAA,SAAAxF,EAAAC,GACA,OAAAD,EAAAqD,IAAA,MACArD,EAAA2F,YACA,uBACO3F,EAAAqD,IAAA,MACPpD,EAAAK,SAAAmF,EACAA,EAAAzF,EAAAC,IAEA,yBAGA2F,IAAA,SAAA5F,GACA,QAAAA,EAAAQ,MAAA,UAA8B,iBAG9BqF,EAAA,SAAA7F,GAEA,OADAA,EAAAQ,MAAA,WACAR,EAAAQ,MAAA,0CACA,qCAEAsF,IAAA,SAAA9F,GACA,QAAAA,EAAAqD,IAAA,MACA,2BAIOlF,EAAAJ,EAAA,CACPgF,KAAA,OACAjE,aACAC,gBACAC,qBACAC,mBACAC,8BACAG,gBACAC,gBACAH,iBACAI,aAAA,EACAC,YAAA,KACAZ,WAAA,CACA4G,IAAA,SAAAxF,EAAAC,GACA,OAAAD,EAAAqD,IAAA,MACArD,EAAA2F,YACA,uBACO3F,EAAAqD,IAAA,MACPpD,EAAAK,SAAAmF,EACAA,EAAAzF,EAAAC,IAEA,yBAGA8F,IAAA,SAAA/F,GACA,OAAAA,EAAAqD,IAAA,KAAuB,wBACvBrD,EAAAQ,MAAA,8GACAR,EAAAoD,SAAA,YACApD,EAAAQ,MAAA,0CACA,8BAEAwF,IAAA,WACA,0BAIO5H,EAAAL,EAAA,CACPgF,KAAA,MACAlE,gBACAC,aACAC,gBACAE,mBACAC,8BACAC,iBACAC,qBACAC,gBACAC,gBACAG,qBAAA,EACAb,WAAA,CACA4G,IAAA,SAAAxF,EAAAC,GACA,QAAAD,EAAAqD,IAAA,OACApD,EAAAK,SAAAmF,EACAA,EAAAzF,EAAAC","file":"static/js/1.428c15f9.chunk.js","sourcesContent":["import _objectSpread from \"C:\\\\Users\\\\Anurag\\\\Desktop\\\\Portfolio_website\\\\port-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nexport function mkCSS(parserConfig) {\n  parserConfig = _objectSpread({}, defaults, parserConfig);\n  var inline = parserConfig.inline;\n  var tokenHooks = parserConfig.tokenHooks,\n    documentTypes = parserConfig.documentTypes || {},\n    mediaTypes = parserConfig.mediaTypes || {},\n    mediaFeatures = parserConfig.mediaFeatures || {},\n    mediaValueKeywords = parserConfig.mediaValueKeywords || {},\n    propertyKeywords = parserConfig.propertyKeywords || {},\n    nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\n    fontProperties = parserConfig.fontProperties || {},\n    counterDescriptors = parserConfig.counterDescriptors || {},\n    colorKeywords = parserConfig.colorKeywords || {},\n    valueKeywords = parserConfig.valueKeywords || {},\n    allowNested = parserConfig.allowNested,\n    lineComment = parserConfig.lineComment,\n    supportsAtComponent = parserConfig.supportsAtComponent === true,\n    highlightNonStandardPropertyKeywords = parserConfig.highlightNonStandardPropertyKeywords !== false;\n  var type, override;\n  function ret(style, tp) {\n    type = tp;\n    return style;\n  }\n\n  // Tokenizers\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (tokenHooks[ch]) {\n      var result = tokenHooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == \"@\") {\n      stream.eatWhile(/[\\w\\\\\\-]/);\n      return ret(\"def\", stream.current());\n    } else if (ch == \"=\" || (ch == \"~\" || ch == \"|\") && stream.eat(\"=\")) {\n      return ret(null, \"compare\");\n    } else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \"#\") {\n      stream.eatWhile(/[\\w\\\\\\-]/);\n      return ret(\"atom\", \"hash\");\n    } else if (ch == \"!\") {\n      stream.match(/^\\s*\\w*/);\n      return ret(\"keyword\", \"important\");\n    } else if (/\\d/.test(ch) || ch == \".\" && stream.eat(/\\d/)) {\n      stream.eatWhile(/[\\w.%]/);\n      return ret(\"number\", \"unit\");\n    } else if (ch === \"-\") {\n      if (/[\\d.]/.test(stream.peek())) {\n        stream.eatWhile(/[\\w.%]/);\n        return ret(\"number\", \"unit\");\n      } else if (stream.match(/^-[\\w\\\\\\-]*/)) {\n        stream.eatWhile(/[\\w\\\\\\-]/);\n        if (stream.match(/^\\s*:/, false)) return ret(\"def\", \"variable-definition\");\n        return ret(\"variableName\", \"variable\");\n      } else if (stream.match(/^\\w+-/)) {\n        return ret(\"meta\", \"meta\");\n      }\n    } else if (/[,+>*\\/]/.test(ch)) {\n      return ret(null, \"select-op\");\n    } else if (ch == \".\" && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\n      return ret(\"qualifier\", \"qualifier\");\n    } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\n      return ret(null, ch);\n    } else if (stream.match(/^[\\w-.]+(?=\\()/)) {\n      if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {\n        state.tokenize = tokenParenthesized;\n      }\n      return ret(\"variableName.function\", \"variable\");\n    } else if (/[\\w\\\\\\-]/.test(ch)) {\n      stream.eatWhile(/[\\w\\\\\\-]/);\n      return ret(\"property\", \"word\");\n    } else {\n      return ret(null, null);\n    }\n  }\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false,\n        ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          if (quote == \")\") stream.backUp(1);\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      if (ch == quote || !escaped && quote != \")\") state.tokenize = null;\n      return ret(\"string\", \"string\");\n    };\n  }\n  function tokenParenthesized(stream, state) {\n    stream.next(); // Must be '('\n    if (!stream.match(/^\\s*[\\\"\\')]/, false)) state.tokenize = tokenString(\")\");else state.tokenize = null;\n    return ret(null, \"(\");\n  }\n\n  // Context management\n\n  function Context(type, indent, prev) {\n    this.type = type;\n    this.indent = indent;\n    this.prev = prev;\n  }\n  function pushContext(state, stream, type, indent) {\n    state.context = new Context(type, stream.indentation() + (indent === false ? 0 : stream.indentUnit), state.context);\n    return type;\n  }\n  function popContext(state) {\n    if (state.context.prev) state.context = state.context.prev;\n    return state.context.type;\n  }\n  function pass(type, stream, state) {\n    return states[state.context.type](type, stream, state);\n  }\n  function popAndPass(type, stream, state, n) {\n    for (var i = n || 1; i > 0; i--) state.context = state.context.prev;\n    return pass(type, stream, state);\n  }\n\n  // Parser\n\n  function wordAsValue(stream) {\n    var word = stream.current().toLowerCase();\n    if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"variable\";\n  }\n  var states = {};\n  states.top = function (type, stream, state) {\n    if (type == \"{\") {\n      return pushContext(state, stream, \"block\");\n    } else if (type == \"}\" && state.context.prev) {\n      return popContext(state);\n    } else if (supportsAtComponent && /@component/i.test(type)) {\n      return pushContext(state, stream, \"atComponentBlock\");\n    } else if (/^@(-moz-)?document$/i.test(type)) {\n      return pushContext(state, stream, \"documentTypes\");\n    } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {\n      return pushContext(state, stream, \"atBlock\");\n    } else if (/^@(font-face|counter-style)/i.test(type)) {\n      state.stateArg = type;\n      return \"restricted_atBlock_before\";\n    } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {\n      return \"keyframes\";\n    } else if (type && type.charAt(0) == \"@\") {\n      return pushContext(state, stream, \"at\");\n    } else if (type == \"hash\") {\n      override = \"builtin\";\n    } else if (type == \"word\") {\n      override = \"tag\";\n    } else if (type == \"variable-definition\") {\n      return \"maybeprop\";\n    } else if (type == \"interpolation\") {\n      return pushContext(state, stream, \"interpolation\");\n    } else if (type == \":\") {\n      return \"pseudo\";\n    } else if (allowNested && type == \"(\") {\n      return pushContext(state, stream, \"parens\");\n    }\n    return state.context.type;\n  };\n  states.block = function (type, stream, state) {\n    if (type == \"word\") {\n      var word = stream.current().toLowerCase();\n      if (propertyKeywords.hasOwnProperty(word)) {\n        override = \"property\";\n        return \"maybeprop\";\n      } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\n        override = highlightNonStandardPropertyKeywords ? \"string.special\" : \"property\";\n        return \"maybeprop\";\n      } else if (allowNested) {\n        override = stream.match(/^\\s*:(?:\\s|$)/, false) ? \"property\" : \"tag\";\n        return \"block\";\n      } else {\n        override = \"error\";\n        return \"maybeprop\";\n      }\n    } else if (type == \"meta\") {\n      return \"block\";\n    } else if (!allowNested && (type == \"hash\" || type == \"qualifier\")) {\n      override = \"error\";\n      return \"block\";\n    } else {\n      return states.top(type, stream, state);\n    }\n  };\n  states.maybeprop = function (type, stream, state) {\n    if (type == \":\") return pushContext(state, stream, \"prop\");\n    return pass(type, stream, state);\n  };\n  states.prop = function (type, stream, state) {\n    if (type == \";\") return popContext(state);\n    if (type == \"{\" && allowNested) return pushContext(state, stream, \"propBlock\");\n    if (type == \"}\" || type == \"{\") return popAndPass(type, stream, state);\n    if (type == \"(\") return pushContext(state, stream, \"parens\");\n    if (type == \"hash\" && !/^#([0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(stream.current())) {\n      override = \"error\";\n    } else if (type == \"word\") {\n      wordAsValue(stream);\n    } else if (type == \"interpolation\") {\n      return pushContext(state, stream, \"interpolation\");\n    }\n    return \"prop\";\n  };\n  states.propBlock = function (type, _stream, state) {\n    if (type == \"}\") return popContext(state);\n    if (type == \"word\") {\n      override = \"property\";\n      return \"maybeprop\";\n    }\n    return state.context.type;\n  };\n  states.parens = function (type, stream, state) {\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n    if (type == \")\") return popContext(state);\n    if (type == \"(\") return pushContext(state, stream, \"parens\");\n    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n    if (type == \"word\") wordAsValue(stream);\n    return \"parens\";\n  };\n  states.pseudo = function (type, stream, state) {\n    if (type == \"meta\") return \"pseudo\";\n    if (type == \"word\") {\n      override = \"variableName.constant\";\n      return state.context.type;\n    }\n    return pass(type, stream, state);\n  };\n  states.documentTypes = function (type, stream, state) {\n    if (type == \"word\" && documentTypes.hasOwnProperty(stream.current())) {\n      override = \"tag\";\n      return state.context.type;\n    } else {\n      return states.atBlock(type, stream, state);\n    }\n  };\n  states.atBlock = function (type, stream, state) {\n    if (type == \"(\") return pushContext(state, stream, \"atBlock_parens\");\n    if (type == \"}\" || type == \";\") return popAndPass(type, stream, state);\n    if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\");\n    if (type == \"interpolation\") return pushContext(state, stream, \"interpolation\");\n    if (type == \"word\") {\n      var word = stream.current().toLowerCase();\n      if (word == \"only\" || word == \"not\" || word == \"and\" || word == \"or\") override = \"keyword\";else if (mediaTypes.hasOwnProperty(word)) override = \"attribute\";else if (mediaFeatures.hasOwnProperty(word)) override = \"property\";else if (mediaValueKeywords.hasOwnProperty(word)) override = \"keyword\";else if (propertyKeywords.hasOwnProperty(word)) override = \"property\";else if (nonStandardPropertyKeywords.hasOwnProperty(word)) override = highlightNonStandardPropertyKeywords ? \"string.special\" : \"property\";else if (valueKeywords.hasOwnProperty(word)) override = \"atom\";else if (colorKeywords.hasOwnProperty(word)) override = \"keyword\";else override = \"error\";\n    }\n    return state.context.type;\n  };\n  states.atComponentBlock = function (type, stream, state) {\n    if (type == \"}\") return popAndPass(type, stream, state);\n    if (type == \"{\") return popContext(state) && pushContext(state, stream, allowNested ? \"block\" : \"top\", false);\n    if (type == \"word\") override = \"error\";\n    return state.context.type;\n  };\n  states.atBlock_parens = function (type, stream, state) {\n    if (type == \")\") return popContext(state);\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state, 2);\n    return states.atBlock(type, stream, state);\n  };\n  states.restricted_atBlock_before = function (type, stream, state) {\n    if (type == \"{\") return pushContext(state, stream, \"restricted_atBlock\");\n    if (type == \"word\" && state.stateArg == \"@counter-style\") {\n      override = \"variable\";\n      return \"restricted_atBlock_before\";\n    }\n    return pass(type, stream, state);\n  };\n  states.restricted_atBlock = function (type, stream, state) {\n    if (type == \"}\") {\n      state.stateArg = null;\n      return popContext(state);\n    }\n    if (type == \"word\") {\n      if (state.stateArg == \"@font-face\" && !fontProperties.hasOwnProperty(stream.current().toLowerCase()) || state.stateArg == \"@counter-style\" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())) override = \"error\";else override = \"property\";\n      return \"maybeprop\";\n    }\n    return \"restricted_atBlock\";\n  };\n  states.keyframes = function (type, stream, state) {\n    if (type == \"word\") {\n      override = \"variable\";\n      return \"keyframes\";\n    }\n    if (type == \"{\") return pushContext(state, stream, \"top\");\n    return pass(type, stream, state);\n  };\n  states.at = function (type, stream, state) {\n    if (type == \";\") return popContext(state);\n    if (type == \"{\" || type == \"}\") return popAndPass(type, stream, state);\n    if (type == \"word\") override = \"tag\";else if (type == \"hash\") override = \"builtin\";\n    return \"at\";\n  };\n  states.interpolation = function (type, stream, state) {\n    if (type == \"}\") return popContext(state);\n    if (type == \"{\" || type == \";\") return popAndPass(type, stream, state);\n    if (type == \"word\") override = \"variable\";else if (type != \"variable\" && type != \"(\" && type != \")\") override = \"error\";\n    return \"interpolation\";\n  };\n  return {\n    name: parserConfig.name,\n    startState: function startState() {\n      return {\n        tokenize: null,\n        state: inline ? \"block\" : \"top\",\n        stateArg: null,\n        context: new Context(inline ? \"block\" : \"top\", 0, null)\n      };\n    },\n    token: function token(stream, state) {\n      if (!state.tokenize && stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style && typeof style == \"object\") {\n        type = style[1];\n        style = style[0];\n      }\n      override = style;\n      if (type != \"comment\") state.state = states[state.state](type, stream, state);\n      return override;\n    },\n    indent: function indent(state, textAfter, iCx) {\n      var cx = state.context,\n        ch = textAfter && textAfter.charAt(0);\n      var indent = cx.indent;\n      if (cx.type == \"prop\" && (ch == \"}\" || ch == \")\")) cx = cx.prev;\n      if (cx.prev) {\n        if (ch == \"}\" && (cx.type == \"block\" || cx.type == \"top\" || cx.type == \"interpolation\" || cx.type == \"restricted_atBlock\")) {\n          // Resume indentation from parent context.\n          cx = cx.prev;\n          indent = cx.indent;\n        } else if (ch == \")\" && (cx.type == \"parens\" || cx.type == \"atBlock_parens\") || ch == \"{\" && (cx.type == \"at\" || cx.type == \"atBlock\")) {\n          // Dedent relative to current context.\n          indent = Math.max(0, cx.indent - iCx.unit);\n        }\n      }\n      return indent;\n    },\n    languageData: {\n      indentOnInput: /^\\s*\\}$/,\n      commentTokens: {\n        line: lineComment,\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      },\n      autocomplete: allWords\n    }\n  };\n}\n;\nfunction keySet(array) {\n  var keys = {};\n  for (var i = 0; i < array.length; ++i) {\n    keys[array[i].toLowerCase()] = true;\n  }\n  return keys;\n}\nvar documentTypes_ = [\"domain\", \"regexp\", \"url\", \"url-prefix\"],\n  documentTypes = keySet(documentTypes_);\nvar mediaTypes_ = [\"all\", \"aural\", \"braille\", \"handheld\", \"print\", \"projection\", \"screen\", \"tty\", \"tv\", \"embossed\"],\n  mediaTypes = keySet(mediaTypes_);\nvar mediaFeatures_ = [\"width\", \"min-width\", \"max-width\", \"height\", \"min-height\", \"max-height\", \"device-width\", \"min-device-width\", \"max-device-width\", \"device-height\", \"min-device-height\", \"max-device-height\", \"aspect-ratio\", \"min-aspect-ratio\", \"max-aspect-ratio\", \"device-aspect-ratio\", \"min-device-aspect-ratio\", \"max-device-aspect-ratio\", \"color\", \"min-color\", \"max-color\", \"color-index\", \"min-color-index\", \"max-color-index\", \"monochrome\", \"min-monochrome\", \"max-monochrome\", \"resolution\", \"min-resolution\", \"max-resolution\", \"scan\", \"grid\", \"orientation\", \"device-pixel-ratio\", \"min-device-pixel-ratio\", \"max-device-pixel-ratio\", \"pointer\", \"any-pointer\", \"hover\", \"any-hover\", \"prefers-color-scheme\", \"dynamic-range\", \"video-dynamic-range\"],\n  mediaFeatures = keySet(mediaFeatures_);\nvar mediaValueKeywords_ = [\"landscape\", \"portrait\", \"none\", \"coarse\", \"fine\", \"on-demand\", \"hover\", \"interlace\", \"progressive\", \"dark\", \"light\", \"standard\", \"high\"],\n  mediaValueKeywords = keySet(mediaValueKeywords_);\nvar propertyKeywords_ = [\"align-content\", \"align-items\", \"align-self\", \"alignment-adjust\", \"alignment-baseline\", \"all\", \"anchor-point\", \"animation\", \"animation-delay\", \"animation-direction\", \"animation-duration\", \"animation-fill-mode\", \"animation-iteration-count\", \"animation-name\", \"animation-play-state\", \"animation-timing-function\", \"appearance\", \"azimuth\", \"backdrop-filter\", \"backface-visibility\", \"background\", \"background-attachment\", \"background-blend-mode\", \"background-clip\", \"background-color\", \"background-image\", \"background-origin\", \"background-position\", \"background-position-x\", \"background-position-y\", \"background-repeat\", \"background-size\", \"baseline-shift\", \"binding\", \"bleed\", \"block-size\", \"bookmark-label\", \"bookmark-level\", \"bookmark-state\", \"bookmark-target\", \"border\", \"border-bottom\", \"border-bottom-color\", \"border-bottom-left-radius\", \"border-bottom-right-radius\", \"border-bottom-style\", \"border-bottom-width\", \"border-collapse\", \"border-color\", \"border-image\", \"border-image-outset\", \"border-image-repeat\", \"border-image-slice\", \"border-image-source\", \"border-image-width\", \"border-left\", \"border-left-color\", \"border-left-style\", \"border-left-width\", \"border-radius\", \"border-right\", \"border-right-color\", \"border-right-style\", \"border-right-width\", \"border-spacing\", \"border-style\", \"border-top\", \"border-top-color\", \"border-top-left-radius\", \"border-top-right-radius\", \"border-top-style\", \"border-top-width\", \"border-width\", \"bottom\", \"box-decoration-break\", \"box-shadow\", \"box-sizing\", \"break-after\", \"break-before\", \"break-inside\", \"caption-side\", \"caret-color\", \"clear\", \"clip\", \"color\", \"color-profile\", \"column-count\", \"column-fill\", \"column-gap\", \"column-rule\", \"column-rule-color\", \"column-rule-style\", \"column-rule-width\", \"column-span\", \"column-width\", \"columns\", \"contain\", \"content\", \"counter-increment\", \"counter-reset\", \"crop\", \"cue\", \"cue-after\", \"cue-before\", \"cursor\", \"direction\", \"display\", \"dominant-baseline\", \"drop-initial-after-adjust\", \"drop-initial-after-align\", \"drop-initial-before-adjust\", \"drop-initial-before-align\", \"drop-initial-size\", \"drop-initial-value\", \"elevation\", \"empty-cells\", \"fit\", \"fit-content\", \"fit-position\", \"flex\", \"flex-basis\", \"flex-direction\", \"flex-flow\", \"flex-grow\", \"flex-shrink\", \"flex-wrap\", \"float\", \"float-offset\", \"flow-from\", \"flow-into\", \"font\", \"font-family\", \"font-feature-settings\", \"font-kerning\", \"font-language-override\", \"font-optical-sizing\", \"font-size\", \"font-size-adjust\", \"font-stretch\", \"font-style\", \"font-synthesis\", \"font-variant\", \"font-variant-alternates\", \"font-variant-caps\", \"font-variant-east-asian\", \"font-variant-ligatures\", \"font-variant-numeric\", \"font-variant-position\", \"font-variation-settings\", \"font-weight\", \"gap\", \"grid\", \"grid-area\", \"grid-auto-columns\", \"grid-auto-flow\", \"grid-auto-rows\", \"grid-column\", \"grid-column-end\", \"grid-column-gap\", \"grid-column-start\", \"grid-gap\", \"grid-row\", \"grid-row-end\", \"grid-row-gap\", \"grid-row-start\", \"grid-template\", \"grid-template-areas\", \"grid-template-columns\", \"grid-template-rows\", \"hanging-punctuation\", \"height\", \"hyphens\", \"icon\", \"image-orientation\", \"image-rendering\", \"image-resolution\", \"inline-box-align\", \"inset\", \"inset-block\", \"inset-block-end\", \"inset-block-start\", \"inset-inline\", \"inset-inline-end\", \"inset-inline-start\", \"isolation\", \"justify-content\", \"justify-items\", \"justify-self\", \"left\", \"letter-spacing\", \"line-break\", \"line-height\", \"line-height-step\", \"line-stacking\", \"line-stacking-ruby\", \"line-stacking-shift\", \"line-stacking-strategy\", \"list-style\", \"list-style-image\", \"list-style-position\", \"list-style-type\", \"margin\", \"margin-bottom\", \"margin-left\", \"margin-right\", \"margin-top\", \"marks\", \"marquee-direction\", \"marquee-loop\", \"marquee-play-count\", \"marquee-speed\", \"marquee-style\", \"mask-clip\", \"mask-composite\", \"mask-image\", \"mask-mode\", \"mask-origin\", \"mask-position\", \"mask-repeat\", \"mask-size\", \"mask-type\", \"max-block-size\", \"max-height\", \"max-inline-size\", \"max-width\", \"min-block-size\", \"min-height\", \"min-inline-size\", \"min-width\", \"mix-blend-mode\", \"move-to\", \"nav-down\", \"nav-index\", \"nav-left\", \"nav-right\", \"nav-up\", \"object-fit\", \"object-position\", \"offset\", \"offset-anchor\", \"offset-distance\", \"offset-path\", \"offset-position\", \"offset-rotate\", \"opacity\", \"order\", \"orphans\", \"outline\", \"outline-color\", \"outline-offset\", \"outline-style\", \"outline-width\", \"overflow\", \"overflow-style\", \"overflow-wrap\", \"overflow-x\", \"overflow-y\", \"padding\", \"padding-bottom\", \"padding-left\", \"padding-right\", \"padding-top\", \"page\", \"page-break-after\", \"page-break-before\", \"page-break-inside\", \"page-policy\", \"pause\", \"pause-after\", \"pause-before\", \"perspective\", \"perspective-origin\", \"pitch\", \"pitch-range\", \"place-content\", \"place-items\", \"place-self\", \"play-during\", \"position\", \"presentation-level\", \"punctuation-trim\", \"quotes\", \"region-break-after\", \"region-break-before\", \"region-break-inside\", \"region-fragment\", \"rendering-intent\", \"resize\", \"rest\", \"rest-after\", \"rest-before\", \"richness\", \"right\", \"rotate\", \"rotation\", \"rotation-point\", \"row-gap\", \"ruby-align\", \"ruby-overhang\", \"ruby-position\", \"ruby-span\", \"scale\", \"scroll-behavior\", \"scroll-margin\", \"scroll-margin-block\", \"scroll-margin-block-end\", \"scroll-margin-block-start\", \"scroll-margin-bottom\", \"scroll-margin-inline\", \"scroll-margin-inline-end\", \"scroll-margin-inline-start\", \"scroll-margin-left\", \"scroll-margin-right\", \"scroll-margin-top\", \"scroll-padding\", \"scroll-padding-block\", \"scroll-padding-block-end\", \"scroll-padding-block-start\", \"scroll-padding-bottom\", \"scroll-padding-inline\", \"scroll-padding-inline-end\", \"scroll-padding-inline-start\", \"scroll-padding-left\", \"scroll-padding-right\", \"scroll-padding-top\", \"scroll-snap-align\", \"scroll-snap-type\", \"shape-image-threshold\", \"shape-inside\", \"shape-margin\", \"shape-outside\", \"size\", \"speak\", \"speak-as\", \"speak-header\", \"speak-numeral\", \"speak-punctuation\", \"speech-rate\", \"stress\", \"string-set\", \"tab-size\", \"table-layout\", \"target\", \"target-name\", \"target-new\", \"target-position\", \"text-align\", \"text-align-last\", \"text-combine-upright\", \"text-decoration\", \"text-decoration-color\", \"text-decoration-line\", \"text-decoration-skip\", \"text-decoration-skip-ink\", \"text-decoration-style\", \"text-emphasis\", \"text-emphasis-color\", \"text-emphasis-position\", \"text-emphasis-style\", \"text-height\", \"text-indent\", \"text-justify\", \"text-orientation\", \"text-outline\", \"text-overflow\", \"text-rendering\", \"text-shadow\", \"text-size-adjust\", \"text-space-collapse\", \"text-transform\", \"text-underline-position\", \"text-wrap\", \"top\", \"touch-action\", \"transform\", \"transform-origin\", \"transform-style\", \"transition\", \"transition-delay\", \"transition-duration\", \"transition-property\", \"transition-timing-function\", \"translate\", \"unicode-bidi\", \"user-select\", \"vertical-align\", \"visibility\", \"voice-balance\", \"voice-duration\", \"voice-family\", \"voice-pitch\", \"voice-range\", \"voice-rate\", \"voice-stress\", \"voice-volume\", \"volume\", \"white-space\", \"widows\", \"width\", \"will-change\", \"word-break\", \"word-spacing\", \"word-wrap\", \"writing-mode\", \"z-index\",\n  // SVG-specific\n  \"clip-path\", \"clip-rule\", \"mask\", \"enable-background\", \"filter\", \"flood-color\", \"flood-opacity\", \"lighting-color\", \"stop-color\", \"stop-opacity\", \"pointer-events\", \"color-interpolation\", \"color-interpolation-filters\", \"color-rendering\", \"fill\", \"fill-opacity\", \"fill-rule\", \"image-rendering\", \"marker\", \"marker-end\", \"marker-mid\", \"marker-start\", \"paint-order\", \"shape-rendering\", \"stroke\", \"stroke-dasharray\", \"stroke-dashoffset\", \"stroke-linecap\", \"stroke-linejoin\", \"stroke-miterlimit\", \"stroke-opacity\", \"stroke-width\", \"text-rendering\", \"baseline-shift\", \"dominant-baseline\", \"glyph-orientation-horizontal\", \"glyph-orientation-vertical\", \"text-anchor\", \"writing-mode\"],\n  propertyKeywords = keySet(propertyKeywords_);\nvar nonStandardPropertyKeywords_ = [\"accent-color\", \"aspect-ratio\", \"border-block\", \"border-block-color\", \"border-block-end\", \"border-block-end-color\", \"border-block-end-style\", \"border-block-end-width\", \"border-block-start\", \"border-block-start-color\", \"border-block-start-style\", \"border-block-start-width\", \"border-block-style\", \"border-block-width\", \"border-inline\", \"border-inline-color\", \"border-inline-end\", \"border-inline-end-color\", \"border-inline-end-style\", \"border-inline-end-width\", \"border-inline-start\", \"border-inline-start-color\", \"border-inline-start-style\", \"border-inline-start-width\", \"border-inline-style\", \"border-inline-width\", \"content-visibility\", \"margin-block\", \"margin-block-end\", \"margin-block-start\", \"margin-inline\", \"margin-inline-end\", \"margin-inline-start\", \"overflow-anchor\", \"overscroll-behavior\", \"padding-block\", \"padding-block-end\", \"padding-block-start\", \"padding-inline\", \"padding-inline-end\", \"padding-inline-start\", \"scroll-snap-stop\", \"scrollbar-3d-light-color\", \"scrollbar-arrow-color\", \"scrollbar-base-color\", \"scrollbar-dark-shadow-color\", \"scrollbar-face-color\", \"scrollbar-highlight-color\", \"scrollbar-shadow-color\", \"scrollbar-track-color\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"shape-inside\", \"zoom\"],\n  nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\nvar fontProperties_ = [\"font-display\", \"font-family\", \"src\", \"unicode-range\", \"font-variant\", \"font-feature-settings\", \"font-stretch\", \"font-weight\", \"font-style\"],\n  fontProperties = keySet(fontProperties_);\nvar counterDescriptors_ = [\"additive-symbols\", \"fallback\", \"negative\", \"pad\", \"prefix\", \"range\", \"speak-as\", \"suffix\", \"symbols\", \"system\"],\n  counterDescriptors = keySet(counterDescriptors_);\nvar colorKeywords_ = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkgrey\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkslategrey\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dimgrey\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"grey\", \"green\", \"greenyellow\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightgrey\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightslategrey\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"slategrey\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"],\n  colorKeywords = keySet(colorKeywords_);\nvar valueKeywords_ = [\"above\", \"absolute\", \"activeborder\", \"additive\", \"activecaption\", \"afar\", \"after-white-space\", \"ahead\", \"alias\", \"all\", \"all-scroll\", \"alphabetic\", \"alternate\", \"always\", \"amharic\", \"amharic-abegede\", \"antialiased\", \"appworkspace\", \"arabic-indic\", \"armenian\", \"asterisks\", \"attr\", \"auto\", \"auto-flow\", \"avoid\", \"avoid-column\", \"avoid-page\", \"avoid-region\", \"axis-pan\", \"background\", \"backwards\", \"baseline\", \"below\", \"bidi-override\", \"binary\", \"bengali\", \"blink\", \"block\", \"block-axis\", \"blur\", \"bold\", \"bolder\", \"border\", \"border-box\", \"both\", \"bottom\", \"break\", \"break-all\", \"break-word\", \"brightness\", \"bullets\", \"button\", \"buttonface\", \"buttonhighlight\", \"buttonshadow\", \"buttontext\", \"calc\", \"cambodian\", \"capitalize\", \"caps-lock-indicator\", \"caption\", \"captiontext\", \"caret\", \"cell\", \"center\", \"checkbox\", \"circle\", \"cjk-decimal\", \"cjk-earthly-branch\", \"cjk-heavenly-stem\", \"cjk-ideographic\", \"clear\", \"clip\", \"close-quote\", \"col-resize\", \"collapse\", \"color\", \"color-burn\", \"color-dodge\", \"column\", \"column-reverse\", \"compact\", \"condensed\", \"conic-gradient\", \"contain\", \"content\", \"contents\", \"content-box\", \"context-menu\", \"continuous\", \"contrast\", \"copy\", \"counter\", \"counters\", \"cover\", \"crop\", \"cross\", \"crosshair\", \"cubic-bezier\", \"currentcolor\", \"cursive\", \"cyclic\", \"darken\", \"dashed\", \"decimal\", \"decimal-leading-zero\", \"default\", \"default-button\", \"dense\", \"destination-atop\", \"destination-in\", \"destination-out\", \"destination-over\", \"devanagari\", \"difference\", \"disc\", \"discard\", \"disclosure-closed\", \"disclosure-open\", \"document\", \"dot-dash\", \"dot-dot-dash\", \"dotted\", \"double\", \"down\", \"drop-shadow\", \"e-resize\", \"ease\", \"ease-in\", \"ease-in-out\", \"ease-out\", \"element\", \"ellipse\", \"ellipsis\", \"embed\", \"end\", \"ethiopic\", \"ethiopic-abegede\", \"ethiopic-abegede-am-et\", \"ethiopic-abegede-gez\", \"ethiopic-abegede-ti-er\", \"ethiopic-abegede-ti-et\", \"ethiopic-halehame-aa-er\", \"ethiopic-halehame-aa-et\", \"ethiopic-halehame-am-et\", \"ethiopic-halehame-gez\", \"ethiopic-halehame-om-et\", \"ethiopic-halehame-sid-et\", \"ethiopic-halehame-so-et\", \"ethiopic-halehame-ti-er\", \"ethiopic-halehame-ti-et\", \"ethiopic-halehame-tig\", \"ethiopic-numeric\", \"ew-resize\", \"exclusion\", \"expanded\", \"extends\", \"extra-condensed\", \"extra-expanded\", \"fantasy\", \"fast\", \"fill\", \"fill-box\", \"fixed\", \"flat\", \"flex\", \"flex-end\", \"flex-start\", \"footnotes\", \"forwards\", \"from\", \"geometricPrecision\", \"georgian\", \"grayscale\", \"graytext\", \"grid\", \"groove\", \"gujarati\", \"gurmukhi\", \"hand\", \"hangul\", \"hangul-consonant\", \"hard-light\", \"hebrew\", \"help\", \"hidden\", \"hide\", \"higher\", \"highlight\", \"highlighttext\", \"hiragana\", \"hiragana-iroha\", \"horizontal\", \"hsl\", \"hsla\", \"hue\", \"hue-rotate\", \"icon\", \"ignore\", \"inactiveborder\", \"inactivecaption\", \"inactivecaptiontext\", \"infinite\", \"infobackground\", \"infotext\", \"inherit\", \"initial\", \"inline\", \"inline-axis\", \"inline-block\", \"inline-flex\", \"inline-grid\", \"inline-table\", \"inset\", \"inside\", \"intrinsic\", \"invert\", \"italic\", \"japanese-formal\", \"japanese-informal\", \"justify\", \"kannada\", \"katakana\", \"katakana-iroha\", \"keep-all\", \"khmer\", \"korean-hangul-formal\", \"korean-hanja-formal\", \"korean-hanja-informal\", \"landscape\", \"lao\", \"large\", \"larger\", \"left\", \"level\", \"lighter\", \"lighten\", \"line-through\", \"linear\", \"linear-gradient\", \"lines\", \"list-item\", \"listbox\", \"listitem\", \"local\", \"logical\", \"loud\", \"lower\", \"lower-alpha\", \"lower-armenian\", \"lower-greek\", \"lower-hexadecimal\", \"lower-latin\", \"lower-norwegian\", \"lower-roman\", \"lowercase\", \"ltr\", \"luminosity\", \"malayalam\", \"manipulation\", \"match\", \"matrix\", \"matrix3d\", \"media-play-button\", \"media-slider\", \"media-sliderthumb\", \"media-volume-slider\", \"media-volume-sliderthumb\", \"medium\", \"menu\", \"menulist\", \"menulist-button\", \"menutext\", \"message-box\", \"middle\", \"min-intrinsic\", \"mix\", \"mongolian\", \"monospace\", \"move\", \"multiple\", \"multiple_mask_images\", \"multiply\", \"myanmar\", \"n-resize\", \"narrower\", \"ne-resize\", \"nesw-resize\", \"no-close-quote\", \"no-drop\", \"no-open-quote\", \"no-repeat\", \"none\", \"normal\", \"not-allowed\", \"nowrap\", \"ns-resize\", \"numbers\", \"numeric\", \"nw-resize\", \"nwse-resize\", \"oblique\", \"octal\", \"opacity\", \"open-quote\", \"optimizeLegibility\", \"optimizeSpeed\", \"oriya\", \"oromo\", \"outset\", \"outside\", \"outside-shape\", \"overlay\", \"overline\", \"padding\", \"padding-box\", \"painted\", \"page\", \"paused\", \"persian\", \"perspective\", \"pinch-zoom\", \"plus-darker\", \"plus-lighter\", \"pointer\", \"polygon\", \"portrait\", \"pre\", \"pre-line\", \"pre-wrap\", \"preserve-3d\", \"progress\", \"push-button\", \"radial-gradient\", \"radio\", \"read-only\", \"read-write\", \"read-write-plaintext-only\", \"rectangle\", \"region\", \"relative\", \"repeat\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"repeating-conic-gradient\", \"repeat-x\", \"repeat-y\", \"reset\", \"reverse\", \"rgb\", \"rgba\", \"ridge\", \"right\", \"rotate\", \"rotate3d\", \"rotateX\", \"rotateY\", \"rotateZ\", \"round\", \"row\", \"row-resize\", \"row-reverse\", \"rtl\", \"run-in\", \"running\", \"s-resize\", \"sans-serif\", \"saturate\", \"saturation\", \"scale\", \"scale3d\", \"scaleX\", \"scaleY\", \"scaleZ\", \"screen\", \"scroll\", \"scrollbar\", \"scroll-position\", \"se-resize\", \"searchfield\", \"searchfield-cancel-button\", \"searchfield-decoration\", \"searchfield-results-button\", \"searchfield-results-decoration\", \"self-start\", \"self-end\", \"semi-condensed\", \"semi-expanded\", \"separate\", \"sepia\", \"serif\", \"show\", \"sidama\", \"simp-chinese-formal\", \"simp-chinese-informal\", \"single\", \"skew\", \"skewX\", \"skewY\", \"skip-white-space\", \"slide\", \"slider-horizontal\", \"slider-vertical\", \"sliderthumb-horizontal\", \"sliderthumb-vertical\", \"slow\", \"small\", \"small-caps\", \"small-caption\", \"smaller\", \"soft-light\", \"solid\", \"somali\", \"source-atop\", \"source-in\", \"source-out\", \"source-over\", \"space\", \"space-around\", \"space-between\", \"space-evenly\", \"spell-out\", \"square\", \"square-button\", \"start\", \"static\", \"status-bar\", \"stretch\", \"stroke\", \"stroke-box\", \"sub\", \"subpixel-antialiased\", \"svg_masks\", \"super\", \"sw-resize\", \"symbolic\", \"symbols\", \"system-ui\", \"table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row\", \"table-row-group\", \"tamil\", \"telugu\", \"text\", \"text-bottom\", \"text-top\", \"textarea\", \"textfield\", \"thai\", \"thick\", \"thin\", \"threeddarkshadow\", \"threedface\", \"threedhighlight\", \"threedlightshadow\", \"threedshadow\", \"tibetan\", \"tigre\", \"tigrinya-er\", \"tigrinya-er-abegede\", \"tigrinya-et\", \"tigrinya-et-abegede\", \"to\", \"top\", \"trad-chinese-formal\", \"trad-chinese-informal\", \"transform\", \"translate\", \"translate3d\", \"translateX\", \"translateY\", \"translateZ\", \"transparent\", \"ultra-condensed\", \"ultra-expanded\", \"underline\", \"unidirectional-pan\", \"unset\", \"up\", \"upper-alpha\", \"upper-armenian\", \"upper-greek\", \"upper-hexadecimal\", \"upper-latin\", \"upper-norwegian\", \"upper-roman\", \"uppercase\", \"urdu\", \"url\", \"var\", \"vertical\", \"vertical-text\", \"view-box\", \"visible\", \"visibleFill\", \"visiblePainted\", \"visibleStroke\", \"visual\", \"w-resize\", \"wait\", \"wave\", \"wider\", \"window\", \"windowframe\", \"windowtext\", \"words\", \"wrap\", \"wrap-reverse\", \"x-large\", \"x-small\", \"xor\", \"xx-large\", \"xx-small\"],\n  valueKeywords = keySet(valueKeywords_);\nvar allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_).concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_).concat(valueKeywords_);\nexport var keywords = {\n  properties: propertyKeywords_,\n  colors: colorKeywords_,\n  fonts: fontProperties_,\n  values: valueKeywords_,\n  all: allWords\n};\nvar defaults = {\n  documentTypes: documentTypes,\n  mediaTypes: mediaTypes,\n  mediaFeatures: mediaFeatures,\n  mediaValueKeywords: mediaValueKeywords,\n  propertyKeywords: propertyKeywords,\n  nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n  fontProperties: fontProperties,\n  counterDescriptors: counterDescriptors,\n  colorKeywords: colorKeywords,\n  valueKeywords: valueKeywords,\n  tokenHooks: {\n    \"/\": function _(stream, state) {\n      if (!stream.eat(\"*\")) return false;\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n  }\n};\nexport var css = mkCSS({\n  name: \"css\"\n});\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return [\"comment\", \"comment\"];\n}\nexport var sCSS = mkCSS({\n  name: \"scss\",\n  mediaTypes: mediaTypes,\n  mediaFeatures: mediaFeatures,\n  mediaValueKeywords: mediaValueKeywords,\n  propertyKeywords: propertyKeywords,\n  nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n  colorKeywords: colorKeywords,\n  valueKeywords: valueKeywords,\n  fontProperties: fontProperties,\n  allowNested: true,\n  lineComment: \"//\",\n  tokenHooks: {\n    \"/\": function _(stream, state) {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return [\"comment\", \"comment\"];\n      } else if (stream.eat(\"*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      } else {\n        return [\"operator\", \"operator\"];\n      }\n    },\n    \":\": function _(stream) {\n      if (stream.match(/^\\s*\\{/, false)) return [null, null];\n      return false;\n    },\n    \"$\": function $(stream) {\n      stream.match(/^[\\w-]+/);\n      if (stream.match(/^\\s*:/, false)) return [\"def\", \"variable-definition\"];\n      return [\"variableName.special\", \"variable\"];\n    },\n    \"#\": function _(stream) {\n      if (!stream.eat(\"{\")) return false;\n      return [null, \"interpolation\"];\n    }\n  }\n});\nexport var less = mkCSS({\n  name: \"less\",\n  mediaTypes: mediaTypes,\n  mediaFeatures: mediaFeatures,\n  mediaValueKeywords: mediaValueKeywords,\n  propertyKeywords: propertyKeywords,\n  nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n  colorKeywords: colorKeywords,\n  valueKeywords: valueKeywords,\n  fontProperties: fontProperties,\n  allowNested: true,\n  lineComment: \"//\",\n  tokenHooks: {\n    \"/\": function _(stream, state) {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return [\"comment\", \"comment\"];\n      } else if (stream.eat(\"*\")) {\n        state.tokenize = tokenCComment;\n        return tokenCComment(stream, state);\n      } else {\n        return [\"operator\", \"operator\"];\n      }\n    },\n    \"@\": function _(stream) {\n      if (stream.eat(\"{\")) return [null, \"interpolation\"];\n      if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/i, false)) return false;\n      stream.eatWhile(/[\\w\\\\\\-]/);\n      if (stream.match(/^\\s*:/, false)) return [\"def\", \"variable-definition\"];\n      return [\"variableName\", \"variable\"];\n    },\n    \"&\": function _() {\n      return [\"atom\", \"atom\"];\n    }\n  }\n});\nexport var gss = mkCSS({\n  name: \"gss\",\n  documentTypes: documentTypes,\n  mediaTypes: mediaTypes,\n  mediaFeatures: mediaFeatures,\n  propertyKeywords: propertyKeywords,\n  nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n  fontProperties: fontProperties,\n  counterDescriptors: counterDescriptors,\n  colorKeywords: colorKeywords,\n  valueKeywords: valueKeywords,\n  supportsAtComponent: true,\n  tokenHooks: {\n    \"/\": function _(stream, state) {\n      if (!stream.eat(\"*\")) return false;\n      state.tokenize = tokenCComment;\n      return tokenCComment(stream, state);\n    }\n  }\n});"],"sourceRoot":""}