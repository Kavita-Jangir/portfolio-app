{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/solr.js"],"names":["__webpack_require__","r","__webpack_exports__","d","solr","isStringChar","isOperatorChar","isOperatorString","tokenWord","ch","stream","state","word","peek","match","next","tokenize","tokenBase","test","parseFloat","toString","isNumber","operator","quote","escaped","eat","name","startState","token","eatSpace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAA,IAAAC,EAAA,4CACAC,EAAA,uBACAC,EAAA,qBAuBA,SAAAC,EAAAC,GACA,gBAAAC,EAAAC,GAEA,IADA,IAAAC,EAAAH,GACAA,EAAAC,EAAAG,SAAA,MAAAJ,EAAAK,MAAAT,IACAO,GAAAF,EAAAK,OAGA,OADAJ,EAAAK,SAAAC,EACAV,EAAAW,KAAAN,GAAA,WA7BA,SAAAA,GACA,OAAAO,WAAAP,GAAAQ,aAAAR,EA4BuDS,CAAAT,GAAA,SAAyC,KAAAF,EAAAG,OAAA,eAAqD,UAGrJ,SAAAI,EAAAP,EAAAC,GACA,IAlBAW,EAZAC,EA8BAd,EAAAC,EAAAK,OAEA,MADA,KAAAN,EAAAE,EAAAK,UA/BAO,EA+BAd,EA9BA,SAAAC,EAAAC,GAGA,IAFA,IACAI,EADAS,GAAA,EAEA,OAAAT,EAAAL,EAAAK,UACAA,GAAAQ,GAAAC,IACAA,MAAA,MAAAT,EAGA,OADAS,IAAAb,EAAAK,SAAAC,GACA,WAsBkDX,EAAAY,KAAAT,GAAAE,EAAAK,UAnBlDM,EAmBkDb,EAlBlD,SAAAC,EAAAC,GAGA,MAFA,KAAAW,EAAAZ,EAAAe,IAAA,MAA0C,KAAAH,GAAAZ,EAAAe,IAAA,MAC1Cd,EAAAK,SAAAC,EACA,aAeuHZ,EAAAa,KAAAT,KAAAE,EAAAK,SAAAR,EAAAC,IACvHE,EAAAK,UAAAC,EAAAN,EAAAK,SAAAN,EAAAC,GAAA,KAEO,IAAAP,EAAA,CACPsB,KAAA,OACAC,WAAA,WACA,OACAX,SAAAC,IAGAW,MAAA,SAAAlB,EAAAC,GACA,OAAAD,EAAAmB,WAAA,KACAlB,EAAAK,SAAAN,EAAAC","file":"static/js/85.d78d67e0.chunk.js","sourcesContent":["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/i;\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenOperator(operator) {\n  return function (stream, state) {\n    if (operator == \"|\") stream.eat(/\\|/);else if (operator == \"&\") stream.eat(/\\&/);\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\nfunction tokenWord(ch) {\n  return function (stream, state) {\n    var word = ch;\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word)) return \"operator\";else if (isNumber(word)) return \"number\";else if (stream.peek() == \":\") return \"propertyName\";else return \"string\";\n  };\n}\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"') state.tokenize = tokenString(ch);else if (isOperatorChar.test(ch)) state.tokenize = tokenOperator(ch);else if (isStringChar.test(ch)) state.tokenize = tokenWord(ch);\n  return state.tokenize != tokenBase ? state.tokenize(stream, state) : null;\n}\nexport var solr = {\n  name: \"solr\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};"],"sourceRoot":""}