{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/sieve.js"],"names":["words","str","obj","split","i","length","__webpack_require__","r","__webpack_exports__","d","sieve","keywords","atoms","tokenBase","stream","state","quote","ch","next","eat","tokenize","tokenCComment","skipToEnd","escaped","_indent","push","pop","test","eatWhile","cur","current","tokenMultiLineString","propertyIsEnumerable","_multiLineString","sol","eol","eatSpace","peek","maybeEnd","name","startState","base","baseIndent","token","indent","_textAfter","cx","unit","languageData","indentOnInput"],"mappings":"2FAAA,SAAAA,EAAAC,GAGA,IAFA,IAAAC,EAAA,GACAF,EAAAC,EAAAE,MAAA,KACAC,EAAA,EAAiBA,EAAAJ,EAAAK,SAAkBD,EAAAF,EAAAF,EAAAI,KAAA,EACnC,OAAAF,EAJAI,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAMA,IAAAC,EAAAX,EAAA,8BACAY,EAAAZ,EAAA,kBACA,SAAAa,EAAAC,EAAAC,GACA,IA6FAC,EA7FAC,EAAAH,EAAAI,OACA,QAAAD,GAAAH,EAAAK,IAAA,KAEA,OADAJ,EAAAK,SAAAC,EACAA,EAAAP,EAAAC,GAEA,SAAAE,EAEA,OADAH,EAAAQ,YACA,UAEA,QAAAL,EAEA,OADAF,EAAAK,UAmFAJ,EAnFAC,EAoFA,SAAAH,EAAAC,GAGA,IAFA,IACAE,EADAM,GAAA,EAEA,OAAAN,EAAAH,EAAAI,UACAD,GAAAD,GAAAO,IACAA,MAAA,MAAAN,EAGA,OADAM,IAAAR,EAAAK,SAAAP,GACA,WA3FAE,EAAAK,SAAAN,EAAAC,GAEA,QAAAE,EAKA,OAJAF,EAAAS,QAAAC,KAAA,KAGAV,EAAAS,QAAAC,KAAA,KACA,KAEA,SAAAR,EAEA,OADAF,EAAAS,QAAAC,KAAA,KACA,KAMA,GAJA,KAAAR,IACAF,EAAAS,QAAAE,MACAX,EAAAS,QAAAE,OAEA,MAAAT,EAEA,OADAF,EAAAS,QAAAE,MACA,KAEA,QAAAT,EAAA,YACA,QAAAA,EAAc,YACd,gBAAgBU,KAAAV,GAAA,YAGhB,QAAAU,KAAAV,GAGA,OAFAH,EAAAc,SAAA,QACAd,EAAAK,IAAA,YACA,SAIA,QAAAF,EAGA,OAFAH,EAAAc,SAAA,aACAd,EAAAc,SAAA,gBACA,WAEAd,EAAAc,SAAA,MACA,IAAAC,EAAAf,EAAAgB,UAKA,cAAAD,GAAAf,EAAAK,IAAA,MACAJ,EAAAK,SAAAW,EACA,UAEApB,EAAAqB,qBAAAH,GAAA,UACAjB,EAAAoB,qBAAAH,GAAA,OACA,KAEA,SAAAE,EAAAjB,EAAAC,GAGA,OAFAA,EAAAkB,kBAAA,EAEAnB,EAAAoB,OASA,KAAApB,EAAAI,QAAAJ,EAAAqB,QACApB,EAAAkB,kBAAA,EACAlB,EAAAK,SAAAP,GAEA,WAZAC,EAAAsB,WACA,KAAAtB,EAAAuB,QACAvB,EAAAQ,YACA,YAEAR,EAAAQ,YACA,WAQA,SAAAD,EAAAP,EAAAC,GAGA,IAFA,IACAE,EADAqB,GAAA,EAEA,OAAArB,EAAAH,EAAAI,SAAA,CACA,GAAAoB,GAAA,KAAArB,EAAA,CACAF,EAAAK,SAAAP,EACA,MAEAyB,EAAA,KAAArB,EAEA,gBAcO,IAAAP,EAAA,CACP6B,KAAA,QACAC,WAAA,SAAAC,GACA,OACArB,SAAAP,EACA6B,WAAAD,GAAA,EACAjB,QAAA,KAGAmB,MAAA,SAAA7B,EAAAC,GACA,OAAAD,EAAAsB,WAAA,MACArB,EAAAK,UAAAP,GAAAC,EAAAC,IAEA6B,OAAA,SAAA7B,EAAA8B,EAAAC,GACA,IAAAzC,EAAAU,EAAAS,QAAAnB,OAGA,OAFAwC,GAAA,KAAAA,EAAA,IAAyCxC,IACzCA,EAAA,IAAAA,EAAA,GACAA,EAAAyC,EAAAC,MAEAC,aAAA,CACAC,cAAA","file":"static/js/83.9590df38.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"(\") {\n    state._indent.push(\"(\");\n    // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n    state._indent.push(\"{\");\n    return null;\n  }\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n    return null;\n  }\n  if (ch == \")\") {\n    state._indent.pop();\n    state._indent.pop();\n  }\n  if (ch === \"}\") {\n    state._indent.pop();\n    return null;\n  }\n  if (ch == \",\") return null;\n  if (ch == \";\") return null;\n  if (/[{}\\(\\),;]/.test(ch)) return null;\n\n  // 1*DIGIT \"K\" / \"M\" / \"G\"\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  }\n\n  // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n    return \"operator\";\n  }\n  stream.eatWhile(/\\w/);\n  var cur = stream.current();\n\n  // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n  if (cur == \"text\" && stream.eat(\":\")) {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return null;\n}\nfunction tokenMultiLineString(stream, state) {\n  state._multiLineString = true;\n  // the first line is special it may contain a comment\n  if (!stream.sol()) {\n    stream.eatSpace();\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    stream.skipToEnd();\n    return \"string\";\n  }\n  if (stream.next() == \".\" && stream.eol()) {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n  return \"string\";\n}\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nexport var sieve = {\n  name: \"sieve\",\n  startState: function startState(base) {\n    return {\n      tokenize: tokenBase,\n      baseIndent: base || 0,\n      _indent: []\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n  indent: function indent(state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && _textAfter[0] == \"}\") length--;\n    if (length < 0) length = 0;\n    return length * cx.unit;\n  },\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};"],"sourceRoot":""}