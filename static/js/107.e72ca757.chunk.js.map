{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/yaml.js"],"names":["__webpack_require__","r","__webpack_exports__","d","yaml","keywordRegex","RegExp","join","name","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","languageData","commentTokens","line"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAA,IACAC,EAAA,IAAAC,OAAA,QADA,uCACAC,KAAA,kBACOH,EAAA,CACPI,KAAA,OACAC,MAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAG,OACAC,EAAAH,EAAAI,QAGA,GAFAJ,EAAAI,SAAA,EAEA,KAAAH,IAAA,GAAAF,EAAAM,KAAA,KAAAC,KAAAP,EAAAQ,OAAAC,OAAAT,EAAAM,IAAA,KAEA,OADAN,EAAAU,YACA,UAEA,GAAAV,EAAAW,MAAA,mDACA,GAAAV,EAAAW,SAAAZ,EAAAa,cAAAZ,EAAAa,OAEA,OADAd,EAAAU,YACA,SAIA,GAHKT,EAAAW,UACLX,EAAAW,SAAA,GAEAZ,EAAAe,MAAA,CAKA,GAJAd,EAAAa,OAAA,EACAb,EAAAe,MAAA,EACAf,EAAAgB,WAAA,EAEAjB,EAAAW,MAAA,OACA,YAGA,GAAAX,EAAAW,MAAA,OACA,YAGA,GAAAX,EAAAW,MAAA,YACA,aAIA,GAAAX,EAAAW,MAAA,kBAEA,MADA,KAAAT,EAAkBD,EAAAiB,cAAuB,KAAAhB,EAAiBD,EAAAiB,cAAuB,KAAAhB,EAAAD,EAAAkB,aAAuClB,EAAAkB,aACxH,OAIA,GAAAlB,EAAAkB,WAAA,IAAAf,GAAA,KAAAF,EAEA,OADAF,EAAAoB,OACA,OAGA,GAAAnB,EAAAiB,YAAA,IAAAd,GAAA,KAAAF,EAKA,OAJAD,EAAAa,OAAA,EACAb,EAAAe,MAAA,EACAf,EAAAgB,WAAA,EACAjB,EAAAoB,OACA,OAIA,GAAAnB,EAAAgB,UAAA,CAEA,GAAAjB,EAAAW,MAAA,kBAEA,OADAV,EAAAW,SAAA,EACA,OAIA,GAAAZ,EAAAW,MAAA,+BACA,iBAGA,MAAAV,EAAAiB,aAAAlB,EAAAW,MAAA,wBACA,eAEA,GAAAV,EAAAiB,YAAA,GAAAlB,EAAAW,MAAA,gCACA,eAGA,GAAAX,EAAAW,MAAAhB,GACA,gBAKA,OAAAM,EAAAe,MAAAhB,EAAAW,MAAA,kFACAV,EAAAe,MAAA,EACAf,EAAAa,OAAAd,EAAAa,cACA,QAEAZ,EAAAe,MAAAhB,EAAAW,MAAA,UACAV,EAAAgB,WAAA,EACA,SAIAhB,EAAAgB,WAAA,EACAhB,EAAAI,QAAA,MAAAH,EACAF,EAAAoB,OACA,OAEAC,WAAA,WACA,OACAL,MAAA,EACAC,WAAA,EACAH,OAAA,EACAI,YAAA,EACAC,WAAA,EACAP,SAAA,EACAP,SAAA,IAGAiB,aAAA,CACAC,cAAA,CACAC,KAAA","file":"static/js/107.e72ca757.chunk.js","sourcesContent":["var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\nvar keywordRegex = new RegExp(\"\\\\b((\" + cons.join(\")|(\") + \"))$\", 'i');\nexport var yaml = {\n  name: \"yaml\",\n  token: function token(stream, state) {\n    var ch = stream.peek();\n    var esc = state.escaped;\n    state.escaped = false;\n    /* comments */\n    if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/)) return \"string\";\n    if (state.literal && stream.indentation() > state.keyCol) {\n      stream.skipToEnd();\n      return \"string\";\n    } else if (state.literal) {\n      state.literal = false;\n    }\n    if (stream.sol()) {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      /* document start */\n      if (stream.match('---')) {\n        return \"def\";\n      }\n      /* document end */\n      if (stream.match('...')) {\n        return \"def\";\n      }\n      /* array list item */\n      if (stream.match(/^\\s*-\\s+/)) {\n        return 'meta';\n      }\n    }\n    /* inline pairs/lists */\n    if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n      if (ch == '{') state.inlinePairs++;else if (ch == '}') state.inlinePairs--;else if (ch == '[') state.inlineList++;else state.inlineList--;\n      return 'meta';\n    }\n\n    /* list separator */\n    if (state.inlineList > 0 && !esc && ch == ',') {\n      stream.next();\n      return 'meta';\n    }\n    /* pairs separator */\n    if (state.inlinePairs > 0 && !esc && ch == ',') {\n      state.keyCol = 0;\n      state.pair = false;\n      state.pairStart = false;\n      stream.next();\n      return 'meta';\n    }\n\n    /* start of value of a pair */\n    if (state.pairStart) {\n      /* block literals */\n      if (stream.match(/^\\s*(\\||\\>)\\s*/)) {\n        state.literal = true;\n        return 'meta';\n      }\n      ;\n      /* references */\n      if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) {\n        return 'variable';\n      }\n      /* numbers */\n      if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) {\n        return 'number';\n      }\n      if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) {\n        return 'number';\n      }\n      /* keywords */\n      if (stream.match(keywordRegex)) {\n        return 'keyword';\n      }\n    }\n\n    /* pairs (associative arrays) -> key */\n    if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n      state.pair = true;\n      state.keyCol = stream.indentation();\n      return \"atom\";\n    }\n    if (state.pair && stream.match(/^:\\s*/)) {\n      state.pairStart = true;\n      return 'meta';\n    }\n\n    /* nothing found, continue */\n    state.pairStart = false;\n    state.escaped = ch == '\\\\';\n    stream.next();\n    return null;\n  },\n  startState: function startState() {\n    return {\n      pair: false,\n      pairStart: false,\n      keyCol: 0,\n      inlinePairs: 0,\n      inlineList: 0,\n      literal: false,\n      escaped: false\n    };\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}