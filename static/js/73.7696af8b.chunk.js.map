{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/protobuf.js"],"names":["__webpack_require__","r","__webpack_exports__","d","protobuf","keywordArray","keywords","RegExp","join","identifiers","name","token","stream","eatSpace","match","skipToEnd","next","languageData","autocomplete"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,6BAAAE,IAIA,IAAAC,EAAA,qSACAC,EAJA,IAAAC,OAAA,MAIAF,EAJAG,KAAA,oBAKAC,EAAA,IAAAF,OAAA,iDAwCO,IAAAH,EAAA,CACPM,KAAA,WACAC,MAzCA,SAAAC,GAEA,GAAAA,EAAAC,WAAA,YAGA,GAAAD,EAAAE,MAAA,MAEA,OADAF,EAAAG,YACA,UAIA,GAAAH,EAAAE,MAAA,kBACA,GAAAF,EAAAE,MAAA,uCACA,GAAAF,EAAAE,MAAA,kDACA,GAAAF,EAAAE,MAAA,6CAIA,OAAAF,EAAAE,MAAA,mBACA,SAEAF,EAAAE,MAAA,mBACA,SAIAF,EAAAE,MAAAR,GACA,UAEAM,EAAAE,MAAAL,GACA,YAKAG,EAAAI,OACA,OAMAC,aAAA,CACAC,aAAAb","file":"static/js/73.7696af8b.chunk.js","sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n;\nvar keywordArray = [\"package\", \"message\", \"import\", \"syntax\", \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\", \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"option\", \"service\", \"rpc\", \"returns\"];\nvar keywords = wordRegexp(keywordArray);\nvar identifiers = new RegExp(\"^[_A-Za-z\\xA1-\\uFFFF][_A-Za-z0-9\\xA1-\\uFFFF]*\");\nfunction tokenBase(stream) {\n  // whitespaces\n  if (stream.eatSpace()) return null;\n\n  // Handle one line Comments\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^[0-9\\.+-]/, false)) {\n    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/)) return \"number\";\n    if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n    if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/)) return \"number\";\n  }\n\n  // Handle Strings\n  if (stream.match(/^\"([^\"]|(\"\"))*\"/)) {\n    return \"string\";\n  }\n  if (stream.match(/^'([^']|(''))*'/)) {\n    return \"string\";\n  }\n\n  // Handle words\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n  if (stream.match(identifiers)) {\n    return \"variable\";\n  }\n  ;\n\n  // Handle non-detected items\n  stream.next();\n  return null;\n}\n;\nexport var protobuf = {\n  name: \"protobuf\",\n  token: tokenBase,\n  languageData: {\n    autocomplete: keywordArray\n  }\n};"],"sourceRoot":""}