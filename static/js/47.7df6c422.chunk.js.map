{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/gas.js"],"names":["mkGas","arch","custom","lineCommentStartSymbol","directives",".abort",".align",".altmacro",".ascii",".asciz",".balign",".balignw",".balignl",".bundle_align_mode",".bundle_lock",".bundle_unlock",".byte",".cfi_startproc",".comm",".data",".def",".desc",".dim",".double",".eject",".else",".elseif",".end",".endef",".endfunc",".endif",".equ",".equiv",".eqv",".err",".error",".exitm",".extern",".fail",".file",".fill",".float",".func",".global",".gnu_attribute",".hidden",".hword",".ident",".if",".incbin",".include",".int",".internal",".irp",".irpc",".lcomm",".lflags",".line",".linkonce",".list",".ln",".loc",".loc_mark_labels",".local",".long",".macro",".mri",".noaltmacro",".nolist",".octa",".offset",".org",".p2align",".popsection",".previous",".print",".protected",".psize",".purgem",".pushsection",".quad",".reloc",".rept",".sbttl",".scl",".section",".set",".short",".single",".size",".skip",".sleb128",".space",".stab",".string",".struct",".subsection",".symver",".tag",".text",".title",".type",".uleb128",".val",".version",".vtable_entry",".vtable_inherit",".warning",".weak",".weakref",".word","registers","clikeComment","stream","state","ch","maybeEnd","next","tokenize","al","ah","ax","eax","rax","bl","bh","bx","ebx","rbx","cl","cx","ecx","rcx","dl","dh","dx","edx","rdx","si","esi","rsi","di","edi","rdi","sp","esp","rsp","bp","ebp","rbp","ip","eip","rip","cs","ds","ss","es","fs","gs","syntax","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","r10","r11","r12","lr","pc","r13","r14","r15","push","eatWhile","name","startState","token","eatSpace","style","cur","eat","skipToEnd","end","escaped","nextUntilUnescaped","current","toLowerCase","test","i","length","languageData","commentTokens","line","block","open","close","__webpack_require__","r","__webpack_exports__","d","gas","gasArm"],"mappings":"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","file":"static/js/47.7df6c422.chunk.js","sourcesContent":["function mkGas(arch) {\n  // If an architecture is specified, its initialization function may\n  // populate this array with custom parsing functions which will be\n  // tried in the event that the standard functions do not find a match.\n  var custom = [];\n\n  // The symbol used to start a line comment changes based on the target\n  // architecture.\n  // If no architecture is pased in \"parserConfig\" then only multiline\n  // comments will have syntax support.\n  var lineCommentStartSymbol = \"\";\n\n  // These directives are architecture independent.\n  // Machine specific directives should go in their respective\n  // architecture initialization function.\n  // Reference:\n  // http://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops\n  var directives = {\n    \".abort\": \"builtin\",\n    \".align\": \"builtin\",\n    \".altmacro\": \"builtin\",\n    \".ascii\": \"builtin\",\n    \".asciz\": \"builtin\",\n    \".balign\": \"builtin\",\n    \".balignw\": \"builtin\",\n    \".balignl\": \"builtin\",\n    \".bundle_align_mode\": \"builtin\",\n    \".bundle_lock\": \"builtin\",\n    \".bundle_unlock\": \"builtin\",\n    \".byte\": \"builtin\",\n    \".cfi_startproc\": \"builtin\",\n    \".comm\": \"builtin\",\n    \".data\": \"builtin\",\n    \".def\": \"builtin\",\n    \".desc\": \"builtin\",\n    \".dim\": \"builtin\",\n    \".double\": \"builtin\",\n    \".eject\": \"builtin\",\n    \".else\": \"builtin\",\n    \".elseif\": \"builtin\",\n    \".end\": \"builtin\",\n    \".endef\": \"builtin\",\n    \".endfunc\": \"builtin\",\n    \".endif\": \"builtin\",\n    \".equ\": \"builtin\",\n    \".equiv\": \"builtin\",\n    \".eqv\": \"builtin\",\n    \".err\": \"builtin\",\n    \".error\": \"builtin\",\n    \".exitm\": \"builtin\",\n    \".extern\": \"builtin\",\n    \".fail\": \"builtin\",\n    \".file\": \"builtin\",\n    \".fill\": \"builtin\",\n    \".float\": \"builtin\",\n    \".func\": \"builtin\",\n    \".global\": \"builtin\",\n    \".gnu_attribute\": \"builtin\",\n    \".hidden\": \"builtin\",\n    \".hword\": \"builtin\",\n    \".ident\": \"builtin\",\n    \".if\": \"builtin\",\n    \".incbin\": \"builtin\",\n    \".include\": \"builtin\",\n    \".int\": \"builtin\",\n    \".internal\": \"builtin\",\n    \".irp\": \"builtin\",\n    \".irpc\": \"builtin\",\n    \".lcomm\": \"builtin\",\n    \".lflags\": \"builtin\",\n    \".line\": \"builtin\",\n    \".linkonce\": \"builtin\",\n    \".list\": \"builtin\",\n    \".ln\": \"builtin\",\n    \".loc\": \"builtin\",\n    \".loc_mark_labels\": \"builtin\",\n    \".local\": \"builtin\",\n    \".long\": \"builtin\",\n    \".macro\": \"builtin\",\n    \".mri\": \"builtin\",\n    \".noaltmacro\": \"builtin\",\n    \".nolist\": \"builtin\",\n    \".octa\": \"builtin\",\n    \".offset\": \"builtin\",\n    \".org\": \"builtin\",\n    \".p2align\": \"builtin\",\n    \".popsection\": \"builtin\",\n    \".previous\": \"builtin\",\n    \".print\": \"builtin\",\n    \".protected\": \"builtin\",\n    \".psize\": \"builtin\",\n    \".purgem\": \"builtin\",\n    \".pushsection\": \"builtin\",\n    \".quad\": \"builtin\",\n    \".reloc\": \"builtin\",\n    \".rept\": \"builtin\",\n    \".sbttl\": \"builtin\",\n    \".scl\": \"builtin\",\n    \".section\": \"builtin\",\n    \".set\": \"builtin\",\n    \".short\": \"builtin\",\n    \".single\": \"builtin\",\n    \".size\": \"builtin\",\n    \".skip\": \"builtin\",\n    \".sleb128\": \"builtin\",\n    \".space\": \"builtin\",\n    \".stab\": \"builtin\",\n    \".string\": \"builtin\",\n    \".struct\": \"builtin\",\n    \".subsection\": \"builtin\",\n    \".symver\": \"builtin\",\n    \".tag\": \"builtin\",\n    \".text\": \"builtin\",\n    \".title\": \"builtin\",\n    \".type\": \"builtin\",\n    \".uleb128\": \"builtin\",\n    \".val\": \"builtin\",\n    \".version\": \"builtin\",\n    \".vtable_entry\": \"builtin\",\n    \".vtable_inherit\": \"builtin\",\n    \".warning\": \"builtin\",\n    \".weak\": \"builtin\",\n    \".weakref\": \"builtin\",\n    \".word\": \"builtin\"\n  };\n  var registers = {};\n  function x86() {\n    lineCommentStartSymbol = \"#\";\n    registers.al = \"variable\";\n    registers.ah = \"variable\";\n    registers.ax = \"variable\";\n    registers.eax = \"variableName.special\";\n    registers.rax = \"variableName.special\";\n    registers.bl = \"variable\";\n    registers.bh = \"variable\";\n    registers.bx = \"variable\";\n    registers.ebx = \"variableName.special\";\n    registers.rbx = \"variableName.special\";\n    registers.cl = \"variable\";\n    registers.ch = \"variable\";\n    registers.cx = \"variable\";\n    registers.ecx = \"variableName.special\";\n    registers.rcx = \"variableName.special\";\n    registers.dl = \"variable\";\n    registers.dh = \"variable\";\n    registers.dx = \"variable\";\n    registers.edx = \"variableName.special\";\n    registers.rdx = \"variableName.special\";\n    registers.si = \"variable\";\n    registers.esi = \"variableName.special\";\n    registers.rsi = \"variableName.special\";\n    registers.di = \"variable\";\n    registers.edi = \"variableName.special\";\n    registers.rdi = \"variableName.special\";\n    registers.sp = \"variable\";\n    registers.esp = \"variableName.special\";\n    registers.rsp = \"variableName.special\";\n    registers.bp = \"variable\";\n    registers.ebp = \"variableName.special\";\n    registers.rbp = \"variableName.special\";\n    registers.ip = \"variable\";\n    registers.eip = \"variableName.special\";\n    registers.rip = \"variableName.special\";\n    registers.cs = \"keyword\";\n    registers.ds = \"keyword\";\n    registers.ss = \"keyword\";\n    registers.es = \"keyword\";\n    registers.fs = \"keyword\";\n    registers.gs = \"keyword\";\n  }\n  function armv6() {\n    // Reference:\n    // http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001l/QRC0001_UAL.pdf\n    // http://infocenter.arm.com/help/topic/com.arm.doc.ddi0301h/DDI0301H_arm1176jzfs_r0p7_trm.pdf\n    lineCommentStartSymbol = \"@\";\n    directives.syntax = \"builtin\";\n    registers.r0 = \"variable\";\n    registers.r1 = \"variable\";\n    registers.r2 = \"variable\";\n    registers.r3 = \"variable\";\n    registers.r4 = \"variable\";\n    registers.r5 = \"variable\";\n    registers.r6 = \"variable\";\n    registers.r7 = \"variable\";\n    registers.r8 = \"variable\";\n    registers.r9 = \"variable\";\n    registers.r10 = \"variable\";\n    registers.r11 = \"variable\";\n    registers.r12 = \"variable\";\n    registers.sp = \"variableName.special\";\n    registers.lr = \"variableName.special\";\n    registers.pc = \"variableName.special\";\n    registers.r13 = registers.sp;\n    registers.r14 = registers.lr;\n    registers.r15 = registers.pc;\n    custom.push(function (ch, stream) {\n      if (ch === '#') {\n        stream.eatWhile(/\\w/);\n        return \"number\";\n      }\n    });\n  }\n  if (arch === \"x86\") {\n    x86();\n  } else if (arch === \"arm\" || arch === \"armv6\") {\n    armv6();\n  }\n  function nextUntilUnescaped(stream, end) {\n    var escaped = false,\n      next;\n    while ((next = stream.next()) != null) {\n      if (next === end && !escaped) {\n        return false;\n      }\n      escaped = !escaped && next === \"\\\\\";\n    }\n    return escaped;\n  }\n  function clikeComment(stream, state) {\n    var maybeEnd = false,\n      ch;\n    while ((ch = stream.next()) != null) {\n      if (ch === \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = ch === \"*\";\n    }\n    return \"comment\";\n  }\n  return {\n    name: \"gas\",\n    startState: function startState() {\n      return {\n        tokenize: null\n      };\n    },\n    token: function token(stream, state) {\n      if (state.tokenize) {\n        return state.tokenize(stream, state);\n      }\n      if (stream.eatSpace()) {\n        return null;\n      }\n      var style,\n        cur,\n        ch = stream.next();\n      if (ch === \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = clikeComment;\n          return clikeComment(stream, state);\n        }\n      }\n      if (ch === lineCommentStartSymbol) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (ch === '\"') {\n        nextUntilUnescaped(stream, '\"');\n        return \"string\";\n      }\n      if (ch === '.') {\n        stream.eatWhile(/\\w/);\n        cur = stream.current().toLowerCase();\n        style = directives[cur];\n        return style || null;\n      }\n      if (ch === '=') {\n        stream.eatWhile(/\\w/);\n        return \"tag\";\n      }\n      if (ch === '{') {\n        return \"bracket\";\n      }\n      if (ch === '}') {\n        return \"bracket\";\n      }\n      if (/\\d/.test(ch)) {\n        if (ch === \"0\" && stream.eat(\"x\")) {\n          stream.eatWhile(/[0-9a-fA-F]/);\n          return \"number\";\n        }\n        stream.eatWhile(/\\d/);\n        return \"number\";\n      }\n      if (/\\w/.test(ch)) {\n        stream.eatWhile(/\\w/);\n        if (stream.eat(\":\")) {\n          return 'tag';\n        }\n        cur = stream.current().toLowerCase();\n        style = registers[cur];\n        return style || null;\n      }\n      for (var i = 0; i < custom.length; i++) {\n        style = custom[i](ch, stream, state);\n        if (style) {\n          return style;\n        }\n      }\n    },\n    languageData: {\n      commentTokens: {\n        line: lineCommentStartSymbol,\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      }\n    }\n  };\n}\n;\nexport var gas = mkGas(\"x86\");\nexport var gasArm = mkGas(\"arm\");"],"sourceRoot":""}