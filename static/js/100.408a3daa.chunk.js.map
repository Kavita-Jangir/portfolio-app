{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/vb.js"],"names":["__webpack_require__","r","__webpack_exports__","d","vb","ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","stringPrefixes","opening","middle","closing","doubleClosing","doOpening","indentInfo","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","delimiter","singleline","length","eol","eatWhile","tokenStringFactory","current","doInCurrentLine","next","name","startState","lastToken","nextLineIndent","token","sol","style","delimiter_index","indexOf","tokenLexer","content","textAfter","cx","trueText","replace","unit","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"],"mappings":"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","file":"static/js/100.408a3daa.chunk.js","sourcesContent":["var ERRORCLASS = 'error';\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\nvar openingKeywords = ['class', 'module', 'sub', 'enum', 'select', 'while', 'if', 'function', 'get', 'set', 'property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else', 'elseif', 'case', 'catch', 'finally'];\nvar endKeywords = ['next', 'loop'];\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\nvar indentInfo = null;\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n}\n// tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n  var ch = stream.peek();\n\n  // Handle Comments\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^\\d*\\.\\d+F?/i)) {\n      floatLiteral = true;\n    } else if (stream.match(/^\\d+\\.\\d*F?/)) {\n      floatLiteral = true;\n    } else if (stream.match(/^\\.\\d+F?/)) {\n      floatLiteral = true;\n    }\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^&H[0-9a-f]+/i)) {\n      intLiteral = true;\n    }\n    // Octal\n    else if (stream.match(/^&O[0-7]+/i)) {\n      intLiteral = true;\n    }\n    // Decimal\n    else if (stream.match(/^[1-9]\\d*F?/)) {\n      // Decimal literals may be \"imaginary\"\n      stream.eat(/J/i);\n      // TODO - Can you have imaginary longs?\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    else if (stream.match(/^0(?![\\dx])/i)) {\n      intLiteral = true;\n    }\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doubleOperators) || stream.match(singleOperators) || stream.match(wordOperators)) {\n    return 'operator';\n  }\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doOpening)) {\n    indent(stream, state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n  if (stream.match(opening)) {\n    if (!state.doInCurrentLine) indent(stream, state);else state.doInCurrentLine = false;\n    return 'keyword';\n  }\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n  if (stream.match(doubleClosing)) {\n    dedent(stream, state);\n    dedent(stream, state);\n    return 'keyword';\n  }\n  if (stream.match(closing)) {\n    dedent(stream, state);\n    return 'keyword';\n  }\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n  return function (stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return OUTCLASS;\n  };\n}\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle '.' connected identifiers\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n  var delimiter_index = '[({'.indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state);\n  }\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = '])}'.indexOf(current);\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  return style;\n}\nexport var vb = {\n  name: \"vb\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n    var style = tokenLexer(stream, state);\n    state.lastToken = {\n      style: style,\n      content: stream.current()\n    };\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit * (state.currentIndent - 1);\n    if (state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    commentTokens: {\n      line: \"'\"\n    },\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords).concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};"],"sourceRoot":""}