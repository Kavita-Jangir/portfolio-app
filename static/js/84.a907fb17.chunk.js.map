{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/smalltalk.js"],"names":["__webpack_require__","r","__webpack_exports__","d","smalltalk","specialChars","keywords","Context","tokenizer","parent","this","next","Token","name","context","eos","State","expectVariable","indentation","userIndentationDelta","prototype","userIndent","indentUnit","stream","state","token","aChar","nextComment","nextString","peek","nextSymbol","eatWhile","nextTemporaries","test","Math","max","current","eat","startState","eatSpace","blankLine","indent","textAfter","cx","i","charAt","unit","languageData","indentOnInput"],"mappings":"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","file":"static/js/84.a907fb17.chunk.js","sourcesContent":["var specialChars = /[+\\-\\/\\\\*~<>=@%|&?!.,:;^]/;\nvar keywords = /true|false|nil|self|super|thisContext/;\nvar Context = function Context(tokenizer, parent) {\n  this.next = tokenizer;\n  this.parent = parent;\n};\nvar Token = function Token(name, context, eos) {\n  this.name = name;\n  this.context = context;\n  this.eos = eos;\n};\nvar State = function State() {\n  this.context = new Context(next, null);\n  this.expectVariable = true;\n  this.indentation = 0;\n  this.userIndentationDelta = 0;\n};\nState.prototype.userIndent = function (indentation, indentUnit) {\n  this.userIndentationDelta = indentation > 0 ? indentation / indentUnit - this.indentation : 0;\n};\nvar next = function next(stream, context, state) {\n  var token = new Token(null, context, false);\n  var aChar = stream.next();\n  if (aChar === '\"') {\n    token = nextComment(stream, new Context(nextComment, context));\n  } else if (aChar === '\\'') {\n    token = nextString(stream, new Context(nextString, context));\n  } else if (aChar === '#') {\n    if (stream.peek() === '\\'') {\n      stream.next();\n      token = nextSymbol(stream, new Context(nextSymbol, context));\n    } else {\n      if (stream.eatWhile(/[^\\s.{}\\[\\]()]/)) token.name = 'string.special';else token.name = 'meta';\n    }\n  } else if (aChar === '$') {\n    if (stream.next() === '<') {\n      stream.eatWhile(/[^\\s>]/);\n      stream.next();\n    }\n    token.name = 'string.special';\n  } else if (aChar === '|' && state.expectVariable) {\n    token.context = new Context(nextTemporaries, context);\n  } else if (/[\\[\\]{}()]/.test(aChar)) {\n    token.name = 'bracket';\n    token.eos = /[\\[{(]/.test(aChar);\n    if (aChar === '[') {\n      state.indentation++;\n    } else if (aChar === ']') {\n      state.indentation = Math.max(0, state.indentation - 1);\n    }\n  } else if (specialChars.test(aChar)) {\n    stream.eatWhile(specialChars);\n    token.name = 'operator';\n    token.eos = aChar !== ';'; // ; cascaded message expression\n  } else if (/\\d/.test(aChar)) {\n    stream.eatWhile(/[\\w\\d]/);\n    token.name = 'number';\n  } else if (/[\\w_]/.test(aChar)) {\n    stream.eatWhile(/[\\w\\d_]/);\n    token.name = state.expectVariable ? keywords.test(stream.current()) ? 'keyword' : 'variable' : null;\n  } else {\n    token.eos = state.expectVariable;\n  }\n  return token;\n};\nvar nextComment = function nextComment(stream, context) {\n  stream.eatWhile(/[^\"]/);\n  return new Token('comment', stream.eat('\"') ? context.parent : context, true);\n};\nvar nextString = function nextString(stream, context) {\n  stream.eatWhile(/[^']/);\n  return new Token('string', stream.eat('\\'') ? context.parent : context, false);\n};\nvar nextSymbol = function nextSymbol(stream, context) {\n  stream.eatWhile(/[^']/);\n  return new Token('string.special', stream.eat('\\'') ? context.parent : context, false);\n};\nvar nextTemporaries = function nextTemporaries(stream, context) {\n  var token = new Token(null, context, false);\n  var aChar = stream.next();\n  if (aChar === '|') {\n    token.context = context.parent;\n    token.eos = true;\n  } else {\n    stream.eatWhile(/[^|]/);\n    token.name = 'variable';\n  }\n  return token;\n};\nexport var smalltalk = {\n  name: \"smalltalk\",\n  startState: function startState() {\n    return new State();\n  },\n  token: function token(stream, state) {\n    state.userIndent(stream.indentation(), stream.indentUnit);\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var token = state.context.next(stream, state.context, state);\n    state.context = token.context;\n    state.expectVariable = token.eos;\n    return token.name;\n  },\n  blankLine: function blankLine(state, indentUnit) {\n    state.userIndent(0, indentUnit);\n  },\n  indent: function indent(state, textAfter, cx) {\n    var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;\n    return (state.indentation + i) * cx.unit;\n  },\n  languageData: {\n    indentOnInput: /^\\s*\\]$/\n  }\n};"],"sourceRoot":""}