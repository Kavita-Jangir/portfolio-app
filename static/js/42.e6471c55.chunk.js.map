{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/elm.js"],"names":["switchState","source","setState","f","__webpack_require__","r","__webpack_exports__","d","elm","lowerRE","upperRE","innerRE","digitRE","hexRE","symbolRE","specialRE","spacesRE","normal","eatWhile","char","next","test","eat","chompMultiComment","nest","eol","match","chompGlsl","chompChar","chompMultiString","chompSingleString","isDef","pos","skipToEnd","skipTo","wellKnownWords","case","of","as","if","then","else","let","in","type","alias","module","where","import","exposing","port","name","startState","copyState","s","token","stream","state","word","current","hasOwnProperty","languageData","commentTokens","line"],"mappings":"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","file":"static/js/42.e6471c55.chunk.js","sourcesContent":["function switchState(source, setState, f) {\n  setState(f);\n  return f(source, setState);\n}\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal() {\n  return function (source, setState) {\n    if (source.eatWhile(spacesRE)) {\n      return null;\n    }\n    var char = source.next();\n    if (specialRE.test(char)) {\n      return char === '{' && source.eat('-') ? switchState(source, setState, chompMultiComment(1)) : char === '[' && source.match('glsl|') ? switchState(source, setState, chompGlsl) : 'builtin';\n    }\n    if (char === '\\'') {\n      return switchState(source, setState, chompChar);\n    }\n    if (char === '\"') {\n      return source.eat('\"') ? source.eat('\"') ? switchState(source, setState, chompMultiString) : 'string' : switchState(source, setState, chompSingleString);\n    }\n    if (upperRE.test(char)) {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n    if (lowerRE.test(char)) {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n    if (digitRE.test(char)) {\n      if (char === '0') {\n        if (source.eat(/[xX]/)) {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      } else {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.')) {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n\n      if (source.eat(/[eE]/)) {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n\n      return \"number\";\n    }\n    if (symbolRE.test(char)) {\n      if (char === '-' && source.eat('-')) {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n    if (char === '_') {\n      return \"keyword\";\n    }\n    return \"error\";\n  };\n}\nfunction chompMultiComment(nest) {\n  if (nest == 0) {\n    return normal();\n  }\n  return function (source, setState) {\n    while (!source.eol()) {\n      var char = source.next();\n      if (char == '{' && source.eat('-')) {\n        ++nest;\n      } else if (char == '-' && source.eat('}')) {\n        --nest;\n        if (nest === 0) {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  };\n}\nfunction chompMultiString(source, setState) {\n  while (!source.eol()) {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"')) {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\nfunction chompSingleString(source, setState) {\n  while (source.skipTo('\\\\\"')) {\n    source.next();\n    source.next();\n  }\n  if (source.skipTo('\"')) {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\nfunction chompChar(source, setState) {\n  while (source.skipTo(\"\\\\'\")) {\n    source.next();\n    source.next();\n  }\n  if (source.skipTo(\"'\")) {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\nfunction chompGlsl(source, setState) {\n  while (!source.eol()) {\n    var char = source.next();\n    if (char === '|' && source.eat(']')) {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n  in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\nexport var elm = {\n  name: \"elm\",\n  startState: function startState() {\n    return {\n      f: normal()\n    };\n  },\n  copyState: function copyState(s) {\n    return {\n      f: s.f\n    };\n  },\n  token: function token(stream, state) {\n    var type = state.f(stream, function (s) {\n      state.f = s;\n    });\n    var word = stream.current();\n    return wellKnownWords.hasOwnProperty(word) ? 'keyword' : type;\n  },\n  languageData: {\n    commentTokens: {\n      line: \"--\"\n    }\n  }\n};"],"sourceRoot":""}