{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/groovy.js"],"names":["words","str","obj","split","i","length","__webpack_require__","r","__webpack_exports__","d","groovy","curPunc","keywords","blockKeywords","standaloneKeywords","atoms","tokenBase","stream","state","ch","next","startString","test","eatWhile","eat","tokenize","push","tokenComment","skipToEnd","expectExpression","lastToken","cur","current","propertyIsEnumerable","quote","tripleQuoted","t","escaped","end","match","tokenBaseUntilBrace","tokenVariableDeref","pop","depth","peek","isBase","maybeEnd","last","newline","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets"],"mappings":"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","file":"static/js/50.c1c86140.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\"abstract as assert boolean break byte case catch char class const continue def default \" + \"do double else enum extends final finally float for goto if implements import in \" + \"instanceof int interface long native new package private protected public return \" + \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" + \"try void volatile while\");\nvar blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\nvar standaloneKeywords = words(\"return break continue\");\nvar atoms = words(\"null true false this\");\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    return startString(ch, stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    if (stream.eat(/eE/)) {\n      stream.eat(/\\+\\-/);\n      stream.eatWhile(/\\d/);\n    }\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize.push(tokenComment);\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (expectExpression(state.lastToken, false)) {\n      return startString(ch, stream, state);\n    }\n  }\n  if (ch == \"-\" && stream.eat(\">\")) {\n    curPunc = \"->\";\n    return null;\n  }\n  if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n    stream.eatWhile(/[+\\-*&%=<>|~]/);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  if (ch == \"@\") {\n    stream.eatWhile(/[\\w\\$_\\.]/);\n    return \"meta\";\n  }\n  if (state.lastToken == \".\") return \"property\";\n  if (stream.eat(\":\")) {\n    curPunc = \"proplabel\";\n    return \"property\";\n  }\n  var cur = stream.current();\n  if (atoms.propertyIsEnumerable(cur)) {\n    return \"atom\";\n  }\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n    return \"keyword\";\n  }\n  return \"variable\";\n}\ntokenBase.isBase = true;\nfunction startString(quote, stream, state) {\n  var tripleQuoted = false;\n  if (quote != \"/\" && stream.eat(quote)) {\n    if (stream.eat(quote)) tripleQuoted = true;else return \"string\";\n  }\n  function t(stream, state) {\n    var escaped = false,\n      next,\n      end = !tripleQuoted;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        if (!tripleQuoted) {\n          break;\n        }\n        if (stream.match(quote + quote)) {\n          end = true;\n          break;\n        }\n      }\n      if (quote == '\"' && next == \"$\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          state.tokenize.push(tokenBaseUntilBrace());\n          return \"string\";\n        } else if (stream.match(/^\\w/, false)) {\n          state.tokenize.push(tokenVariableDeref);\n          return \"string\";\n        }\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize.pop();\n    return \"string\";\n  }\n  state.tokenize.push(t);\n  return t(stream, state);\n}\nfunction tokenBaseUntilBrace() {\n  var depth = 1;\n  function t(stream, state) {\n    if (stream.peek() == \"}\") {\n      depth--;\n      if (depth == 0) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length - 1](stream, state);\n      }\n    } else if (stream.peek() == \"{\") {\n      depth++;\n    }\n    return tokenBase(stream, state);\n  }\n  t.isBase = true;\n  return t;\n}\nfunction tokenVariableDeref(stream, state) {\n  var next = stream.match(/^(\\.|[\\w\\$_]+)/);\n  if (!next) {\n    state.tokenize.pop();\n    return state.tokenize[state.tokenize.length - 1](stream, state);\n  }\n  return next[0] == \".\" ? null : \"variable\";\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize.pop();\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction expectExpression(last, newline) {\n  return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) || last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" || last == \"standalone\" && !newline;\n}\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport var groovy = {\n  name: \"groovy\",\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: [tokenBase],\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true,\n      lastToken: null\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      // Automatic semicolon insertion\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n        popContext(state);\n        ctx = state.context;\n      }\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = state.tokenize[state.tokenize.length - 1](stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n    // Handle indentation for {x -> \\n ... }\n    else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n      popContext(state);\n      state.context.align = false;\n    } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    } else if (curPunc == ctx.type) popContext(state);else if (ctx.type == \"}\" || ctx.type == \"top\" || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    state.lastToken = curPunc || style;\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (!state.tokenize[state.tokenize.length - 1].isBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0),\n      ctx = state.context;\n    if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']\n    }\n  }\n};"],"sourceRoot":""}