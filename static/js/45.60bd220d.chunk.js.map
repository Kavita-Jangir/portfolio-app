{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/forth.js"],"names":["toWordList","words","ret","split","forEach","e","push","name","__webpack_require__","r","__webpack_exports__","d","forth","coreWordList","immediateWordList","searchWordList","wordList","word","i","length","toUpperCase","startState","state","base","token","stream","stt","mat","eatSpace","match","backUp","undefined","skipToEnd","eatWhile","s","eat"],"mappings":"2FAAA,SAAAA,EAAAC,GACA,IAAAC,EAAA,GAMA,OALAD,EAAAE,MAAA,KAAAC,QAAA,SAAAC,GACAH,EAAAI,KAAA,CACAC,KAAAF,MAGAH,EAPAM,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IASA,IAAAC,EAAAb,EAAA,u6BAsCAc,EAAAd,EAAA,oIACA,SAAAe,EAAAC,EAAAC,GACA,IAAAC,EACA,IAAAA,EAAAF,EAAAG,OAAA,EAA+BD,GAAA,EAAQA,IACvC,GAAAF,EAAAE,GAAAX,OAAAU,EAAAG,cACA,OAAAJ,EAAAE,GAKO,IAAAN,EAAA,CACPL,KAAA,QACAc,WAAA,WACA,OACAC,MAAA,GACAC,KAAA,GACAV,eACAC,oBACAE,SAAA,KAGAQ,MAAA,SAAAC,EAAAC,GACA,IAAAC,EACA,GAAAF,EAAAG,WACA,YAEA,QAAAF,EAAAJ,MAAA,CAEA,GAAAG,EAAAI,MAAA,wBAEA,OADAH,EAAAJ,MAAA,eACA,UAGA,GADAK,EAAAF,EAAAI,MAAA,wBAMA,OAJAH,EAAAV,SAAAV,KAAA,CACAC,KAAAoB,EAAA,GAAAP,gBAEAM,EAAAJ,MAAA,eACA,MAGA,GADAK,EAAAF,EAAAI,MAAA,uFAKA,OAHAH,EAAAV,SAAAV,KAAA,CACAC,KAAAoB,EAAA,GAAAP,gBAEA,MAGA,GADAO,EAAAF,EAAAI,MAAA,+BAEA,oBAEK,CAGL,GAAAJ,EAAAI,MAAA,gBAGA,OAFAH,EAAAJ,MAAA,GACAG,EAAAK,OAAA,GACA,UAEA,GAAAL,EAAAI,MAAA,eAEA,OADAH,EAAAJ,MAAA,GACA,UAEA,GAAAG,EAAAI,MAAA,4BACA,gBAMA,OADAF,EAAAF,EAAAI,MAAA,uBAEAE,IAAAhB,EAAAW,EAAAV,SAAAW,EAAA,IACA,WAIA,OAAAA,EAAA,IACAF,EAAAO,YACA,gBAIAD,IAAAhB,EAAAW,EAAAb,aAAAc,EAAA,IACA,eAEAI,IAAAhB,EAAAW,EAAAZ,kBAAAa,EAAA,IACA,UAEA,MAAAA,EAAA,IACAF,EAAAQ,SAAA,SAAAC,GACA,YAAAA,IAEAT,EAAAU,IAAA,KACA,WAIA,OAAAR,EAAA,IACAF,EAAAQ,SAAA,SAAAC,GACA,YAAAA,IAEAT,EAAAU,IAAA,KACA,UAEA,OAAAR,EAAA,WAAAA,EAAA,WAAAA,EAAA,IACAF,EAAAQ,SAAA,SAAAC,GACA,YAAAA,IAEAT,EAAAU,IAAA,KACA,UAIAR,EAAA,eACA,SAMA,YAlDA","file":"static/js/45.60bd220d.chunk.js","sourcesContent":["function toWordList(words) {\n  var ret = [];\n  words.split(' ').forEach(function (e) {\n    ret.push({\n      name: e\n    });\n  });\n  return ret;\n}\nvar coreWordList = toWordList('INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\nvar immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\nfunction searchWordList(wordList, word) {\n  var i;\n  for (i = wordList.length - 1; i >= 0; i--) {\n    if (wordList[i].name === word.toUpperCase()) {\n      return wordList[i];\n    }\n  }\n  return undefined;\n}\nexport var forth = {\n  name: \"forth\",\n  startState: function startState() {\n    return {\n      state: '',\n      base: 10,\n      coreWordList: coreWordList,\n      immediateWordList: immediateWordList,\n      wordList: []\n    };\n  },\n  token: function token(stream, stt) {\n    var mat;\n    if (stream.eatSpace()) {\n      return null;\n    }\n    if (stt.state === '') {\n      // interpretation\n      if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n        stt.state = ' compilation';\n        return 'builtin';\n      }\n      mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        stt.wordList.push({\n          name: mat[2].toUpperCase()\n        });\n        stt.state = ' compilation';\n        return 'def';\n      }\n      mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n      if (mat) {\n        stt.wordList.push({\n          name: mat[2].toUpperCase()\n        });\n        return 'def';\n      }\n      mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n      if (mat) {\n        return 'builtin';\n      }\n    } else {\n      // compilation\n      // ; [\n      if (stream.match(/^(\\;|\\[)(\\s)/)) {\n        stt.state = '';\n        stream.backUp(1);\n        return 'builtin';\n      }\n      if (stream.match(/^(\\;|\\[)($)/)) {\n        stt.state = '';\n        return 'builtin';\n      }\n      if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n        return 'builtin';\n      }\n    }\n\n    // dynamic wordlist\n    mat = stream.match(/^(\\S+)(\\s+|$)/);\n    if (mat) {\n      if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n        return 'variable';\n      }\n\n      // comments\n      if (mat[1] === '\\\\') {\n        stream.skipToEnd();\n        return 'comment';\n      }\n\n      // core words\n      if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n        return 'builtin';\n      }\n      if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n        return 'keyword';\n      }\n      if (mat[1] === '(') {\n        stream.eatWhile(function (s) {\n          return s !== ')';\n        });\n        stream.eat(')');\n        return 'comment';\n      }\n\n      // // strings\n      if (mat[1] === '.(') {\n        stream.eatWhile(function (s) {\n          return s !== ')';\n        });\n        stream.eat(')');\n        return 'string';\n      }\n      if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n        stream.eatWhile(function (s) {\n          return s !== '\"';\n        });\n        stream.eat('\"');\n        return 'string';\n      }\n\n      // numbers\n      if (mat[1] - 0xfffffffff) {\n        return 'number';\n      }\n      // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n      //     return 'number';\n      // }\n\n      return 'atom';\n    }\n  }\n};"],"sourceRoot":""}