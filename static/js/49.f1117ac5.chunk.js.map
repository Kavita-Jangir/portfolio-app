{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/go.js"],"names":["__webpack_require__","r","__webpack_exports__","d","go","curPunc","keywords","break","case","chan","const","continue","default","defer","else","fallthrough","for","func","goto","if","import","interface","map","package","range","return","select","struct","switch","type","var","bool","byte","complex64","complex128","float32","float64","int8","int16","int32","int64","string","uint8","uint16","uint32","uint64","int","uint","uintptr","error","rune","any","comparable","atoms","true","false","iota","nil","append","cap","close","complex","copy","delete","imag","len","make","new","panic","print","println","real","recover","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","test","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","align","prev","this","pushContext","col","context","popContext","t","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,uBAAAE,IAAA,IAuEAC,EAvEAC,EAAA,CACAC,OAAA,EACAC,MAAA,EACAC,MAAA,EACAC,OAAA,EACAC,UAAA,EACAC,SAAA,EACAC,OAAA,EACAC,MAAA,EACAC,aAAA,EACAC,KAAA,EACAC,MAAA,EACAb,IAAA,EACAc,MAAA,EACAC,IAAA,EACAC,QAAA,EACAC,WAAA,EACAC,KAAA,EACAC,SAAA,EACAC,OAAA,EACAC,QAAA,EACAC,QAAA,EACAC,QAAA,EACAC,QAAA,EACAC,MAAA,EACAC,KAAA,EACAC,MAAA,EACAC,MAAA,EACAC,WAAA,EACAC,YAAA,EACAC,SAAA,EACAC,SAAA,EACAC,MAAA,EACAC,OAAA,EACAC,OAAA,EACAC,OAAA,EACAC,QAAA,EACAC,OAAA,EACAC,QAAA,EACAC,QAAA,EACAC,QAAA,EACAC,KAAA,EACAC,MAAA,EACAC,SAAA,EACAC,OAAA,EACAC,MAAA,EACAC,KAAA,EACAC,YAAA,GAEAC,EAAA,CACAC,MAAA,EACAC,OAAA,EACAC,MAAA,EACAC,KAAA,EACAC,QAAA,EACAC,KAAA,EACAC,OAAA,EACAC,SAAA,EACAC,MAAA,EACAC,QAAA,EACAC,MAAA,EACAC,KAAA,EACAC,MAAA,EACAC,KAAA,EACAC,OAAA,EACAC,OAAA,EACAC,SAAA,EACAC,MAAA,EACAC,SAAA,GAEAC,EAAA,oBAEA,SAAAC,EAAAC,EAAAC,GACA,IA0CAC,EA1CAC,EAAAH,EAAAI,OACA,QAAAD,GAAA,KAAAA,GAAA,KAAAA,EAEA,OADAF,EAAAI,UAwCAH,EAxCAC,EAyCA,SAAAH,EAAAC,GAIA,IAHA,IACAG,EADAE,GAAA,EAEAC,GAAA,EACA,OAAAH,EAAAJ,EAAAI,SAAA,CACA,GAAAA,GAAAF,IAAAI,EAAA,CACAC,GAAA,EACA,MAEAD,MAAA,KAAAJ,GAAA,MAAAE,EAGA,OADAG,IAAAD,GAAA,KAAAJ,KAAAD,EAAAI,SAAAN,GACA,WApDAE,EAAAI,SAAAL,EAAAC,GAEA,YAAAO,KAAAL,GAQA,MAPA,KAAAA,EACAH,EAAAS,MAAA,8BACK,KAAAN,EACLH,EAAAS,MAAA,sBAAAT,EAAAS,MAAA,YAEAT,EAAAS,MAAA,uCAEA,SAEA,wBAAoBD,KAAAL,GAEpB,OADAzE,EAAAyE,EACA,KAEA,QAAAA,EAAA,CACA,GAAAH,EAAAU,IAAA,KAEA,OADAT,EAAAI,SAAAM,EACAA,EAAAX,EAAAC,GAEA,GAAAD,EAAAU,IAAA,KAEA,OADAV,EAAAY,YACA,UAGA,GAAAd,EAAAU,KAAAL,GAEA,OADAH,EAAAa,SAAAf,GACA,WAEAE,EAAAa,SAAA,sBACA,IAAAC,EAAAd,EAAAe,UACA,OAAApF,EAAAqF,qBAAAF,IACA,QAAAA,GAAA,WAAAA,IAAApF,EAAA,QACA,WAEAgD,EAAAsC,qBAAAF,GAAA,OACA,WAkBA,SAAAH,EAAAX,EAAAC,GAGA,IAFA,IACAE,EADAc,GAAA,EAEAd,EAAAH,EAAAI,QAAA,CACA,QAAAD,GAAAc,EAAA,CACAhB,EAAAI,SAAAN,EACA,MAEAkB,EAAA,KAAAd,EAEA,gBAEA,SAAAe,EAAAC,EAAAC,EAAAlE,EAAAmE,EAAAC,GACAC,KAAAJ,WACAI,KAAAH,SACAG,KAAArE,OACAqE,KAAAF,QACAE,KAAAD,OAEA,SAAAE,EAAAvB,EAAAwB,EAAAvE,GACA,OAAA+C,EAAAyB,QAAA,IAAAR,EAAAjB,EAAAkB,SAAAM,EAAAvE,EAAA,KAAA+C,EAAAyB,SAEA,SAAAC,EAAA1B,GACA,GAAAA,EAAAyB,QAAAJ,KAAA,CACA,IAAAM,EAAA3B,EAAAyB,QAAAxE,KAEA,MADA,KAAA0E,GAAA,KAAAA,GAAA,KAAAA,IAAqC3B,EAAAkB,SAAAlB,EAAAyB,QAAAP,UACrClB,EAAAyB,QAAAzB,EAAAyB,QAAAJ,MAKO,IAAA7F,EAAA,CACPoG,KAAA,KACAC,WAAA,SAAAC,GACA,OACA1B,SAAA,KACAqB,QAAA,IAAAR,GAAAa,EAAA,YACAZ,SAAA,EACAa,aAAA,IAGAC,MAAA,SAAAjC,EAAAC,GACA,IAAAiC,EAAAjC,EAAAyB,QAOA,GANA1B,EAAAmC,QACA,MAAAD,EAAAb,QAAAa,EAAAb,OAAA,GACApB,EAAAkB,SAAAnB,EAAAoC,cACAnC,EAAA+B,aAAA,EACA,QAAAE,EAAAhF,OAAAgF,EAAAhF,KAAA,MAEA8C,EAAAqC,WAAA,YACA3G,EAAA,KACA,IAAA4G,GAAArC,EAAAI,UAAAN,GAAAC,EAAAC,GACA,iBAAAqC,KACA,MAAAJ,EAAAb,QAAAa,EAAAb,OAAA,GACA,KAAA3F,EAAqB8F,EAAAvB,EAAAD,EAAAoB,SAAA,KAA4C,KAAA1F,EAAA8F,EAAAvB,EAAAD,EAAAoB,SAAA,KAAkE,KAAA1F,EAAA8F,EAAAvB,EAAAD,EAAAoB,SAAA,KAAkE,QAAA1F,EAAAwG,EAAAhF,KAAA,OAA8C,KAAAxB,GAAsB,KAAAwG,EAAAhF,KAAmByE,EAAA1B,GAAqBvE,GAAAwG,EAAAhF,MAAAyE,EAAA1B,GACjTA,EAAA+B,aAAA,EACAM,IAEAC,OAAA,SAAAtC,EAAAuC,EAAAC,GACA,GAAAxC,EAAAI,UAAAN,GAAA,MAAAE,EAAAI,SAAA,YACA,IAAA6B,EAAAjC,EAAAyB,QACAgB,EAAAF,KAAAG,OAAA,GACA,WAAAT,EAAAhF,MAAA,sBAAAsD,KAAAgC,GAEA,OADAvC,EAAAyB,QAAAxE,KAAA,IACAgF,EAAAf,SAEA,IAAAyB,EAAAF,GAAAR,EAAAhF,KACA,OAAAgF,EAAAb,MAAAa,EAAAd,QAAAwB,EAAA,KAAyDV,EAAAf,UAAAyB,EAAA,EAAAH,EAAAI,OAEzDC,aAAA,CACAC,cAAA,+BACAC,cAAA,CACAC,KAAA,KACAC,MAAA,CACAC,KAAA,KACAlE,MAAA","file":"static/js/49.f1117ac5.chunk.js","sourcesContent":["var keywords = {\n  \"break\": true,\n  \"case\": true,\n  \"chan\": true,\n  \"const\": true,\n  \"continue\": true,\n  \"default\": true,\n  \"defer\": true,\n  \"else\": true,\n  \"fallthrough\": true,\n  \"for\": true,\n  \"func\": true,\n  \"go\": true,\n  \"goto\": true,\n  \"if\": true,\n  \"import\": true,\n  \"interface\": true,\n  \"map\": true,\n  \"package\": true,\n  \"range\": true,\n  \"return\": true,\n  \"select\": true,\n  \"struct\": true,\n  \"switch\": true,\n  \"type\": true,\n  \"var\": true,\n  \"bool\": true,\n  \"byte\": true,\n  \"complex64\": true,\n  \"complex128\": true,\n  \"float32\": true,\n  \"float64\": true,\n  \"int8\": true,\n  \"int16\": true,\n  \"int32\": true,\n  \"int64\": true,\n  \"string\": true,\n  \"uint8\": true,\n  \"uint16\": true,\n  \"uint32\": true,\n  \"uint64\": true,\n  \"int\": true,\n  \"uint\": true,\n  \"uintptr\": true,\n  \"error\": true,\n  \"rune\": true,\n  \"any\": true,\n  \"comparable\": true\n};\nvar atoms = {\n  \"true\": true,\n  \"false\": true,\n  \"iota\": true,\n  \"nil\": true,\n  \"append\": true,\n  \"cap\": true,\n  \"close\": true,\n  \"complex\": true,\n  \"copy\": true,\n  \"delete\": true,\n  \"imag\": true,\n  \"len\": true,\n  \"make\": true,\n  \"new\": true,\n  \"panic\": true,\n  \"print\": true,\n  \"println\": true,\n  \"real\": true,\n  \"recover\": true\n};\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n    }\n    if (end || !(escaped || quote == \"`\")) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport var go = {\n  name: \"go\",\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      if (ctx.type == \"case\") ctx.type = \"}\";\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"case\") ctx.type = \"case\";else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);else if (curPunc == ctx.type) popContext(state);\n    state.startOfLine = false;\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context,\n      firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) {\n      state.context.type = \"}\";\n      return ctx.indented;\n    }\n    var closing = firstChar == ctx.type;\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    indentOnInput: /^\\s([{}]|case |default\\s*:)$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    }\n  }\n};"],"sourceRoot":""}