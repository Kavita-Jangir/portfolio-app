{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/textile.js"],"names":["__webpack_require__","r","__webpack_exports__","d","textile","TOKEN_STYLES","addition","attributes","bold","cite","code","definitionList","deletion","div","em","footnote","footCite","header","html","image","italic","link","linkDefinition","list1","list2","list3","notextile","pre","p","quote","span","specialChar","strong","sub","sup","table","tableHeading","handlePhraseModifier","stream","state","ch","eat","togglePhraseModifier","match","tokenStyles","type","phraseModifier","closeRE","openSize","charBefore","pos","string","charAt","charAfter","peek","test","RegExp","source","mode","Modes","disabled","textileDisabled","styles","layoutType","push","concat","i","arguments","length","activeStyles","join","REs","cache","single","bc","bq","definitionListEnd","drawTable","foot","list","para","tableCellAttributes","tableText","text","align","selector","lang","pad","css","createRe","name","makeRe","RE","choiceRe","pattern","arg","parts","unshift","apply","newLayout","spanningLayout","blockType","newMode","parseInt","next","layoutLength","listDepth","listMod","skipToEnd","tableCell","startState","token","sol","startNewLine","blankLine","key","hasOwnProperty"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,IAAAC,EAAA,CACAC,SAAA,WACAC,WAAA,eACAC,KAAA,SACAC,KAAA,UACAC,KAAA,YACAC,eAAA,OACAC,SAAA,UACAC,IAAA,cACAC,GAAA,WACAC,SAAA,WACAC,SAAA,YACAC,OAAA,UACAC,KAAA,UACAC,MAAA,OACAC,OAAA,WACAC,KAAA,OACAC,eAAA,OACAC,MAAA,OACAC,MAAA,eACAC,MAAA,OACAC,UAAA,iBACAC,IAAA,WACAC,EAAA,UACAC,MAAA,UACAC,KAAA,QACAC,YAAA,YACAC,OAAA,SACAC,IAAA,kBACAC,IAAA,kBACAC,MAAA,uBACAC,aAAA,YAOA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,SAAAA,EACA,OAAAF,EAAAG,IAAA,KAAAC,EAAAJ,EAAAC,EAAA,iBAAuFG,EAAAJ,EAAAC,EAAA,YAEvF,SAAAC,EACA,OAAAF,EAAAG,IAAA,KACAC,EAAAJ,EAAAC,EAAA,iBAEAG,EAAAJ,EAAAC,EAAA,iBAEA,SAAAC,EAEA,OADAF,EAAAK,MAAA,WAAAJ,EAAAvB,UAAA,GACA4B,EAAAL,GAEA,SAAAC,GACAF,EAAAK,MAAA,eACA,OAAAtC,EAAA0B,YAEA,SAAAS,GAAAF,EAAAK,MAAA,iCAAAtC,EAAAa,KACA,SAAAsB,GAAAF,EAAAG,IAAA,YAAAC,EAAAJ,EAAAC,EAAA,iBACA,SAAAC,GAAAF,EAAAG,IAAA,YAAAC,EAAAJ,EAAAC,EAAA,oBACA,SAAAC,IAAAF,EAAAG,IAAA,YAAAC,EAAAJ,EAAAC,EAAA,kBACA,SAAAC,EAAA,OAAAE,EAAAJ,EAAAC,EAAA,mBACA,SAAAC,EAAA,OAAAE,EAAAJ,EAAAC,EAAA,aACA,SAAAC,EAAA,OAAAE,EAAAJ,EAAAC,EAAA,cACA,SAAAC,EAAA,OAAAE,EAAAJ,EAAAC,EAAA,cACA,SAAAC,EAAA,OAAAE,EAAAJ,EAAAC,EAAA,cACA,SAAAC,EAAA,CACA,IAAAK,EAAAH,EAAAJ,EAAAC,EAAA,8BAEA,OADAD,EAAAK,MAAA,SACAE,EAEA,OAAAD,EAAAL,GAEA,SAAAG,EAAAJ,EAAAC,EAAAO,EAAAC,EAAAC,GACA,IAAAC,EAAAX,EAAAY,IAAAF,EAAAV,EAAAa,OAAAC,OAAAd,EAAAY,IAAAF,EAAA,QACAK,EAAAf,EAAAgB,OACA,GAAAf,EAAAO,IACA,KAAAO,GAAA,KAAAE,KAAAF,KAAAJ,GAAA,KAAAM,KAAAN,GAAA,CACA,IAAAJ,EAAAD,EAAAL,GAEA,OADAA,EAAAO,IAAA,EACAD,SAEGI,GAAA,KAAAM,KAAAN,KAAAI,GAAA,KAAAE,KAAAF,IAAAf,EAAAK,MAAA,IAAAa,OAAA,SAAAT,EAAAU,OAAA,mBACHlB,EAAAO,IAAA,EACAP,EAAAmB,KAAAC,EAAApD,YAEA,OAAAqC,EAAAL,GAGA,SAAAK,EAAAL,GACA,IAAAqB,EAAAC,EAAAtB,GACA,GAAAqB,EAAA,OAAAA,EACA,IAAAE,EAAA,GAIA,OAHAvB,EAAAwB,YAAAD,EAAAE,KAAA3D,EAAAkC,EAAAwB,aACAD,IAAAG,OAgBA,SAAA1B,GAEA,IADA,IAAAuB,EAAA,GACAI,EAAA,EAAiBA,EAAAC,UAAAC,SAAsBF,EACvC3B,EAAA4B,UAAAD,KAAAJ,EAAAE,KAAA3D,EAAA8D,UAAAD,KAEA,OAAAJ,EArBAO,CAAA9B,EAAA,wIACA,WAAAA,EAAAwB,YAAAD,EAAAE,KAAA3D,EAAAY,OAAA,IAAAsB,EAAAtB,QACA6C,EAAAM,OAAAN,EAAAQ,KAAA,UAEA,SAAAT,EAAAtB,GACA,IAAAM,EAAAN,EAAAwB,WACA,OAAAlB,GACA,gBACA,WACA,UACA,OAAAxC,EAAAwC,GACA,QACA,OAAAN,EAAAb,UAAArB,EAAAqB,WAAAmB,EAAA,IAAAxC,EAAAwC,GAAA,IACA,MAoBA,IAAA0B,EAAA,CACAC,MAAA,GACAC,OAAA,CACAC,GAAA,KACAC,GAAA,KACAhE,eAAA,WACAiE,kBAAA,WACA/D,IAAA,MACAgE,UAAA,SACAC,KAAA,QACA7D,OAAA,SACAC,KAAA,8CACAG,KAAA,YACAC,eAAA,kBACAyD,KAAA,aACArD,UAAA,YACAsD,KAAA,IACArD,IAAA,MACAQ,MAAA,QACA8C,oBAAA,YACA7C,aAAA,QACA8C,UAAA,0BACAC,KAAA,6BAEA5E,WAAA,CACA6E,MAAA,eACAC,SAAA,kBACAC,KAAA,eACAC,IAAA,mBACAC,IAAA,cAEAC,SAAA,SAAAC,GACA,OAAAA,GACA,gBACA,OAAAnB,EAAAoB,OAAA,IAAApB,EAAAE,OAAAI,UAAA,KACA,WACA,OAAAN,EAAAoB,OAAA,IAAApB,EAAAE,OAAAvD,KAAA,MAAAqD,EAAAE,OAAAvD,KAAA,UACA,qBACA,OAAAqD,EAAAoB,OAAA,IAAApB,EAAAE,OAAAnD,eAAA,KACA,iBACA,OAAAiD,EAAAoB,OAAA,IAAApB,EAAAE,OAAAM,KAAAa,EAAA,0BACA,0BACA,OAAArB,EAAAoB,OAAA,IAAApB,EAAAsB,SAAAtB,EAAAE,OAAAQ,oBAAAW,EAAA,0BACA,WACA,OAAArB,EAAAoB,OAAA,IAAAC,EAAA,aACA,iBACA,OAAArB,EAAAoB,OAAA,IAAAC,EAAA,YAAAA,EAAA,wCACA,iBACA,OAAArB,EAAAoB,OAAA,IAAAC,EAAA,sBACA,eACA,OAAArB,EAAAsB,SAAAtB,EAAAE,OAAA5D,IAAA0D,EAAAE,OAAAK,KAAAP,EAAAE,OAAAxD,OAAAsD,EAAAE,OAAAC,GAAAH,EAAAE,OAAAE,GAAAJ,EAAAE,OAAA/C,UAAA6C,EAAAE,OAAA9C,IAAA4C,EAAAE,OAAAtC,MAAAoC,EAAAE,OAAAO,MACA,oBACA,OAAAT,EAAAsB,SAAAtB,EAAAhE,WAAA8E,SAAAd,EAAAhE,WAAAiF,IAAAjB,EAAAhE,WAAA+E,KAAAf,EAAAhE,WAAA6E,MAAAb,EAAAhE,WAAAgF,KACA,QACA,OAAAhB,EAAAoB,OAAA,IAAApB,EAAAE,OAAAiB,MAGAC,OAAA,WAEA,IADA,IAAAG,EAAA,GACA5B,EAAA,EAAmBA,EAAAC,UAAAC,SAAsBF,EAAA,CACzC,IAAA6B,EAAA5B,UAAAD,GACA4B,GAAA,kBAAAC,MAAAtC,OAEA,WAAAD,OAAAsC,IAEAD,SAAA,WAEA,IADA,IAAAG,EAAA,CAAA7B,UAAA,IACAD,EAAA,EAAmBA,EAAAC,UAAAC,SAAsBF,EACzC8B,EAAA,EAAA9B,EAAA,OACA8B,EAAA,EAAA9B,GAAAC,UAAAD,GAIA,OAFA8B,EAAAC,QAAA,OACAD,EAAAhC,KAAA,KACAO,EAAAoB,OAAAO,MAAA,KAAAF,KAGA,SAAAJ,EAAAF,GACA,OAAAnB,EAAAC,MAAAkB,KAAAnB,EAAAC,MAAAkB,GAAAnB,EAAAkB,SAAAC,IAEA,IAAA/B,EAAA,CACAwC,UAAA,SAAA7D,EAAAC,GACA,OAAAD,EAAAK,MAAAiD,EAAA,mBACArD,EAAA6D,gBAAA,GACA7D,EAAAmB,KAAAC,EAAA0C,WAAA/D,EAAAC,KAGAsB,EAAAtB,KACAD,EAAAK,MAAAiD,EAAA,kBAAAU,EAAA3C,EAAAoB,KAAsEzC,EAAAK,MAAAiD,EAAA,iBAAAU,EAAA3C,EAAAxB,MAAqEG,EAAAK,MAAAiD,EAAA,sBAAAU,EAAA3C,EAAArC,eAAmFgB,EAAAK,MAAAiD,EAAA,mBAAAU,EAAA3C,EAAAhD,eAA4E2B,EAAAK,MAAAiD,EAAA,cAAAU,EAAA3C,EAAAzC,QAE1SqB,EAAAmB,KAAA4C,GAAA3C,EAAAwB,MAAA7C,EAAAC,IAJA,IAAA+D,GAMAD,UAAA,SAAA/D,EAAAC,GACA,IAAAI,EAAAE,EAEA,OADAN,EAAAwB,WAAA,MACApB,EAAAL,EAAAK,MAAAiD,EAAA,YACAjD,GADAE,EAAAF,EAAA,IACAA,MAAAiD,EAAA,aACArD,EAAAwB,WAAA,SACAxB,EAAAtB,OAAAsF,SAAA5D,EAAA,QACKE,EAAAF,MAAAiD,EAAA,OACLrD,EAAAwB,WAAA,QACKlB,EAAAF,MAAAiD,EAAA,OACLrD,EAAAwB,WAAA,OACKlB,EAAAF,MAAAiD,EAAA,SACLrD,EAAAwB,WAAA,WACKlB,EAAAF,MAAAiD,EAAA,cACLrD,EAAAwB,WAAA,YACKlB,EAAAF,MAAAiD,EAAA,QACLrD,EAAAwB,WAAA,MACKlB,EAAAF,MAAAiD,EAAA,QACLrD,EAAAwB,WAAA,MACKlB,EAAAF,MAAAiD,EAAA,YACLrD,EAAAwB,WAAA,SAEAxB,EAAAmB,KAAAC,EAAApD,WACAqC,EAAAL,KApB0DA,EAAAmB,KAAAC,EAAAwB,MAAA7C,EAAAC,IAsB1D4C,KAAA,SAAA7C,EAAAC,GACA,GAAAD,EAAAK,MAAAiD,EAAA,gBAAAhD,EAAAL,GACA,IAAAC,EAAAF,EAAAkE,OACA,YAAAhE,GAAAD,EAAAmB,KAAAC,EAAAtC,MAAAiB,EAAAC,GACAF,EAAAC,EAAAC,EAAAC,IAEAjC,WAAA,SAAA+B,EAAAC,GAEA,OADAA,EAAAmB,KAAAC,EAAA8C,aACAnE,EAAAK,MAAAiD,EAAA,eAAAvF,EAAAE,WAAuEqC,EAAAL,IAEvEkE,aAAA,SAAAnE,EAAAC,GAGA,OAFAD,EAAAG,IAAA,MAAAH,EAAAG,IAAA,OAAAF,EAAA6D,gBAAA,GACA7D,EAAAmB,KAAAC,EAAAwB,KACAvC,EAAAL,IAEAwC,KAAA,SAAAzC,EAAAC,GACA,IAAAI,EAAAL,EAAAK,MAAAiD,EAAA,SACArD,EAAAmE,UAAA/D,EAAA,GAAAyB,OACA,IAAAuC,GAAApE,EAAAmE,UAAA,KAGA,OAF6CnE,EAAAwB,WAA7C4C,EAA6C,IAAAA,EAAA,QAAmD,QAAhG,QACApE,EAAAmB,KAAAC,EAAApD,WACAqC,EAAAL,IAEAlB,KAAA,SAAAiB,EAAAC,GAEA,OADAA,EAAAmB,KAAAC,EAAAwB,KACA7C,EAAAK,MAAAiD,EAAA,UACAtD,EAAAK,MAAA,OACAtC,EAAAgB,MAEAuB,EAAAL,IAEAjB,eAAA,SAAAgB,GAEA,OADAA,EAAAsE,YACAvG,EAAAiB,gBAEAX,eAAA,SAAA2B,EAAAC,GAIA,OAHAD,EAAAK,MAAAiD,EAAA,mBACArD,EAAAwB,WAAA,iBACAzB,EAAAK,MAAA,QAAAJ,EAAA6D,gBAAA,EAA0D7D,EAAAmB,KAAAC,EAAApD,WAC1DqC,EAAAL,IAEArB,KAAA,SAAAoB,GAEA,OADAA,EAAAsE,YACAvG,EAAAa,MAEAiB,MAAA,SAAAG,EAAAC,GAEA,OADAA,EAAAwB,WAAA,SACAxB,EAAAmB,KAAAC,EAAAkD,WAAAvE,EAAAC,IAEAsE,UAAA,SAAAvE,EAAAC,GAGA,OAFAD,EAAAK,MAAAiD,EAAA,iBAAArD,EAAAH,cAAA,EAAoEE,EAAAG,IAAA,KACpEF,EAAAmB,KAAAC,EAAAsB,oBACArC,EAAAL,IAEA0C,oBAAA,SAAA3C,EAAAC,GAEA,OADAA,EAAAmB,KAAAC,EAAAuB,UACA5C,EAAAK,MAAAiD,EAAA,wBAAAvF,EAAAE,WAAgFqC,EAAAL,IAEhF2C,UAAA,SAAA5C,EAAAC,GACA,OAAAD,EAAAK,MAAAiD,EAAA,cAAAhD,EAAAL,GACA,MAAAD,EAAAgB,QAEAf,EAAAmB,KAAAC,EAAAkD,UACAjE,EAAAL,IAEAF,EAAAC,EAAAC,EAAAD,EAAAkE,UAGOpG,EAAA,CACPsF,KAAA,UACAoB,WAAA,WACA,OACApD,KAAAC,EAAAwC,YAGAY,MAAA,SAAAzE,EAAAC,GAEA,OADAD,EAAA0E,OA7RA,SAAA1E,EAAAC,GACAA,EAAAmB,KAAAC,EAAAwC,UACA5D,EAAAH,cAAA,EACA,mBAAAG,EAAAwB,YAAAxB,EAAA6D,gBAAA9D,EAAAK,MAAAiD,EAAA,2BAAArD,EAAA6D,gBAAA,GA0RAa,CAAA3E,EAAAC,GACAA,EAAAmB,KAAApB,EAAAC,IAEA2E,UA7MA,SAAA3E,GACA,IAAA6D,EAAA7D,EAAA6D,eACAvD,EAAAN,EAAAwB,WACA,QAAAoD,KAAA5E,IAAA6E,eAAAD,WAAA5E,EAAA4E,GACA5E,EAAAmB,KAAAC,EAAAwC,UACAC,IACA7D,EAAAwB,WAAAlB,EACAN,EAAA6D,gBAAA","file":"static/js/92.32b55a17.chunk.js","sourcesContent":["var TOKEN_STYLES = {\n  addition: \"inserted\",\n  attributes: \"propertyName\",\n  bold: \"strong\",\n  cite: \"keyword\",\n  code: \"monospace\",\n  definitionList: \"list\",\n  deletion: \"deleted\",\n  div: \"punctuation\",\n  em: \"emphasis\",\n  footnote: \"variable\",\n  footCite: \"qualifier\",\n  header: \"heading\",\n  html: \"comment\",\n  image: \"atom\",\n  italic: \"emphasis\",\n  link: \"link\",\n  linkDefinition: \"link\",\n  list1: \"list\",\n  list2: \"list.special\",\n  list3: \"list\",\n  notextile: \"string.special\",\n  pre: \"operator\",\n  p: \"content\",\n  quote: \"bracket\",\n  span: \"quote\",\n  specialChar: \"character\",\n  strong: \"strong\",\n  sub: \"content.special\",\n  sup: \"content.special\",\n  table: \"variableName.special\",\n  tableHeading: \"operator\"\n};\nfunction startNewLine(stream, state) {\n  state.mode = Modes.newLayout;\n  state.tableHeading = false;\n  if (state.layoutType === \"definitionList\" && state.spanningLayout && stream.match(RE(\"definitionListEnd\"), false)) state.spanningLayout = false;\n}\nfunction handlePhraseModifier(stream, state, ch) {\n  if (ch === \"_\") {\n    if (stream.eat(\"_\")) return togglePhraseModifier(stream, state, \"italic\", /__/, 2);else return togglePhraseModifier(stream, state, \"em\", /_/, 1);\n  }\n  if (ch === \"*\") {\n    if (stream.eat(\"*\")) {\n      return togglePhraseModifier(stream, state, \"bold\", /\\*\\*/, 2);\n    }\n    return togglePhraseModifier(stream, state, \"strong\", /\\*/, 1);\n  }\n  if (ch === \"[\") {\n    if (stream.match(/\\d+\\]/)) state.footCite = true;\n    return tokenStyles(state);\n  }\n  if (ch === \"(\") {\n    var spec = stream.match(/^(r|tm|c)\\)/);\n    if (spec) return TOKEN_STYLES.specialChar;\n  }\n  if (ch === \"<\" && stream.match(/(\\w+)[^>]+>[^<]+<\\/\\1>/)) return TOKEN_STYLES.html;\n  if (ch === \"?\" && stream.eat(\"?\")) return togglePhraseModifier(stream, state, \"cite\", /\\?\\?/, 2);\n  if (ch === \"=\" && stream.eat(\"=\")) return togglePhraseModifier(stream, state, \"notextile\", /==/, 2);\n  if (ch === \"-\" && !stream.eat(\"-\")) return togglePhraseModifier(stream, state, \"deletion\", /-/, 1);\n  if (ch === \"+\") return togglePhraseModifier(stream, state, \"addition\", /\\+/, 1);\n  if (ch === \"~\") return togglePhraseModifier(stream, state, \"sub\", /~/, 1);\n  if (ch === \"^\") return togglePhraseModifier(stream, state, \"sup\", /\\^/, 1);\n  if (ch === \"%\") return togglePhraseModifier(stream, state, \"span\", /%/, 1);\n  if (ch === \"@\") return togglePhraseModifier(stream, state, \"code\", /@/, 1);\n  if (ch === \"!\") {\n    var type = togglePhraseModifier(stream, state, \"image\", /(?:\\([^\\)]+\\))?!/, 1);\n    stream.match(/^:\\S+/); // optional Url portion\n    return type;\n  }\n  return tokenStyles(state);\n}\nfunction togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {\n  var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;\n  var charAfter = stream.peek();\n  if (state[phraseModifier]) {\n    if ((!charAfter || /\\W/.test(charAfter)) && charBefore && /\\S/.test(charBefore)) {\n      var type = tokenStyles(state);\n      state[phraseModifier] = false;\n      return type;\n    }\n  } else if ((!charBefore || /\\W/.test(charBefore)) && charAfter && /\\S/.test(charAfter) && stream.match(new RegExp(\"^.*\\\\S\" + closeRE.source + \"(?:\\\\W|$)\"), false)) {\n    state[phraseModifier] = true;\n    state.mode = Modes.attributes;\n  }\n  return tokenStyles(state);\n}\n;\nfunction tokenStyles(state) {\n  var disabled = textileDisabled(state);\n  if (disabled) return disabled;\n  var styles = [];\n  if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);\n  styles = styles.concat(activeStyles(state, \"addition\", \"bold\", \"cite\", \"code\", \"deletion\", \"em\", \"footCite\", \"image\", \"italic\", \"link\", \"span\", \"strong\", \"sub\", \"sup\", \"table\", \"tableHeading\"));\n  if (state.layoutType === \"header\") styles.push(TOKEN_STYLES.header + \"-\" + state.header);\n  return styles.length ? styles.join(\" \") : null;\n}\nfunction textileDisabled(state) {\n  var type = state.layoutType;\n  switch (type) {\n    case \"notextile\":\n    case \"code\":\n    case \"pre\":\n      return TOKEN_STYLES[type];\n    default:\n      if (state.notextile) return TOKEN_STYLES.notextile + (type ? \" \" + TOKEN_STYLES[type] : \"\");\n      return null;\n  }\n}\nfunction activeStyles(state) {\n  var styles = [];\n  for (var i = 1; i < arguments.length; ++i) {\n    if (state[arguments[i]]) styles.push(TOKEN_STYLES[arguments[i]]);\n  }\n  return styles;\n}\nfunction blankLine(state) {\n  var spanningLayout = state.spanningLayout,\n    type = state.layoutType;\n  for (var key in state) if (state.hasOwnProperty(key)) delete state[key];\n  state.mode = Modes.newLayout;\n  if (spanningLayout) {\n    state.layoutType = type;\n    state.spanningLayout = true;\n  }\n}\nvar REs = {\n  cache: {},\n  single: {\n    bc: \"bc\",\n    bq: \"bq\",\n    definitionList: /- .*?:=+/,\n    definitionListEnd: /.*=:\\s*$/,\n    div: \"div\",\n    drawTable: /\\|.*\\|/,\n    foot: /fn\\d+/,\n    header: /h[1-6]/,\n    html: /\\s*<(?:\\/)?(\\w+)(?:[^>]+)?>(?:[^<]+<\\/\\1>)?/,\n    link: /[^\"]+\":\\S/,\n    linkDefinition: /\\[[^\\s\\]]+\\]\\S+/,\n    list: /(?:#+|\\*+)/,\n    notextile: \"notextile\",\n    para: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tableCellAttributes: /[\\/\\\\]\\d+/,\n    tableHeading: /\\|_\\./,\n    tableText: /[^\"_\\*\\[\\(\\?\\+~\\^%@|-]+/,\n    text: /[^!\"_=\\*\\[\\(<\\?\\+~\\^%@-]+/\n  },\n  attributes: {\n    align: /(?:<>|<|>|=)/,\n    selector: /\\([^\\(][^\\)]+\\)/,\n    lang: /\\[[^\\[\\]]+\\]/,\n    pad: /(?:\\(+|\\)+){1,2}/,\n    css: /\\{[^\\}]+\\}/\n  },\n  createRe: function createRe(name) {\n    switch (name) {\n      case \"drawTable\":\n        return REs.makeRe(\"^\", REs.single.drawTable, \"$\");\n      case \"html\":\n        return REs.makeRe(\"^\", REs.single.html, \"(?:\", REs.single.html, \")*\", \"$\");\n      case \"linkDefinition\":\n        return REs.makeRe(\"^\", REs.single.linkDefinition, \"$\");\n      case \"listLayout\":\n        return REs.makeRe(\"^\", REs.single.list, RE(\"allAttributes\"), \"*\\\\s+\");\n      case \"tableCellAttributes\":\n        return REs.makeRe(\"^\", REs.choiceRe(REs.single.tableCellAttributes, RE(\"allAttributes\")), \"+\\\\.\");\n      case \"type\":\n        return REs.makeRe(\"^\", RE(\"allTypes\"));\n      case \"typeLayout\":\n        return REs.makeRe(\"^\", RE(\"allTypes\"), RE(\"allAttributes\"), \"*\\\\.\\\\.?\", \"(\\\\s+|$)\");\n      case \"attributes\":\n        return REs.makeRe(\"^\", RE(\"allAttributes\"), \"+\");\n      case \"allTypes\":\n        return REs.choiceRe(REs.single.div, REs.single.foot, REs.single.header, REs.single.bc, REs.single.bq, REs.single.notextile, REs.single.pre, REs.single.table, REs.single.para);\n      case \"allAttributes\":\n        return REs.choiceRe(REs.attributes.selector, REs.attributes.css, REs.attributes.lang, REs.attributes.align, REs.attributes.pad);\n      default:\n        return REs.makeRe(\"^\", REs.single[name]);\n    }\n  },\n  makeRe: function makeRe() {\n    var pattern = \"\";\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      pattern += typeof arg === \"string\" ? arg : arg.source;\n    }\n    return new RegExp(pattern);\n  },\n  choiceRe: function choiceRe() {\n    var parts = [arguments[0]];\n    for (var i = 1; i < arguments.length; ++i) {\n      parts[i * 2 - 1] = \"|\";\n      parts[i * 2] = arguments[i];\n    }\n    parts.unshift(\"(?:\");\n    parts.push(\")\");\n    return REs.makeRe.apply(null, parts);\n  }\n};\nfunction RE(name) {\n  return REs.cache[name] || (REs.cache[name] = REs.createRe(name));\n}\nvar Modes = {\n  newLayout: function newLayout(stream, state) {\n    if (stream.match(RE(\"typeLayout\"), false)) {\n      state.spanningLayout = false;\n      return (state.mode = Modes.blockType)(stream, state);\n    }\n    var newMode;\n    if (!textileDisabled(state)) {\n      if (stream.match(RE(\"listLayout\"), false)) newMode = Modes.list;else if (stream.match(RE(\"drawTable\"), false)) newMode = Modes.table;else if (stream.match(RE(\"linkDefinition\"), false)) newMode = Modes.linkDefinition;else if (stream.match(RE(\"definitionList\"))) newMode = Modes.definitionList;else if (stream.match(RE(\"html\"), false)) newMode = Modes.html;\n    }\n    return (state.mode = newMode || Modes.text)(stream, state);\n  },\n  blockType: function blockType(stream, state) {\n    var match, type;\n    state.layoutType = null;\n    if (match = stream.match(RE(\"type\"))) type = match[0];else return (state.mode = Modes.text)(stream, state);\n    if (match = type.match(RE(\"header\"))) {\n      state.layoutType = \"header\";\n      state.header = parseInt(match[0][1]);\n    } else if (type.match(RE(\"bq\"))) {\n      state.layoutType = \"quote\";\n    } else if (type.match(RE(\"bc\"))) {\n      state.layoutType = \"code\";\n    } else if (type.match(RE(\"foot\"))) {\n      state.layoutType = \"footnote\";\n    } else if (type.match(RE(\"notextile\"))) {\n      state.layoutType = \"notextile\";\n    } else if (type.match(RE(\"pre\"))) {\n      state.layoutType = \"pre\";\n    } else if (type.match(RE(\"div\"))) {\n      state.layoutType = \"div\";\n    } else if (type.match(RE(\"table\"))) {\n      state.layoutType = \"table\";\n    }\n    state.mode = Modes.attributes;\n    return tokenStyles(state);\n  },\n  text: function text(stream, state) {\n    if (stream.match(RE(\"text\"))) return tokenStyles(state);\n    var ch = stream.next();\n    if (ch === '\"') return (state.mode = Modes.link)(stream, state);\n    return handlePhraseModifier(stream, state, ch);\n  },\n  attributes: function attributes(stream, state) {\n    state.mode = Modes.layoutLength;\n    if (stream.match(RE(\"attributes\"))) return TOKEN_STYLES.attributes;else return tokenStyles(state);\n  },\n  layoutLength: function layoutLength(stream, state) {\n    if (stream.eat(\".\") && stream.eat(\".\")) state.spanningLayout = true;\n    state.mode = Modes.text;\n    return tokenStyles(state);\n  },\n  list: function list(stream, state) {\n    var match = stream.match(RE(\"list\"));\n    state.listDepth = match[0].length;\n    var listMod = (state.listDepth - 1) % 3;\n    if (!listMod) state.layoutType = \"list1\";else if (listMod === 1) state.layoutType = \"list2\";else state.layoutType = \"list3\";\n    state.mode = Modes.attributes;\n    return tokenStyles(state);\n  },\n  link: function link(stream, state) {\n    state.mode = Modes.text;\n    if (stream.match(RE(\"link\"))) {\n      stream.match(/\\S+/);\n      return TOKEN_STYLES.link;\n    }\n    return tokenStyles(state);\n  },\n  linkDefinition: function linkDefinition(stream) {\n    stream.skipToEnd();\n    return TOKEN_STYLES.linkDefinition;\n  },\n  definitionList: function definitionList(stream, state) {\n    stream.match(RE(\"definitionList\"));\n    state.layoutType = \"definitionList\";\n    if (stream.match(/\\s*$/)) state.spanningLayout = true;else state.mode = Modes.attributes;\n    return tokenStyles(state);\n  },\n  html: function html(stream) {\n    stream.skipToEnd();\n    return TOKEN_STYLES.html;\n  },\n  table: function table(stream, state) {\n    state.layoutType = \"table\";\n    return (state.mode = Modes.tableCell)(stream, state);\n  },\n  tableCell: function tableCell(stream, state) {\n    if (stream.match(RE(\"tableHeading\"))) state.tableHeading = true;else stream.eat(\"|\");\n    state.mode = Modes.tableCellAttributes;\n    return tokenStyles(state);\n  },\n  tableCellAttributes: function tableCellAttributes(stream, state) {\n    state.mode = Modes.tableText;\n    if (stream.match(RE(\"tableCellAttributes\"))) return TOKEN_STYLES.attributes;else return tokenStyles(state);\n  },\n  tableText: function tableText(stream, state) {\n    if (stream.match(RE(\"tableText\"))) return tokenStyles(state);\n    if (stream.peek() === \"|\") {\n      // end of cell\n      state.mode = Modes.tableCell;\n      return tokenStyles(state);\n    }\n    return handlePhraseModifier(stream, state, stream.next());\n  }\n};\nexport var textile = {\n  name: \"textile\",\n  startState: function startState() {\n    return {\n      mode: Modes.newLayout\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) startNewLine(stream, state);\n    return state.mode(stream, state);\n  },\n  blankLine: blankLine\n};"],"sourceRoot":""}