{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/vhdl.js"],"names":["words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","__webpack_require__","r","__webpack_exports__","d","vhdl","curPunc","atoms","hooks","`","$","multiLineStrings","keywords","blockKeywords","isOperatorChar","tokenBase","state","quote","ch","next","result","tokenize","escaped","end","tokenString","test","eat","skipToEnd","cur","current","propertyIsEnumerable","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","closing","unit","languageData","indentOnInput","commentTokens","line"],"mappings":"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","file":"static/js/103.bae34733.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\",\");\n  for (var i = 0; i < words.length; ++i) {\n    var allCaps = words[i].toUpperCase();\n    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    obj[words[i]] = true;\n    obj[allCaps] = true;\n    obj[firstCap] = true;\n  }\n  return obj;\n}\nfunction metaHook(stream) {\n  stream.eatWhile(/[\\w\\$_]/);\n  return \"meta\";\n}\nvar atoms = words(\"null\"),\n  hooks = {\n    \"`\": metaHook,\n    \"$\": metaHook\n  },\n  multiLineStrings = false;\nvar keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" + \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" + \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" + \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" + \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" + \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" + \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\nvar blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\nvar isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n  if (ch == '\"') {\n    state.tokenize = tokenString2(ch);\n    return state.tokenize(stream, state);\n  }\n  if (ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/[\\d']/.test(ch)) {\n    stream.eatWhile(/[\\w\\.']/);\n    return \"number\";\n  }\n  if (ch == \"-\") {\n    if (stream.eat(\"-\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"--\";\n    }\n    if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenString2(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"--\";\n    }\n    if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n    return \"string.special\";\n  };\n}\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\nexport var vhdl = {\n  name: \"vhdl\",\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    } else if (curPunc == ctx.type) popContext(state);else if (ctx.type == \"}\" || ctx.type == \"top\" || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n    var firstChar = textAfter && textAfter.charAt(0),\n      ctx = state.context,\n      closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"--\"\n    }\n  }\n};"],"sourceRoot":""}