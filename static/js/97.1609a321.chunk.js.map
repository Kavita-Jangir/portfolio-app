{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js"],"names":["words","str","obj","split","i","length","__webpack_require__","r","__webpack_exports__","d","ttcnCfg","curPunc","parserConfig","name","keywords","fileNCtrlMaskOptions","externalCommands","multiLineStrings","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterNext","peek","toLowerCase","test","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"mappings":"2FAAA,SAAAA,EAAAC,GAGA,IAFA,IAAAC,EAAA,GACAF,EAAAC,EAAAE,MAAA,KACAC,EAAA,EAAiBA,EAAAJ,EAAAK,SAAkBD,EAAAF,EAAAF,EAAAI,KAAA,EACnC,OAAAF,EAJAI,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAMA,IAaAC,EAbAC,EAAA,CACAC,KAAA,WACAC,SAAAd,EAAA,4UACAe,qBAAAf,EAAA,g9CACAgB,iBAAAhB,EAAA,6DACAiB,kBAAA,GAEAH,EAAAF,EAAAE,SACAC,EAAAH,EAAAG,qBACAC,EAAAJ,EAAAI,iBACAC,EAAAL,EAAAK,iBACAC,GAAA,IAAAN,EAAAM,iBACAC,EAAA,OAEA,SAAAC,EAAAC,EAAAC,GACA,IAgCAC,EAhCAC,EAAAH,EAAAI,OACA,QAAAD,GAAA,KAAAA,EAEA,OADAF,EAAAI,UA8BAH,EA9BAC,EA+BA,SAAAH,EAAAC,GAIA,IAHA,IACAG,EADAE,GAAA,EAEAC,GAAA,EACA,OAAAH,EAAAJ,EAAAI,SAAA,CACA,GAAAA,GAAAF,IAAAI,EAAA,CACA,IAAAE,EAAAR,EAAAS,OAEAD,IAEA,MADAA,IAAAE,gBACA,KAAAF,GAAA,KAAAA,GAAAR,EAAAI,QAEAG,GAAA,EACA,MAEAD,MAAA,MAAAF,EAGA,OADAG,IAAAD,IAAAV,KAAAK,EAAAI,SAAA,MACA,WAhDAJ,EAAAI,SAAAL,EAAAC,GAEA,UAAAU,KAAAR,GAEA,OADAb,EAAAa,EACA,cAEA,QAAAA,EAEA,OADAH,EAAAY,YACA,UAEA,QAAAD,KAAAR,GAEA,OADAH,EAAAa,SAAA,UACA,SAEA,GAAAf,EAAAa,KAAAR,GAEA,OADAH,EAAAa,SAAAf,GACA,WAEA,QAAAK,EAEA,OADAH,EAAAa,SAAA,WACA,SAEAb,EAAAa,SAAA,WACA,IAAAC,EAAAd,EAAAe,UACA,OAAAtB,EAAAuB,qBAAAF,GAAA,UACApB,EAAAsB,qBAAAF,GAAA,OACAnB,EAAAqB,qBAAAF,GAAA,UACA,WAwBA,SAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAC,KAAAL,WACAK,KAAAJ,SACAI,KAAAH,OACAG,KAAAF,QACAE,KAAAD,OAEA,SAAAE,EAAAvB,EAAAwB,EAAAL,GACA,IAAAM,EAAAzB,EAAAiB,SAEA,OADAjB,EAAA0B,SAAA,aAAA1B,EAAA0B,QAAAP,OAAAM,EAAAzB,EAAA0B,QAAAT,UACAjB,EAAA0B,QAAA,IAAAV,EAAAS,EAAAD,EAAAL,EAAA,KAAAnB,EAAA0B,SAEA,SAAAC,EAAA3B,GACA,IAAA4B,EAAA5B,EAAA0B,QAAAP,KAEA,MADA,KAAAS,GAAA,KAAAA,GAAA,KAAAA,IAAqC5B,EAAAiB,SAAAjB,EAAA0B,QAAAT,UACrCjB,EAAA0B,QAAA1B,EAAA0B,QAAAL,KAIO,IAAAjC,EAAA,CACPG,KAAA,OACAsC,WAAA,WACA,OACAzB,SAAA,KACAsB,QAAA,IAAAV,EAAA,cACAC,SAAA,EACAa,aAAA,IAGAC,MAAA,SAAAhC,EAAAC,GACA,IAAAgC,EAAAhC,EAAA0B,QAMA,GALA3B,EAAAkC,QACA,MAAAD,EAAAZ,QAAAY,EAAAZ,OAAA,GACApB,EAAAiB,SAAAlB,EAAAmC,cACAlC,EAAA8B,aAAA,GAEA/B,EAAAoC,WAAA,YACA9C,EAAA,KACA,IAAA+C,GAAApC,EAAAI,UAAAN,GAAAC,EAAAC,GACA,cAAAoC,EAAA,OAAAA,EAEA,GADA,MAAAJ,EAAAZ,QAAAY,EAAAZ,OAAA,GACA,KAAA/B,GAAsB,KAAAA,GAAA,KAAAA,GAAA,aAAA2C,EAAAb,KAEjB,QAAA9B,EAAuBkC,EAAAvB,EAAAD,EAAAmB,SAAA,UAA4C,QAAA7B,EAAAkC,EAAAvB,EAAAD,EAAAmB,SAAA,UAAkE,QAAA7B,EAAAkC,EAAAvB,EAAAD,EAAAmB,SAAA,UAAkE,QAAA7B,EAAsB,CAClO,kBAAA2C,EAAAb,MAAAa,EAAAL,EAAA3B,GAEA,IADA,KAAAgC,EAAAb,OAAwBa,EAAAL,EAAA3B,IACxB,aAAAgC,EAAAb,MAAAa,EAAAL,EAAA3B,QACKX,GAAA2C,EAAAb,KAAAQ,EAAA3B,GAAiDJ,KAAA,KAAAoC,EAAAb,MAA6C,OAAAa,EAAAb,OAAA,KAAA9B,GAAwC,aAAA2C,EAAAb,MAAA,gBAAA9B,IAAAkC,EAAAvB,EAAAD,EAAAmB,SAAA,kBAL3IS,EAAA3B,GAOA,OADAA,EAAA8B,aAAA,EACAM,GAEAC,aAAA,CACAC,cAAA,YACAC,cAAA,CACAC,KAAA","file":"static/js/97.1609a321.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar parserConfig = {\n  name: \"ttcn-cfg\",\n  keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" + \" TimeStampFormat LogEventTypes SourceInfoFormat\" + \" LogEntityName LogSourceInfo DiskFullAction\" + \" LogFileNumber LogFileSize MatchingHints Detailed\" + \" Compact SubCategories Stack Single None Seconds\" + \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" + \" NumHCs UnixSocketsEnabled LocalAddress\"),\n  fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" + \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" + \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" + \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" + \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" + \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" + \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" + \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" + \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" + \" DEBUG_ENCDEC DEBUG_TESTPORT\" + \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" + \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" + \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" + \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" + \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" + \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" + \" FUNCTION_RND FUNCTION_UNQUALIFIED\" + \" MATCHING_DONE MATCHING_MCSUCCESS\" + \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" + \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" + \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" + \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" + \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" + \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" + \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" + \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" + \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" + \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" + \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" + \" PORTEVENT_PCOUT PORTEVENT_PMIN\" + \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" + \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" + \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" + \" TESTCASE_FINISH TESTCASE_START\" + \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" + \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" + \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" + \" USER_UNQUALIFIED VERDICTOP_FINAL\" + \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" + \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n  externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" + \" EndTestCase\"),\n  multiLineStrings: true\n};\nvar keywords = parserConfig.keywords,\n  fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,\n  externalCommands = parserConfig.externalCommands,\n  multiLineStrings = parserConfig.multiLineStrings,\n  indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[\\|]/;\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[:=]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  if (ch == \"[\") {\n    stream.eatWhile(/[\\w_\\]]/);\n    return \"number\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (fileNCtrlMaskOptions.propertyIsEnumerable(cur)) return \"atom\";\n  if (externalCommands.propertyIsEnumerable(cur)) return \"deleted\";\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        var afterNext = stream.peek();\n        //look if the character if the quote is like the B in '10100010'B\n        if (afterNext) {\n          afterNext = afterNext.toLowerCase();\n          if (afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\") stream.next();\n        }\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n    return \"string\";\n  };\n}\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport var ttcnCfg = {\n  name: \"ttcn\",\n  startState: function startState() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n      popContext(state);\n    } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}