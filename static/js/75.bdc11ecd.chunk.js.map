{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/python.js"],"names":["wordRegexp","words","RegExp","join","__webpack_require__","r","__webpack_exports__","d","mkPython","python","cython","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","myKeywords","myBuiltins","undefined","extra_keywords","concat","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","current","toLowerCase","indexOf","tokenize","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","next","singleLineStringErrors","isString","formatStringFactory","tokenStringFactory","pop","push","indentUnit","align","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","column","pushBracketScope","slice","name","startState","token","addErr","textAfter","cx","scope","closing","unit","languageData","autocomplete","indentOnInput","commentTokens","line","closeBrackets","brackets","str","split"],"mappings":"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","file":"static/js/75.bdc11ecd.chunk.js","sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n  //               (Backwards-compatibility with old, cumbersome config system)\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/];\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1);\n  var hangingIndent = parserConf.hangingIndent;\n  var myKeywords = commonKeywords,\n    myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n  if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins);\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\";\n    if (sol) state.indent = stream.indentation();\n    // Handle scope changes\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset) pushPyScope(stream, state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n    return tokenBaseInner(stream, state);\n  }\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null;\n\n    // Handle Comments\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^[\\d_]+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^\\.\\d+/)) {\n        floatLiteral = true;\n      }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n      // Binary\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n      // Octal\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n      // Decimal\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        // TODO - Can you have imaginary longs?\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n    for (var i = 0; i < operators.length; i++) if (stream.match(operators[i])) return \"operator\";\n    if (stream.match(delimiters)) return \"punctuation\";\n    if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n    if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n    if (stream.match(builtins)) return \"builtin\";\n    if (stream.match(/^(self|cls)\\b/)) return \"self\";\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return inFormat ? null : ERRORCLASS;\n  }\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n    function tokenNestedExpr(depth) {\n      return function (stream, state) {\n        var inner = tokenBaseInner(stream, state, true);\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1);\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n          }\n        }\n        return inner;\n      };\n    }\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0);\n          if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop();\n    state.scopes.push({\n      offset: top(state).offset + stream.indentUnit,\n      type: \"py\",\n      align: null\n    });\n  }\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1;\n    state.scopes.push({\n      offset: state.indent + (hangingIndent || stream.indentUnit),\n      type: type,\n      align: align\n    });\n  }\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n    return top(state).offset != indented;\n  }\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle decorators\n    if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n    if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\";\n\n    // Handle scope changes.\n    if (current == \"pass\" || current == \"return\") state.dedent = true;\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false)) pushPyScope(stream, state);\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);else return ERRORCLASS;\n      }\n    }\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1) state.scopes.pop();\n    return style;\n  }\n  return {\n    name: \"python\",\n    startState: function startState() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{\n          offset: 0,\n          type: \"py\",\n          align: null\n        }],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n    token: function token(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n      if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n      if (stream.eol() && state.lambda) state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n    indent: function indent(state, textAfter, cx) {\n      if (state.tokenize != tokenBase) return state.tokenize.isString ? null : 0;\n      var scope = top(state);\n      var closing = scope.type == textAfter.charAt(0) || scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);\n      if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent || cx.unit : 0);\n    },\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {\n        line: \"#\"\n      },\n      closeBrackets: {\n        brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']\n      }\n    }\n  };\n}\n;\nvar words = function words(str) {\n  return str.split(\" \");\n};\nexport var python = mkPython({});\nexport var cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n});"],"sourceRoot":""}