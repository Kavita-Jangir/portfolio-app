{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/cypher.js"],"names":["__webpack_require__","r","__webpack_exports__","d","cypher","curPunc","wordRegexp","words","RegExp","join","tokenBase","stream","ch","next","match","test","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","systemKeywords","pushContext","state","type","col","context","prev","indent","popContext","name","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit"],"mappings":"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","file":"static/js/34.77d00f31.chunk.js","sourcesContent":["var wordRegexp = function wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n};\nvar tokenBase = function tokenBase(stream /*, state*/) {\n  curPunc = null;\n  var ch = stream.next();\n  if (ch === '\"') {\n    stream.match(/^.*?\"/);\n    return \"string\";\n  }\n  if (ch === \"'\") {\n    stream.match(/^.*?'/);\n    return \"string\";\n  }\n  if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  } else if (ch === \"/\" && stream.eat(\"/\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      stream.eatWhile(/[\\w\\d_\\-]/);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (funcs.test(word)) return \"builtin\";\n    if (preds.test(word)) return \"def\";\n    if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n    return \"variable\";\n  }\n};\nvar pushContext = function pushContext(state, type, col) {\n  return state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n};\nvar popContext = function popContext(state) {\n  state.indent = state.context.indent;\n  return state.context = state.context.prev;\n};\nvar curPunc;\nvar funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\nvar preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\nvar keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\nvar systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\nvar operatorChars = /[*+\\-<>=&|~%^]/;\nexport var cypher = {\n  name: \"cypher\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) {\n        state.context.align = false;\n      }\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n    var style = state.tokenize(stream, state);\n    if (style !== \"comment\" && state.context && state.context.align == null && state.context.type !== \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc === \"(\") {\n      pushContext(state, \")\", stream.column());\n    } else if (curPunc === \"[\") {\n      pushContext(state, \"]\", stream.column());\n    } else if (curPunc === \"{\") {\n      pushContext(state, \"}\", stream.column());\n    } else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type === \"pattern\") {\n        popContext(state);\n      }\n      if (state.context && curPunc === state.context.type) {\n        popContext(state);\n      }\n    } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n      popContext(state);\n    } else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) {\n        pushContext(state, \"pattern\", stream.column());\n      } else if (state.context.type === \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) {\n      while (context && context.type === \"pattern\") {\n        context = context.prev;\n      }\n    }\n    var closing = context && firstChar === context.type;\n    if (!context) return 0;\n    if (context.type === \"keywords\") return null;\n    if (context.align) return context.col + (closing ? 0 : 1);\n    return context.indent + (closing ? 0 : cx.unit);\n  }\n};"],"sourceRoot":""}