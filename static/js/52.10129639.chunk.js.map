{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/http.js"],"names":["failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","__webpack_require__","r","__webpack_exports__","d","http","name","token","eatSpace","blankLine","startState"],"mappings":"2FAAA,SAAAA,EAAAC,EAAAC,GAGA,OAFAD,EAAAE,YACAD,EAAAE,IAAAC,EACA,QAEA,SAAAC,EAAAL,EAAAC,GACA,OAAAD,EAAAM,MAAA,kBACAL,EAAAE,IAAAI,EACA,WACGP,EAAAM,MAAA,oBAAAE,KAAAR,EAAAS,SACHR,EAAAE,IAAAO,EACA,WAEAX,EAAAC,EAAAC,GAGA,SAAAM,EAAAP,EAAAC,GACA,IAAAU,EAAAX,EAAAM,MAAA,QACA,IAAAK,EAAA,OAAAZ,EAAAC,EAAAC,GACAA,EAAAE,IAAAS,EACA,IAAAC,EAAAC,OAAAH,EAAA,IACA,OAAAE,GAAA,KAAAA,EAAA,IACA,OAEA,QAGA,SAAAD,EAAAZ,EAAAC,GAGA,OAFAD,EAAAE,YACAD,EAAAE,IAAAC,EACA,KAEA,SAAAM,EAAAV,EAAAC,GAGA,OAFAD,EAAAe,SAAA,MACAd,EAAAE,IAAAa,EACA,iBAEA,SAAAA,EAAAhB,EAAAC,GACA,OAAAD,EAAAM,MAAA,mBACAL,EAAAE,IAAAC,EACA,WAEAL,EAAAC,EAAAC,GAGA,SAAAG,EAAAJ,GACA,OAAAA,EAAAiB,QAAAjB,EAAAkB,IAAA,SACAlB,EAAAM,MAAA,SACA,QAEAN,EAAAE,YACA,UAGAF,EAAAE,YACA,UAGA,SAAAiB,EAAAnB,GAEA,OADAA,EAAAE,YACA,KA5DAkB,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IA8DO,IAAAA,EAAA,CACPC,KAAA,OACAC,MAAA,SAAA1B,EAAAC,GACA,IAAAE,EAAAF,EAAAE,IACA,OAAAA,GAAAC,GAAAD,GAAAgB,GAAAnB,EAAA2B,WAAA,KACAxB,EAAAH,EAAAC,IAEA2B,UAAA,SAAA3B,GACAA,EAAAE,IAAAgB,GAEAU,WAAA,WACA,OACA1B,IAAAE","file":"static/js/52.10129639.chunk.js","sourcesContent":["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\nexport var http = {\n  name: \"http\",\n  token: function token(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n  blankLine: function blankLine(state) {\n    state.cur = body;\n  },\n  startState: function startState() {\n    return {\n      cur: start\n    };\n  }\n};"],"sourceRoot":""}