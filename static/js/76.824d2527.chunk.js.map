{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/q.js"],"names":["__webpack_require__","r","__webpack_exports__","d","q","curPunc","keywords","RegExp","join","E","tokenBase","stream","state","sol","c","next","tokenize","tokenLineComment","eol","test","peek","skipToEnd","current","tokenCommentToEOF","tokenString","eatWhile","t","backUp","match","tokenBlockComment","f","escaped","end","pushContext","type","col","context","prev","indent","popContext","name","startState","token","align","indentation","style","column","textAfter","cx","firstChar","charAt","closing","unit"],"mappings":"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","file":"static/js/76.824d2527.chunk.js","sourcesContent":["var curPunc,\n  keywords = buildRE([\"abs\", \"acos\", \"aj\", \"aj0\", \"all\", \"and\", \"any\", \"asc\", \"asin\", \"asof\", \"atan\", \"attr\", \"avg\", \"avgs\", \"bin\", \"by\", \"ceiling\", \"cols\", \"cor\", \"cos\", \"count\", \"cov\", \"cross\", \"csv\", \"cut\", \"delete\", \"deltas\", \"desc\", \"dev\", \"differ\", \"distinct\", \"div\", \"do\", \"each\", \"ej\", \"enlist\", \"eval\", \"except\", \"exec\", \"exit\", \"exp\", \"fby\", \"fills\", \"first\", \"fkeys\", \"flip\", \"floor\", \"from\", \"get\", \"getenv\", \"group\", \"gtime\", \"hclose\", \"hcount\", \"hdel\", \"hopen\", \"hsym\", \"iasc\", \"idesc\", \"if\", \"ij\", \"in\", \"insert\", \"inter\", \"inv\", \"key\", \"keys\", \"last\", \"like\", \"list\", \"lj\", \"load\", \"log\", \"lower\", \"lsq\", \"ltime\", \"ltrim\", \"mavg\", \"max\", \"maxs\", \"mcount\", \"md5\", \"mdev\", \"med\", \"meta\", \"min\", \"mins\", \"mmax\", \"mmin\", \"mmu\", \"mod\", \"msum\", \"neg\", \"next\", \"not\", \"null\", \"or\", \"over\", \"parse\", \"peach\", \"pj\", \"plist\", \"prd\", \"prds\", \"prev\", \"prior\", \"rand\", \"rank\", \"ratios\", \"raze\", \"read0\", \"read1\", \"reciprocal\", \"reverse\", \"rload\", \"rotate\", \"rsave\", \"rtrim\", \"save\", \"scan\", \"select\", \"set\", \"setenv\", \"show\", \"signum\", \"sin\", \"sqrt\", \"ss\", \"ssr\", \"string\", \"sublist\", \"sum\", \"sums\", \"sv\", \"system\", \"tables\", \"tan\", \"til\", \"trim\", \"txf\", \"type\", \"uj\", \"ungroup\", \"union\", \"update\", \"upper\", \"upsert\", \"value\", \"var\", \"view\", \"views\", \"vs\", \"wavg\", \"where\", \"where\", \"while\", \"within\", \"wj\", \"wj1\", \"wsum\", \"xasc\", \"xbar\", \"xcol\", \"xcols\", \"xdesc\", \"xexp\", \"xgroup\", \"xkey\", \"xlog\", \"xprev\", \"xrank\"]),\n  E = /[|/&^!+:\\\\\\-*%$=~#;@><,?_\\'\\\"\\[\\(\\]\\)\\s{}]/;\nfunction buildRE(w) {\n  return new RegExp(\"^(\" + w.join(\"|\") + \")$\");\n}\nfunction tokenBase(stream, state) {\n  var sol = stream.sol(),\n    c = stream.next();\n  curPunc = null;\n  if (sol) if (c == \"/\") return (state.tokenize = tokenLineComment)(stream, state);else if (c == \"\\\\\") {\n    if (stream.eol() || /\\s/.test(stream.peek())) return stream.skipToEnd(), /^\\\\\\s*$/.test(stream.current()) ? (state.tokenize = tokenCommentToEOF)(stream) : state.tokenize = tokenBase, \"comment\";else return state.tokenize = tokenBase, \"builtin\";\n  }\n  if (/\\s/.test(c)) return stream.peek() == \"/\" ? (stream.skipToEnd(), \"comment\") : \"null\";\n  if (c == '\"') return (state.tokenize = tokenString)(stream, state);\n  if (c == '`') return stream.eatWhile(/[A-Za-z\\d_:\\/.]/), \"macroName\";\n  if (\".\" == c && /\\d/.test(stream.peek()) || /\\d/.test(c)) {\n    var t = null;\n    stream.backUp(1);\n    if (stream.match(/^\\d{4}\\.\\d{2}(m|\\.\\d{2}([DT](\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)?)?)/) || stream.match(/^\\d+D(\\d{2}(:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?)?)/) || stream.match(/^\\d{2}:\\d{2}(:\\d{2}(\\.\\d{1,9})?)?/) || stream.match(/^\\d+[ptuv]{1}/)) t = \"temporal\";else if (stream.match(/^0[NwW]{1}/) || stream.match(/^0x[\\da-fA-F]*/) || stream.match(/^[01]+[b]{1}/) || stream.match(/^\\d+[chijn]{1}/) || stream.match(/-?\\d*(\\.\\d*)?(e[+\\-]?\\d+)?(e|f)?/)) t = \"number\";\n    return t && (!(c = stream.peek()) || E.test(c)) ? t : (stream.next(), \"error\");\n  }\n  if (/[A-Za-z]|\\./.test(c)) return stream.eatWhile(/[A-Za-z._\\d]/), keywords.test(stream.current()) ? \"keyword\" : \"variable\";\n  if (/[|/&^!+:\\\\\\-*%$=~#;@><\\.,?_\\']/.test(c)) return null;\n  if (/[{}\\(\\[\\]\\)]/.test(c)) return null;\n  return \"error\";\n}\nfunction tokenLineComment(stream, state) {\n  return stream.skipToEnd(), /\\/\\s*$/.test(stream.current()) ? (state.tokenize = tokenBlockComment)(stream, state) : state.tokenize = tokenBase, \"comment\";\n}\nfunction tokenBlockComment(stream, state) {\n  var f = stream.sol() && stream.peek() == \"\\\\\";\n  stream.skipToEnd();\n  if (f && /^\\\\\\s*$/.test(stream.current())) state.tokenize = tokenBase;\n  return \"comment\";\n}\nfunction tokenCommentToEOF(stream) {\n  return stream.skipToEnd(), \"comment\";\n}\nfunction tokenString(stream, state) {\n  var escaped = false,\n    next,\n    end = false;\n  while (next = stream.next()) {\n    if (next == \"\\\"\" && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  if (end) state.tokenize = tokenBase;\n  return \"string\";\n}\nfunction pushContext(state, type, col) {\n  state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\nexport var q = {\n  name: \"q\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    //if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n    var closing = context && firstChar == context.type;\n    if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : cx.unit);\n  }\n};"],"sourceRoot":""}