{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/ttcn.js"],"names":["words","str","obj","split","i","length","__webpack_require__","r","__webpack_exports__","d","ttcn","parserConfig","name","keywords","builtin","types","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","visibilityModifiers","templateMatch","multiLineStrings","wordList","add","prop","hasOwnProperty","push","curPunc","indentStatements","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","afterQuote","peek","toLowerCase","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line","block","open","close","autocomplete"],"mappings":"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","file":"static/js/98.95c18218.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar parserConfig = {\n  name: \"ttcn\",\n  keywords: words(\"activate address alive all alt altstep and and4b any\" + \" break case component const continue control deactivate\" + \" display do else encode enumerated except exception\" + \" execute extends extension external for from function\" + \" goto group if import in infinity inout interleave\" + \" label language length log match message mixed mod\" + \" modifies module modulepar mtc noblock not not4b nowait\" + \" of on optional or or4b out override param pattern port\" + \" procedure record recursive rem repeat return runs select\" + \" self sender set signature system template testcase to\" + \" type union value valueof var variant while with xor xor4b\"),\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" + \" decomp decvalue float2int float2str hex2bit hex2int\" + \" hex2oct hex2str int2bit int2char int2float int2hex\" + \" int2oct int2str int2unichar isbound ischosen ispresent\" + \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" + \" oct2str regexp replace rnd sizeof str2bit str2float\" + \" str2hex str2int str2oct substr unichar2int unichar2char\" + \" enum2int\"),\n  types: words(\"anytype bitstring boolean char charstring default float\" + \" hexstring integer objid octetstring universal verdicttype timer\"),\n  timerOps: words(\"read running start stop timeout\"),\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" + \" reply send trigger\"),\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\n  verdictOps: words(\"getverdict setverdict\"),\n  sutOps: words(\"action\"),\n  functionOps: words(\"apply derefers refers\"),\n  verdictConsts: words(\"error fail inconc none pass\"),\n  booleanConsts: words(\"true false\"),\n  otherConsts: words(\"null NULL omit\"),\n  visibilityModifiers: words(\"private public friend\"),\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\n  multiLineStrings: true\n};\nvar wordList = [];\nfunction add(obj) {\n  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop)) wordList.push(prop);\n}\nadd(parserConfig.keywords);\nadd(parserConfig.builtin);\nadd(parserConfig.timerOps);\nadd(parserConfig.portOps);\nvar keywords = parserConfig.keywords || {},\n  builtin = parserConfig.builtin || {},\n  timerOps = parserConfig.timerOps || {},\n  portOps = parserConfig.portOps || {},\n  configOps = parserConfig.configOps || {},\n  verdictOps = parserConfig.verdictOps || {},\n  sutOps = parserConfig.sutOps || {},\n  functionOps = parserConfig.functionOps || {},\n  verdictConsts = parserConfig.verdictConsts || {},\n  booleanConsts = parserConfig.booleanConsts || {},\n  otherConsts = parserConfig.otherConsts || {},\n  types = parserConfig.types || {},\n  visibilityModifiers = parserConfig.visibilityModifiers || {},\n  templateMatch = parserConfig.templateMatch || {},\n  multiLineStrings = parserConfig.multiLineStrings,\n  indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"atom\";\n  }\n  if (ch == \"%\") {\n    stream.eatWhile(/\\b/);\n    return \"atom\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    if (ch == \"@\") {\n      if (stream.match(\"try\") || stream.match(\"catch\") || stream.match(\"lazy\")) {\n        return \"keyword\";\n      }\n    }\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\n  if (visibilityModifiers.propertyIsEnumerable(cur)) return \"modifier\";\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        var afterQuote = stream.peek();\n        //look if the character after the quote is like the B in '10100010'B\n        if (afterQuote) {\n          afterQuote = afterQuote.toLowerCase();\n          if (afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\") stream.next();\n        }\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport var ttcn = {\n  name: \"ttcn\",\n  startState: function startState() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") {\n      popContext(state);\n    } else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\")) pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    autocomplete: wordList\n  }\n};"],"sourceRoot":""}