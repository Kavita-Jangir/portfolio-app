{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/mscgen.js"],"names":["mkParser","lang","name","startState","startStateFn","copyState","copyStateFn","token","pConfig","pStream","pState","match","wordRegexp","brackets","inComment","singlecomment","skipToEnd","inString","keywords","wordRegexpBoundary","options","arcsWords","arcsOthers","operators","constants","inAttributeList","attributes","next","languageData","commentTokens","line","block","open","close","__webpack_require__","r","__webpack_exports__","d","mscgen","msgenny","xu","pWords","RegExp","join","inScript"],"mappings":"0FAAA,SAAAA,EAAAC,GACA,OACAC,KAAA,SACAC,WAAAC,EACAC,UAAAC,EACAC,OAqEAC,EArEAP,EAsEA,SAAAQ,EAAAC,GACA,GAAAD,EAAAE,MAAAC,EAAAJ,EAAAK,WAAA,MACA,gBAGA,IAAAH,EAAAI,UAAA,CACA,GAAAL,EAAAE,MAAA,sBAEA,OADAD,EAAAI,WAAA,EACA,UAEA,GAAAL,EAAAE,MAAAC,EAAAJ,EAAAO,gBAAA,MAEA,OADAN,EAAAO,YACA,UAGA,GAAAN,EAAAI,UAEA,OADAL,EAAAE,MAAA,sBAAAD,EAAAI,WAAA,EAA8EL,EAAAO,YAC9E,UAGA,IAAAN,EAAAO,UAAAR,EAAAE,MAAA,yBAEA,OADAD,EAAAO,UAAA,EACA,SAEA,GAAAP,EAAAO,SAEA,OADAR,EAAAE,MAAA,kBAAAD,EAAAO,UAAA,EAAyER,EAAAO,YACzE,SAGA,GAAAR,EAAAU,UAAAT,EAAAE,MAAAQ,EAAAX,EAAAU,WAAA,sBACA,GAAAT,EAAAE,MAAAQ,EAAAX,EAAAY,UAAA,sBACA,GAAAX,EAAAE,MAAAQ,EAAAX,EAAAa,YAAA,sBACA,GAAAZ,EAAAE,MAAAC,EAAAJ,EAAAc,aAAA,sBACA,GAAAd,EAAAe,WAAAd,EAAAE,MAAAC,EAAAJ,EAAAe,YAAA,uBACA,GAAAf,EAAAgB,WAAAf,EAAAE,MAAAC,EAAAJ,EAAAgB,YAAA,uBAGA,IAAAhB,EAAAiB,iBAAAjB,EAAAkB,YAAAjB,EAAAE,MAAA,WAEA,OADAH,EAAAiB,iBAAA,EACA,UAEA,GAAAjB,EAAAiB,gBAAA,CACA,UAAAjB,EAAAkB,YAAAjB,EAAAE,MAAAQ,EAAAX,EAAAkB,aAAA,MACA,kBAEA,GAAAjB,EAAAE,MAAA,WAEA,OADAH,EAAAiB,iBAAA,EACA,UAIA,OADAhB,EAAAkB,OACA,OAxHAC,aAAA,CACAC,cAAA,CACAC,KAAA,IACAC,MAAA,CACAC,KAAA,KACAC,MAAA,SA+DA,IAAAzB,EA1EA0B,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,2BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,4BAAAG,IAAAL,EAAAG,EAAAD,EAAA,uBAAAI,IAiBO,IAAAF,EAAAtC,EAAA,CACPkB,SAAA,QACAE,QAAA,gDACAI,UAAA,4BACAE,WAAA,uNACAb,SAAA,OAAmB,OAEnBQ,UAAA,6BACAC,WAAA,uJACAP,cAAA,WACAQ,UAAA,QAEOgB,EAAAvC,EAAA,CACPkB,SAAA,KACAE,QAAA,+EACAI,UAAA,mCACAE,WAAA,KACAb,SAAA,OAAmB,OACnBQ,UAAA,8IACAC,WAAA,uJACAP,cAAA,WACAQ,UAAA,QAEOiB,EAAAxC,EAAA,CACPkB,SAAA,aACAE,QAAA,+EACAI,UAAA,mCACAE,WAAA,oQACAb,SAAA,OAAmB,OAEnBQ,UAAA,8IACAC,WAAA,uJACAP,cAAA,WACAQ,UAAA,QAEA,SAAAJ,EAAAsB,GACA,WAAAC,OAAA,QAAAD,EAAAE,KAAA,iBAEA,SAAA/B,EAAA6B,GACA,WAAAC,OAAA,OAAAD,EAAAE,KAAA,cAEA,SAAAvC,IACA,OACAU,WAAA,EACAG,UAAA,EACAQ,iBAAA,EACAmB,UAAA,GAGA,SAAAtC,EAAAI,GACA,OACAI,UAAAJ,EAAAI,UACAG,SAAAP,EAAAO,SACAQ,gBAAAf,EAAAe,gBACAmB,SAAAlC,EAAAkC","file":"static/js/4.4c4e9530.chunk.js","sourcesContent":["function mkParser(lang) {\n  return {\n    name: \"mscgen\",\n    startState: startStateFn,\n    copyState: copyStateFn,\n    token: produceTokenFunction(lang),\n    languageData: {\n      commentTokens: {\n        line: \"#\",\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      }\n    }\n  };\n}\nexport var mscgen = mkParser({\n  \"keywords\": [\"msc\"],\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\"],\n  \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\"],\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\nexport var msgenny = mkParser({\n  \"keywords\": null,\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\": null,\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\nexport var xu = mkParser({\n  \"keywords\": [\"msc\", \"xu\"],\n  \"options\": [\"hscale\", \"width\", \"arcgradient\", \"wordwraparcs\", \"wordwrapentities\", \"watermark\"],\n  \"constants\": [\"true\", \"false\", \"on\", \"off\", \"auto\"],\n  \"attributes\": [\"label\", \"idurl\", \"id\", \"url\", \"linecolor\", \"linecolour\", \"textcolor\", \"textcolour\", \"textbgcolor\", \"textbgcolour\", \"arclinecolor\", \"arclinecolour\", \"arctextcolor\", \"arctextcolour\", \"arctextbgcolor\", \"arctextbgcolour\", \"arcskip\", \"title\", \"deactivate\", \"activate\", \"activation\"],\n  \"brackets\": [\"\\\\{\", \"\\\\}\"],\n  // [ and  ] are brackets too, but these get handled in with lists\n  \"arcsWords\": [\"note\", \"abox\", \"rbox\", \"box\", \"alt\", \"else\", \"opt\", \"break\", \"par\", \"seq\", \"strict\", \"neg\", \"critical\", \"ignore\", \"consider\", \"assert\", \"loop\", \"ref\", \"exc\"],\n  \"arcsOthers\": [\"\\\\|\\\\|\\\\|\", \"\\\\.\\\\.\\\\.\", \"---\", \"--\", \"<->\", \"==\", \"<<=>>\", \"<=>\", \"\\\\.\\\\.\", \"<<>>\", \"::\", \"<:>\", \"->\", \"=>>\", \"=>\", \">>\", \":>\", \"<-\", \"<<=\", \"<=\", \"<<\", \"<:\", \"x-\", \"-x\"],\n  \"singlecomment\": [\"//\", \"#\"],\n  \"operators\": [\"=\"]\n});\nfunction wordRegexpBoundary(pWords) {\n  return new RegExp(\"^\\\\b(\" + pWords.join(\"|\") + \")\\\\b\", \"i\");\n}\nfunction wordRegexp(pWords) {\n  return new RegExp(\"^(?:\" + pWords.join(\"|\") + \")\", \"i\");\n}\nfunction startStateFn() {\n  return {\n    inComment: false,\n    inString: false,\n    inAttributeList: false,\n    inScript: false\n  };\n}\nfunction copyStateFn(pState) {\n  return {\n    inComment: pState.inComment,\n    inString: pState.inString,\n    inAttributeList: pState.inAttributeList,\n    inScript: pState.inScript\n  };\n}\nfunction produceTokenFunction(pConfig) {\n  return function (pStream, pState) {\n    if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {\n      return \"bracket\";\n    }\n    /* comments */\n    if (!pState.inComment) {\n      if (pStream.match(/\\/\\*[^\\*\\/]*/, true, true)) {\n        pState.inComment = true;\n        return \"comment\";\n      }\n      if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {\n        pStream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (pState.inComment) {\n      if (pStream.match(/[^\\*\\/]*\\*\\//, true, true)) pState.inComment = false;else pStream.skipToEnd();\n      return \"comment\";\n    }\n    /* strings */\n    if (!pState.inString && pStream.match(/\\\"(\\\\\\\"|[^\\\"])*/, true, true)) {\n      pState.inString = true;\n      return \"string\";\n    }\n    if (pState.inString) {\n      if (pStream.match(/[^\\\"]*\\\"/, true, true)) pState.inString = false;else pStream.skipToEnd();\n      return \"string\";\n    }\n    /* keywords & operators */\n    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true)) return \"keyword\";\n    if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true)) return \"keyword\";\n    if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true)) return \"operator\";\n    if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true)) return \"variable\";\n\n    /* attribute lists */\n    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {\n      pConfig.inAttributeList = true;\n      return \"bracket\";\n    }\n    if (pConfig.inAttributeList) {\n      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {\n        return \"attribute\";\n      }\n      if (pStream.match(']', true, true)) {\n        pConfig.inAttributeList = false;\n        return \"bracket\";\n      }\n    }\n    pStream.next();\n    return null;\n  };\n}"],"sourceRoot":""}