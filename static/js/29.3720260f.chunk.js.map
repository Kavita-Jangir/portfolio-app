{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/cmake.js"],"names":["__webpack_require__","r","__webpack_exports__","d","cmake","variable_regex","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","name","startState","inDefinition","inInclude","token","eatSpace","ch","match","skipToEnd","eatWhile","tokenize"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAA,wBACA,SAAAC,EAAAC,EAAAC,GAIA,IAHA,IAAAC,EACAC,EACAC,GAAA,GACAJ,EAAAK,QAAAH,EAAAF,EAAAM,SAAAL,EAAAM,SAAA,CACA,SAAAL,GAAA,MAAAC,GAAA,KAAAF,EAAAM,QAAA,CACAH,GAAA,EACA,MAEAD,EAAAD,EAUA,OARAE,GACAJ,EAAAQ,OAAA,GAEAN,GAAAD,EAAAM,QACAN,EAAAQ,gBAAA,EAEAR,EAAAQ,gBAAA,EAEA,SA4CO,IAAAZ,EAAA,CACPa,KAAA,QACAC,WAAA,WACA,IAAAV,EAAA,CACAW,cAAA,EACAC,WAAA,EACAJ,gBAAA,EACAF,SAAA,GACA,OAAAN,GAEAa,MAAA,SAAAd,EAAAC,GACA,OAAAD,EAAAe,WAAA,KArDA,SAAAf,EAAAC,GACA,IAAAe,EAAAhB,EAAAM,OAGA,YAAAU,EACAhB,EAAAiB,MAAAnB,GACA,uBAEA,WAGAG,EAAAQ,gBAEAT,EAAAQ,OAAA,GACAT,EAAAC,EAAAC,IAIAD,EAAAiB,MAAA,gBAAAjB,EAAAiB,MAAA,kBACAjB,EAAAQ,OAAA,GACA,OAEA,KAAAQ,GACAhB,EAAAkB,YACA,WAGA,KAAAF,GAAA,KAAAA,GAEAf,EAAAM,QAAAS,EAEAjB,EAAAC,EAAAC,IAEA,KAAAe,GAAA,KAAAA,EACA,UAEAA,EAAAC,MAAA,SACA,UAEAjB,EAAAmB,SAAA,SACA,MAcAC,CAAApB,EAAAC","file":"static/js/29.3720260f.chunk.js","sourcesContent":["var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\nfunction tokenString(stream, state) {\n  var current,\n    prev,\n    found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\nfunction tokenize(stream, state) {\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      return 'variableName.special';\n    }\n    return 'variable';\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Do we just have a function on our hands?\n  // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  if (ch == '(' || ch == ')') {\n    return 'bracket';\n  }\n  if (ch.match(/[0-9]/)) {\n    return 'number';\n  }\n  stream.eatWhile(/[\\w-]/);\n  return null;\n}\nexport var cmake = {\n  name: \"cmake\",\n  startState: function startState() {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return tokenize(stream, state);\n  }\n};"],"sourceRoot":""}