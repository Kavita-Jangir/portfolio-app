{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/pig.js"],"names":["words","str","obj","split","i","length","__webpack_require__","r","__webpack_exports__","d","pig","pBuiltins","pKeywords","pTypes","builtins","keywords","types","isOperatorChar","chain","stream","state","f","tokenize","tokenComment","ch","isEnd","next","tokenBase","quote","escaped","end","test","eatWhile","eat","skipToEnd","propertyIsEnumerable","current","toUpperCase","name","startState","startOfLine","token","eatSpace","languageData","autocomplete"],"mappings":"2FAAA,SAAAA,EAAAC,GAGA,IAFA,IAAAC,EAAA,GACAF,EAAAC,EAAAE,MAAA,KACAC,EAAA,EAAiBA,EAAAJ,EAAAK,SAAkBD,EAAAF,EAAAF,EAAAI,KAAA,EACnC,OAAAF,EAJAI,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,wBAAAE,IAQA,IAAAC,EAAA,w3BAGAC,EAAA,mXAGAC,EAAA,mEACAC,EAAAd,EAAAW,GACAI,EAAAf,EAAAY,GACAI,EAAAhB,EAAAa,GACAI,EAAA,oBACA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,OADAD,EAAAE,SAAAD,EACAA,EAAAF,EAAAC,GAEA,SAAAG,EAAAJ,EAAAC,GAGA,IAFA,IACAI,EADAC,GAAA,EAEAD,EAAAL,EAAAO,QAAA,CACA,QAAAF,GAAAC,EAAA,CACAL,EAAAE,SAAAK,EACA,MAEAF,EAAA,KAAAD,EAEA,gBAkBA,SAAAG,EAAAR,EAAAC,GACA,IAjBAQ,EAiBAJ,EAAAL,EAAAO,OAGA,WAAAF,GAAA,KAAAA,EAAAN,EAAAC,EAAAC,GApBAQ,EAoBAJ,EAnBA,SAAAL,EAAAC,GAIA,IAHA,IACAM,EADAG,GAAA,EAEAC,GAAA,EACA,OAAAJ,EAAAP,EAAAO,SAAA,CACA,GAAAA,GAAAE,IAAAC,EAAA,CACAC,GAAA,EACA,MAEAD,MAAA,MAAAH,EAGA,OADAI,GAAAD,IAAAT,EAAAE,SAAAK,GACA,WASA,mBAAyBI,KAAAP,GAAA,KAEzB,KAAAO,KAAAP,IACAL,EAAAa,SAAA,UACA,UAGA,KAAAR,EACAL,EAAAc,IAAA,KACAf,EAAAC,EAAAC,EAAAG,IAEAJ,EAAAa,SAAAf,GACA,YAIA,KAAAO,EACAL,EAAAc,IAAA,MACAd,EAAAe,YACA,YAEAf,EAAAa,SAAAf,GACA,YAIAA,EAAAc,KAAAP,IACAL,EAAAa,SAAAf,GACA,aAGAE,EAAAa,SAAA,WAEAjB,KAAAoB,qBAAAhB,EAAAiB,UAAAC,iBAEAlB,EAAAc,IAAA,OAAAd,EAAAc,IAAA,eAGAnB,KAAAqB,qBAAAhB,EAAAiB,UAAAC,eAAA,UAEArB,KAAAmB,qBAAAhB,EAAAiB,UAAAC,eAAA,OAEA,YAKO,IAAA3B,EAAA,CACP4B,KAAA,MACAC,WAAA,WACA,OACAjB,SAAAK,EACAa,aAAA,IAGAC,MAAA,SAAAtB,EAAAC,GACA,OAAAD,EAAAuB,WAAA,KACAtB,EAAAE,SAAAH,EAAAC,IAGAuB,aAAA,CACAC,cAAAjC,EAAAE,EAAAD,GAAAT,MAAA","file":"static/js/70.db99faec.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\n// builtin funcs taken from trunk revision 1303237\nvar pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \" + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \" + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \" + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \" + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \" + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \" + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \" + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \" + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \" + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n// taken from QueryLexer.g\nvar pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \" + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \" + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \" + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \" + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n// data types\nvar pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\nvar builtins = words(pBuiltins),\n  keywords = words(pKeywords),\n  types = words(pTypes);\nvar isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenComment(stream, state) {\n  var isEnd = false;\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && isEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    isEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = tokenBase;\n    return \"error\";\n  };\n}\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  // is a start of string?\n  if (ch == '\"' || ch == \"'\") return chain(stream, state, tokenString(ch));\n  // is it one of the special chars\n  else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) return null;\n  // is it a number?\n  else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  // multi line comment or operator\n  else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  }\n  // single line comment or operator\n  else if (ch == \"-\") {\n    if (stream.eat(\"-\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n  }\n  // is it an operator\n  else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  } else {\n    // get the while word\n    stream.eatWhile(/[\\w\\$_]/);\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n      //keywords can be used as variables like flatten(group), group.$0 etc..\n      if (!stream.eat(\")\") && !stream.eat(\".\")) return \"keyword\";\n    }\n    // is it one of the builtin functions?\n    if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) return \"builtin\";\n    // is it one of the listed types?\n    if (types && types.propertyIsEnumerable(stream.current().toUpperCase())) return \"type\";\n    // default is a 'variable'\n    return \"variable\";\n  }\n}\n\n// Interface\nexport var pig = {\n  name: \"pig\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    autocomplete: (pBuiltins + pTypes + pKeywords).split(\" \")\n  }\n};"],"sourceRoot":""}