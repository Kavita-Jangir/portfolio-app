{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js"],"names":["__webpack_require__","r","__webpack_exports__","d","tiddlyWiki","textwords","keywords","allTags","closeAll","list","newJournal","newTiddler","permaview","saveChanges","search","slider","tabs","tag","tagging","tags","tiddler","timeline","today","version","option","with","filter","isSpaceName","reHR","reWikiCommentStart","reWikiCommentStop","reBlockQuote","reJsCodeStart","reJsCodeStop","reXmlCodeStart","reXmlCodeStop","reCodeBlockStart","reCodeBlockStop","reUntilCodeStop","chain","stream","state","f","tokenize","tokenBase","sol","ch","peek","block","test","match","twTokenCode","next","skipToEnd","eatWhile","eat","twTokenComment","twTokenEm","twTokenUnderline","twTokenStrike","twTokenStrong","twTokenMacro","propertyIsEnumerable","current","maybeEnd","sb","name","startState","token","eatSpace"],"mappings":"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","file":"static/js/93.1ad32340.chunk.js","sourcesContent":["// Tokenizer\nvar textwords = {};\nvar keywords = {\n  \"allTags\": true,\n  \"closeAll\": true,\n  \"list\": true,\n  \"newJournal\": true,\n  \"newTiddler\": true,\n  \"permaview\": true,\n  \"saveChanges\": true,\n  \"search\": true,\n  \"slider\": true,\n  \"tabs\": true,\n  \"tag\": true,\n  \"tagging\": true,\n  \"tags\": true,\n  \"tiddler\": true,\n  \"timeline\": true,\n  \"today\": true,\n  \"version\": true,\n  \"option\": true,\n  \"with\": true,\n  \"filter\": true\n};\nvar isSpaceName = /[\\w_\\-]/i,\n  reHR = /^\\-\\-\\-\\-+$/,\n  // <hr>\n  reWikiCommentStart = /^\\/\\*\\*\\*$/,\n  // /***\n  reWikiCommentStop = /^\\*\\*\\*\\/$/,\n  // ***/\n  reBlockQuote = /^<<<$/,\n  reJsCodeStart = /^\\/\\/\\{\\{\\{$/,\n  // //{{{ js block start\n  reJsCodeStop = /^\\/\\/\\}\\}\\}$/,\n  // //}}} js stop\n  reXmlCodeStart = /^<!--\\{\\{\\{-->$/,\n  // xml block start\n  reXmlCodeStop = /^<!--\\}\\}\\}-->$/,\n  // xml stop\n\n  reCodeBlockStart = /^\\{\\{\\{$/,\n  // {{{ TW text div block start\n  reCodeBlockStop = /^\\}\\}\\}$/,\n  // }}} TW text stop\n\n  reUntilCodeStop = /.*?\\}\\}\\}/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var sol = stream.sol(),\n    ch = stream.peek();\n  state.block = false; // indicates the start of a code block.\n\n  // check start of  blocks\n  if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n    if (stream.match(reCodeBlockStart)) {\n      state.block = true;\n      return chain(stream, state, twTokenCode);\n    }\n    if (stream.match(reBlockQuote)) return 'quote';\n    if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop)) return 'comment';\n    if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop)) return 'comment';\n    if (stream.match(reHR)) return 'contentSeparator';\n  }\n  stream.next();\n  if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n    if (ch == \"!\") {\n      // tw header\n      stream.skipToEnd();\n      return \"header\";\n    }\n    if (ch == \"*\") {\n      // tw list\n      stream.eatWhile('*');\n      return \"comment\";\n    }\n    if (ch == \"#\") {\n      // tw numbered list\n      stream.eatWhile('#');\n      return \"comment\";\n    }\n    if (ch == \";\") {\n      // definition list, term\n      stream.eatWhile(';');\n      return \"comment\";\n    }\n    if (ch == \":\") {\n      // definition list, description\n      stream.eatWhile(':');\n      return \"comment\";\n    }\n    if (ch == \">\") {\n      // single line quote\n      stream.eatWhile(\">\");\n      return \"quote\";\n    }\n    if (ch == '|') return 'header';\n  }\n  if (ch == '{' && stream.match('{{')) return chain(stream, state, twTokenCode);\n\n  // rudimentary html:// file:// link matching. TW knows much more ...\n  if (/[hf]/i.test(ch) && /[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) return \"link\";\n\n  // just a little string indicator, don't want to have the whole string covered\n  if (ch == '\"') return 'string';\n  if (ch == '~')\n    // _no_ CamelCase indicator should be bold\n    return 'brace';\n  if (/[\\[\\]]/.test(ch) && stream.match(ch))\n    // check for [[..]]\n    return 'brace';\n  if (ch == \"@\") {\n    // check for space link. TODO fix @@...@@ highlighting\n    stream.eatWhile(isSpaceName);\n    return \"link\";\n  }\n  if (/\\d/.test(ch)) {\n    // numbers\n    stream.eatWhile(/\\d/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    // tw invisible comment\n    if (stream.eat(\"%\")) {\n      return chain(stream, state, twTokenComment);\n    } else if (stream.eat(\"/\")) {\n      //\n      return chain(stream, state, twTokenEm);\n    }\n  }\n  if (ch == \"_\" && stream.eat(\"_\"))\n    // tw underline\n    return chain(stream, state, twTokenUnderline);\n\n  // strikethrough and mdash handling\n  if (ch == \"-\" && stream.eat(\"-\")) {\n    // if strikethrough looks ugly, change CSS.\n    if (stream.peek() != ' ') return chain(stream, state, twTokenStrike);\n    // mdash\n    if (stream.peek() == ' ') return 'brace';\n  }\n  if (ch == \"'\" && stream.eat(\"'\"))\n    // tw bold\n    return chain(stream, state, twTokenStrong);\n  if (ch == \"<\" && stream.eat(\"<\"))\n    // tw macro\n    return chain(stream, state, twTokenMacro);\n\n  // core macro handling\n  stream.eatWhile(/[\\w\\$_]/);\n  return textwords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n}\n\n// tw invisible comment\nfunction twTokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"%\";\n  }\n  return \"comment\";\n}\n\n// tw strong / bold\nfunction twTokenStrong(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"'\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"'\";\n  }\n  return \"strong\";\n}\n\n// tw code\nfunction twTokenCode(stream, state) {\n  var sb = state.block;\n  if (sb && stream.current()) {\n    return \"comment\";\n  }\n  if (!sb && stream.match(reUntilCodeStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n  if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n    state.tokenize = tokenBase;\n    return \"comment\";\n  }\n  stream.next();\n  return \"comment\";\n}\n\n// tw em / italic\nfunction twTokenEm(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"/\";\n  }\n  return \"emphasis\";\n}\n\n// tw underlined text\nfunction twTokenUnderline(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"_\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"_\";\n  }\n  return \"link\";\n}\n\n// tw strike through text looks ugly\n// change CSS if needed\nfunction twTokenStrike(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"-\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"-\";\n  }\n  return \"deleted\";\n}\n\n// macro\nfunction twTokenMacro(stream, state) {\n  if (stream.current() == '<<') {\n    return 'meta';\n  }\n  var ch = stream.next();\n  if (!ch) {\n    state.tokenize = tokenBase;\n    return null;\n  }\n  if (ch == \">\") {\n    if (stream.peek() == '>') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return \"meta\";\n    }\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  return keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : null;\n}\n\n// Interface\nexport var tiddlyWiki = {\n  name: \"tiddlywiki\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  }\n};"],"sourceRoot":""}