{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/clojure.js"],"names":["__webpack_require__","r","__webpack_exports__","d","clojure","atoms","specialForms","coreSymbols","atom","createLookupMap","specialForm","coreSymbol","hasBodyParameter","delimiter","numberLiteral","characterLiteral","qualifiedSymbol","base","stream","state","eatSpace","eat","match","tokenize","inString","skipToEnd","matches","symbol","lastToken","inComment","is","charAt","next","eatWhile","c","escaped","parenthesisCount","backUp","words","obj","i","length","value","test","RegExp","Object","propertyIsEnumerable","name","startState","ctx","prev","start","indentTo","token","sol","typeStylePair","type","style","current","indentUnit","column","indent","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"],"mappings":"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","file":"static/js/2.59455345.chunk.js","sourcesContent":["var atoms = [\"false\", \"nil\", \"true\"];\nvar specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\", \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\nvar coreSymbols = [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\", \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\", \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\", \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\", \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\", \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\", \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\", \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\", \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\", \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\", \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\", \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\", \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\", \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\", \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\", \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\", \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\", \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\", \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\", \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\", \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\", \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\", \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\", \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\", \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\", \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\", \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\", \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\", \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\", \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\", \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\", \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\", \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\", \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\", \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\", \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\", \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\", \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\", \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\", \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\", \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\", \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\", \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\", \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\", \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\", \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\", \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\", \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\", \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\", \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\", \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\", \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\", \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\", \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\", \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\", \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\", \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\", \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\", \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\", \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\", \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\", \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\", \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\", \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\", \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\", \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\", \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\", \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\", \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\", \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\", \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\", \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\", \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\", \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\", \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\", \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\", \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\", \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\", \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\", \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\", \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\", \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\", \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\", \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\", \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\", \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\", \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\", \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\", \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\", \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\", \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\", \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\", \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\", \"sequential?\", \"set\", \"set-agent-send-executor!\", \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\", \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\", \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\", \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\", \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\", \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\", \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\", \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\", \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\", \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\", \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\", \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\", \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\", \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\", \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\", \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\", \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\", \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\", \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\", \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\", \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\", \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\", \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\", \"zipmap\"];\nvar haveBodyParameter = [\"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"comment\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\", \"defn\", \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"do\", \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\", \"extend-type\", \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\", \"let\", \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"struct-map\", \"some->\", \"some->>\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\nvar atom = createLookupMap(atoms);\nvar specialForm = createLookupMap(specialForms);\nvar coreSymbol = createLookupMap(coreSymbols);\nvar hasBodyParameter = createLookupMap(haveBodyParameter);\nvar delimiter = /^(?:[\\\\\\[\\]\\s\"(),;@^`{}~]|$)/;\nvar numberLiteral = /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/;\nvar characterLiteral = /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n// simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*/\n// simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n// qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\nvar qualifiedSymbol = /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\nfunction base(stream, state) {\n  if (stream.eatSpace() || stream.eat(\",\")) return [\"space\", null];\n  if (stream.match(numberLiteral)) return [null, \"number\"];\n  if (stream.match(characterLiteral)) return [null, \"string.special\"];\n  if (stream.eat(/^\"/)) return (state.tokenize = inString)(stream, state);\n  if (stream.eat(/^[(\\[{]/)) return [\"open\", \"bracket\"];\n  if (stream.eat(/^[)\\]}]/)) return [\"close\", \"bracket\"];\n  if (stream.eat(/^;/)) {\n    stream.skipToEnd();\n    return [\"space\", \"comment\"];\n  }\n  if (stream.eat(/^[#'@^`~]/)) return [null, \"meta\"];\n  var matches = stream.match(qualifiedSymbol);\n  var symbol = matches && matches[0];\n  if (!symbol) {\n    // advance stream by at least one character so we don't get stuck.\n    stream.next();\n    stream.eatWhile(function (c) {\n      return !is(c, delimiter);\n    });\n    return [null, \"error\"];\n  }\n  if (symbol === \"comment\" && state.lastToken === \"(\") return (state.tokenize = inComment)(stream, state);\n  if (is(symbol, atom) || symbol.charAt(0) === \":\") return [\"symbol\", \"atom\"];\n  if (is(symbol, specialForm) || is(symbol, coreSymbol)) return [\"symbol\", \"keyword\"];\n  if (state.lastToken === \"(\") return [\"symbol\", \"builtin\"]; // other operator\n\n  return [\"symbol\", \"variable\"];\n}\nfunction inString(stream, state) {\n  var escaped = false,\n    next;\n  while (next = stream.next()) {\n    if (next === \"\\\"\" && !escaped) {\n      state.tokenize = base;\n      break;\n    }\n    escaped = !escaped && next === \"\\\\\";\n  }\n  return [null, \"string\"];\n}\nfunction inComment(stream, state) {\n  var parenthesisCount = 1;\n  var next;\n  while (next = stream.next()) {\n    if (next === \")\") parenthesisCount--;\n    if (next === \"(\") parenthesisCount++;\n    if (parenthesisCount === 0) {\n      stream.backUp(1);\n      state.tokenize = base;\n      break;\n    }\n  }\n  return [\"space\", \"comment\"];\n}\nfunction createLookupMap(words) {\n  var obj = {};\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nfunction is(value, test) {\n  if (test instanceof RegExp) return test.test(value);\n  if (test instanceof Object) return test.propertyIsEnumerable(value);\n}\nexport var clojure = {\n  name: \"clojure\",\n  startState: function startState() {\n    return {\n      ctx: {\n        prev: null,\n        start: 0,\n        indentTo: 0\n      },\n      lastToken: null,\n      tokenize: base\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo !== \"number\") state.ctx.indentTo = state.ctx.start + 1;\n    var typeStylePair = state.tokenize(stream, state);\n    var type = typeStylePair[0];\n    var style = typeStylePair[1];\n    var current = stream.current();\n    if (type !== \"space\") {\n      if (state.lastToken === \"(\" && state.ctx.indentTo === null) {\n        if (type === \"symbol\" && is(current, hasBodyParameter)) state.ctx.indentTo = state.ctx.start + stream.indentUnit;else state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo === \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastToken = current;\n    }\n    if (type === \"open\") state.ctx = {\n      prev: state.ctx,\n      start: stream.column(),\n      indentTo: null\n    };else if (type === \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n  indent: function indent(state) {\n    var i = state.ctx.indentTo;\n    return typeof i === \"number\" ? i : state.ctx.start + 1;\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    commentTokens: {\n      line: \";;\"\n    },\n    autocomplete: [].concat(atoms, specialForms, coreSymbols)\n  }\n};"],"sourceRoot":""}