{"version":3,"sources":["../node_modules/@codemirror/legacy-modes/mode/clike.js"],"names":["__webpack_require__","r","__webpack_exports__","d","clike","c","cpp","java","csharp","scala","kotlin","shader","nesC","objectiveC","objectiveCpp","squirrel","ceylon","dart","C_Users_Anurag_Desktop_Portfolio_website_port_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","Context","indented","column","type","info","align","prev","this","pushContext","state","col","indent","context","popContext","t","typeBefore","stream","pos","prevToken","test","string","slice","typeAtEndOfLine","indentation","isTopScope","parserConfig","curPunc","isDefKeyword","statementIndentUnit","dontAlignCalls","keywords","types","builtin","blockKeywords","defKeywords","atoms","hooks","multiLineStrings","indentStatements","indentSwitch","namespaceSeparator","isPunctuationChar","numberStart","number","isOperatorChar","isIdentifierChar","isReservedIdentifier","tokenBase","quote","ch","next","result","tokenize","escaped","end","backUp","match","eat","tokenComment","skipToEnd","eatWhile","cur","current","contains","maybeEnd","maybeEOL","typeFirstDefinitions","eol","name","startState","indentUnit","startOfLine","token","ctx","sol","eatSpace","style","start","undefined","styleDefs","textAfter","firstChar","charAt","closing","dontIndentStatements","hook","unit","switchBlock","allmanIndentation","languageData","Object","indentOnInput","commentTokens","line","block","open","close","autocomplete","keys","concat","words","str","obj","split","i","length","word","propertyIsEnumerable","cKeywords","cppKeywords","objCKeywords","objCBuiltins","basicCTypes","basicObjCTypes","cTypes","identifier","objCTypes","cBlockKeywords","cppHook","peek","pointerHook","_stream","cIsReservedIdentifier","toLowerCase","cpp14Literal","cpp11StringHook","cpp11RawStringDelim","tokenRawString","cppLooksLikeConstructor","lastTwo","exec","tokenAtString","delim","replace","RegExp","#","*","cDefKeywords","u","U","L","R","0","1","2","3","4","5","6","7","8","9","@","\"","tokenTripleString","tokenNestedComment","depth","'","=","cx","/","closeBrackets","brackets","intendSwitch","tripleString","skipTo","stringTokenizer","first","toUpperCase","tokenCeylonString","`","pushInterpolationStack","interpolationStack","push","popInterpolationStack","pop","tokenDartString","raw","tripleQuoted","tokenStringHelper","tokenInterpolation","tokenInterpolationIdentifier","}","sizeInterpolationStack","_"],"mappings":"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","file":"static/js/0.d4860c27.chunk.js","sourcesContent":["import _objectSpread from \"C:\\\\Users\\\\Anurag\\\\Desktop\\\\Portfolio_website\\\\port-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nfunction Context(indented, column, type, info, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.info = info;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type, info) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\" && type != \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, info, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\nfunction typeBefore(stream, state, pos) {\n  if (state.prevToken == \"variable\" || state.prevToken == \"type\") return true;\n  if (/\\S(?:[^- ]>|[*\\]])\\s*$|\\*$/.test(stream.string.slice(0, pos))) return true;\n  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;\n}\nfunction isTopScope(context) {\n  for (;;) {\n    if (!context || context.type == \"top\") return true;\n    if (context.type == \"}\" && context.prev.info != \"namespace\") return false;\n    context = context.prev;\n  }\n}\nexport function clike(parserConfig) {\n  var statementIndentUnit = parserConfig.statementIndentUnit,\n    dontAlignCalls = parserConfig.dontAlignCalls,\n    keywords = parserConfig.keywords || {},\n    types = parserConfig.types || {},\n    builtin = parserConfig.builtin || {},\n    blockKeywords = parserConfig.blockKeywords || {},\n    defKeywords = parserConfig.defKeywords || {},\n    atoms = parserConfig.atoms || {},\n    hooks = parserConfig.hooks || {},\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false,\n    indentSwitch = parserConfig.indentSwitch !== false,\n    namespaceSeparator = parserConfig.namespaceSeparator,\n    isPunctuationChar = parserConfig.isPunctuationChar || /[\\[\\]{}\\(\\),;\\:\\.]/,\n    numberStart = parserConfig.numberStart || /[\\d\\.]/,\n    number = parserConfig.number || /^(?:0x[a-f\\d]+|0b[01]+|(?:\\d+\\.?\\d*|\\.\\d+)(?:e[-+]?\\d+)?)(u|ll?|l|f)?/i,\n    isOperatorChar = parserConfig.isOperatorChar || /[+\\-*&%=<>!?|\\/]/,\n    isIdentifierChar = parserConfig.isIdentifierChar || /[\\w\\$_\\xa1-\\uffff]/,\n    // An optional function that takes a {string} token and returns true if it\n    // should be treated as a builtin.\n    isReservedIdentifier = parserConfig.isReservedIdentifier || false;\n  var curPunc, isDefKeyword;\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (numberStart.test(ch)) {\n      stream.backUp(1);\n      if (stream.match(number)) return \"number\";\n      stream.next();\n    }\n    if (isPunctuationChar.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      while (!stream.match(/^\\/[\\/*]/, false) && stream.eat(isOperatorChar)) {}\n      return \"operator\";\n    }\n    stream.eatWhile(isIdentifierChar);\n    if (namespaceSeparator) while (stream.match(namespaceSeparator)) stream.eatWhile(isIdentifierChar);\n    var cur = stream.current();\n    if (contains(keywords, cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      if (contains(defKeywords, cur)) isDefKeyword = true;\n      return \"keyword\";\n    }\n    if (contains(types, cur)) return \"type\";\n    if (contains(builtin, cur) || isReservedIdentifier && isReservedIdentifier(cur)) {\n      if (contains(blockKeywords, cur)) curPunc = \"newstatement\";\n      return \"builtin\";\n    }\n    if (contains(atoms, cur)) return \"atom\";\n    return \"variable\";\n  }\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false,\n        next,\n        end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n      return \"string\";\n    };\n  }\n  function tokenComment(stream, state) {\n    var maybeEnd = false,\n      ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = ch == \"*\";\n    }\n    return \"comment\";\n  }\n  function maybeEOL(stream, state) {\n    if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context)) state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);\n  }\n\n  // Interface\n\n  return {\n    name: parserConfig.name,\n    startState: function startState(indentUnit) {\n      return {\n        tokenize: null,\n        context: new Context(-indentUnit, 0, \"top\", null, false),\n        indented: 0,\n        startOfLine: true,\n        prevToken: null\n      };\n    },\n    token: function token(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) {\n        maybeEOL(stream, state);\n        return null;\n      }\n      curPunc = isDefKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n      if (curPunc == \";\" || curPunc == \":\" || curPunc == \",\" && stream.match(/^\\s*(?:\\/\\/.*)?$/, false)) while (state.context.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      } else if (curPunc == ctx.type) popContext(state);else if (indentStatements && ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != \";\" || ctx.type == \"statement\" && curPunc == \"newstatement\")) {\n        pushContext(state, stream.column(), \"statement\", stream.current());\n      }\n      if (style == \"variable\" && (state.prevToken == \"def\" || parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) && isTopScope(state.context) && stream.match(/^\\s*\\(/, false))) style = \"def\";\n      if (hooks.token) {\n        var result = hooks.token(stream, state, style);\n        if (result !== undefined) style = result;\n      }\n      if (style == \"def\" && parserConfig.styleDefs === false) style = \"variable\";\n      state.startOfLine = false;\n      state.prevToken = isDefKeyword ? \"def\" : style || curPunc;\n      maybeEOL(stream, state);\n      return style;\n    },\n    indent: function indent(state, textAfter, context) {\n      if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return null;\n      var ctx = state.context,\n        firstChar = textAfter && textAfter.charAt(0);\n      var closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      if (parserConfig.dontIndentStatements) while (ctx.type == \"statement\" && parserConfig.dontIndentStatements.test(ctx.info)) ctx = ctx.prev;\n      if (hooks.indent) {\n        var hook = hooks.indent(state, ctx, textAfter, context.unit);\n        if (typeof hook == \"number\") return hook;\n      }\n      var switchBlock = ctx.prev && ctx.prev.info == \"switch\";\n      if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {\n        while (ctx.type != \"top\" && ctx.type != \"}\") ctx = ctx.prev;\n        return ctx.indented;\n      }\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || context.unit);\n      if (ctx.align && (!dontAlignCalls || ctx.type != \")\")) return ctx.column + (closing ? 0 : 1);\n      if (ctx.type == \")\" && !closing) return ctx.indented + (statementIndentUnit || context.unit);\n      return ctx.indented + (closing ? 0 : context.unit) + (!closing && switchBlock && !/^(?:case|default)\\b/.test(textAfter) ? context.unit : 0);\n    },\n    languageData: _objectSpread({\n      indentOnInput: indentSwitch ? /^\\s*(?:case .*?:|default:|\\{\\}?|\\})$/ : /^\\s*[{}]$/,\n      commentTokens: {\n        line: \"//\",\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      },\n      autocomplete: Object.keys(keywords).concat(Object.keys(types)).concat(Object.keys(builtin)).concat(Object.keys(atoms))\n    }, parserConfig.languageData)\n  };\n}\n;\nfunction words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nfunction contains(words, word) {\n  if (typeof words === \"function\") {\n    return words(word);\n  } else {\n    return words.propertyIsEnumerable(word);\n  }\n}\nvar cKeywords = \"auto if break case register continue return default do sizeof \" + \"static else struct switch extern typedef union for goto while enum const \" + \"volatile inline restrict asm fortran\";\n\n// Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.\nvar cppKeywords = \"alignas alignof and and_eq audit axiom bitand bitor catch \" + \"class compl concept constexpr const_cast decltype delete dynamic_cast \" + \"explicit export final friend import module mutable namespace new noexcept \" + \"not not_eq operator or or_eq override private protected public \" + \"reinterpret_cast requires static_assert static_cast template this \" + \"thread_local throw try typeid typename using virtual xor xor_eq\";\nvar objCKeywords = \"bycopy byref in inout oneway out self super atomic nonatomic retain copy \" + \"readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd \" + \"@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class \" + \"@public @package @private @protected @required @optional @try @catch @finally @import \" + \"@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available\";\nvar objCBuiltins = \"FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION \" + \" NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER \" + \"NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION \" + \"NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT\";\n\n// Do not use this. Use the cTypes function below. This is global just to avoid\n// excessive calls when cTypes is being called multiple times during a parse.\nvar basicCTypes = words(\"int long char short double float unsigned signed \" + \"void bool\");\n\n// Do not use this. Use the objCTypes function below. This is global just to avoid\n// excessive calls when objCTypes is being called multiple times during a parse.\nvar basicObjCTypes = words(\"SEL instancetype id Class Protocol BOOL\");\n\n// Returns true if identifier is a \"C\" type.\n// C type is defined as those that are reserved by the compiler (basicTypes),\n// and those that end in _t (Reserved by POSIX for types)\n// http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html\nfunction cTypes(identifier) {\n  return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);\n}\n\n// Returns true if identifier is a \"Objective C\" type.\nfunction objCTypes(identifier) {\n  return cTypes(identifier) || contains(basicObjCTypes, identifier);\n}\nvar cBlockKeywords = \"case do else for if switch while struct enum union\";\nvar cDefKeywords = \"struct enum union\";\nfunction cppHook(stream, state) {\n  if (!state.startOfLine) return false;\n  for (var ch, next = null; ch = stream.peek();) {\n    if (ch == \"\\\\\" && stream.match(/^.$/)) {\n      next = cppHook;\n      break;\n    } else if (ch == \"/\" && stream.match(/^\\/[\\/\\*]/, false)) {\n      break;\n    }\n    stream.next();\n  }\n  state.tokenize = next;\n  return \"meta\";\n}\nfunction pointerHook(_stream, state) {\n  if (state.prevToken == \"type\") return \"type\";\n  return false;\n}\n\n// For C and C++ (and ObjC): identifiers starting with __\n// or _ followed by a capital letter are reserved for the compiler.\nfunction cIsReservedIdentifier(token) {\n  if (!token || token.length < 2) return false;\n  if (token[0] != '_') return false;\n  return token[1] == '_' || token[1] !== token[1].toLowerCase();\n}\nfunction cpp14Literal(stream) {\n  stream.eatWhile(/[\\w\\.']/);\n  return \"number\";\n}\nfunction cpp11StringHook(stream, state) {\n  stream.backUp(1);\n  // Raw strings.\n  if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {\n    var match = stream.match(/^\"([^\\s\\\\()]{0,16})\\(/);\n    if (!match) {\n      return false;\n    }\n    state.cpp11RawStringDelim = match[1];\n    state.tokenize = tokenRawString;\n    return tokenRawString(stream, state);\n  }\n  // Unicode strings/chars.\n  if (stream.match(/^(?:u8|u|U|L)/)) {\n    if (stream.match(/^[\"']/, /* eat */false)) {\n      return \"string\";\n    }\n    return false;\n  }\n  // Ignore this hook.\n  stream.next();\n  return false;\n}\nfunction cppLooksLikeConstructor(word) {\n  var lastTwo = /(\\w+)::~?(\\w+)$/.exec(word);\n  return lastTwo && lastTwo[1] == lastTwo[2];\n}\n\n// C#-style strings where \"\" escapes a quote.\nfunction tokenAtString(stream, state) {\n  var next;\n  while ((next = stream.next()) != null) {\n    if (next == '\"' && !stream.eat('\"')) {\n      state.tokenize = null;\n      break;\n    }\n  }\n  return \"string\";\n}\n\n// C++11 raw string literal is <prefix>\"<delim>( anything )<delim>\", where\n// <delim> can be a string up to 16 characters long.\nfunction tokenRawString(stream, state) {\n  // Escape characters that have special regex meanings.\n  var delim = state.cpp11RawStringDelim.replace(/[^\\w\\s]/g, '\\\\$&');\n  var match = stream.match(new RegExp(\".*?\\\\)\" + delim + '\"'));\n  if (match) state.tokenize = null;else stream.skipToEnd();\n  return \"string\";\n}\nexport var c = clike({\n  name: \"c\",\n  keywords: words(cKeywords),\n  types: cTypes,\n  blockKeywords: words(cBlockKeywords),\n  defKeywords: words(cDefKeywords),\n  typeFirstDefinitions: true,\n  atoms: words(\"NULL true false\"),\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook\n  }\n});\nexport var cpp = clike({\n  name: \"cpp\",\n  keywords: words(cKeywords + \" \" + cppKeywords),\n  types: cTypes,\n  blockKeywords: words(cBlockKeywords + \" class try catch\"),\n  defKeywords: words(cDefKeywords + \" class namespace\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false NULL nullptr\"),\n  dontIndentStatements: /^template$/,\n  isIdentifierChar: /[\\w\\$_~\\xa1-\\uffff]/,\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook,\n    \"u\": cpp11StringHook,\n    \"U\": cpp11StringHook,\n    \"L\": cpp11StringHook,\n    \"R\": cpp11StringHook,\n    \"0\": cpp14Literal,\n    \"1\": cpp14Literal,\n    \"2\": cpp14Literal,\n    \"3\": cpp14Literal,\n    \"4\": cpp14Literal,\n    \"5\": cpp14Literal,\n    \"6\": cpp14Literal,\n    \"7\": cpp14Literal,\n    \"8\": cpp14Literal,\n    \"9\": cpp14Literal,\n    token: function token(stream, state, style) {\n      if (style == \"variable\" && stream.peek() == \"(\" && (state.prevToken == \";\" || state.prevToken == null || state.prevToken == \"}\") && cppLooksLikeConstructor(stream.current())) return \"def\";\n    }\n  },\n  namespaceSeparator: \"::\"\n});\nexport var java = clike({\n  name: \"java\",\n  keywords: words(\"abstract assert break case catch class const continue default \" + \"do else enum extends final finally for goto if implements import \" + \"instanceof interface native new package private protected public \" + \"return static strictfp super switch synchronized this throw throws transient \" + \"try volatile while @interface\"),\n  types: words(\"var byte short int long float double boolean char void Boolean Byte Character Double Float \" + \"Integer Long Number Object Short String StringBuffer StringBuilder Void\"),\n  blockKeywords: words(\"catch class do else finally for if switch try while\"),\n  defKeywords: words(\"class interface enum @interface\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null\"),\n  number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+\\.?\\d*|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n  hooks: {\n    \"@\": function _(stream) {\n      // Don't match the @interface keyword.\n      if (stream.match('interface', false)) return false;\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '\"': function _(stream, state) {\n      if (!stream.match(/\"\"$/)) return false;\n      state.tokenize = tokenTripleString;\n      return state.tokenize(stream, state);\n    }\n  }\n});\nexport var csharp = clike({\n  name: \"csharp\",\n  keywords: words(\"abstract as async await base break case catch checked class const continue\" + \" default delegate do else enum event explicit extern finally fixed for\" + \" foreach goto if implicit in interface internal is lock namespace new\" + \" operator out override params private protected public readonly ref return sealed\" + \" sizeof stackalloc static struct switch this throw try typeof unchecked\" + \" unsafe using virtual void volatile while add alias ascending descending dynamic from get\" + \" global group into join let orderby partial remove select set value var yield\"),\n  types: words(\"Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func\" + \" Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32\" + \" UInt64 bool byte char decimal double short int long object\" + \" sbyte float string ushort uint ulong\"),\n  blockKeywords: words(\"catch class do else finally for foreach if struct switch try while\"),\n  defKeywords: words(\"class interface namespace struct var\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null\"),\n  hooks: {\n    \"@\": function _(stream, state) {\n      if (stream.eat('\"')) {\n        state.tokenize = tokenAtString;\n        return tokenAtString(stream, state);\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    }\n  }\n});\nfunction tokenTripleString(stream, state) {\n  var escaped = false;\n  while (!stream.eol()) {\n    if (!escaped && stream.match('\"\"\"')) {\n      state.tokenize = null;\n      break;\n    }\n    escaped = stream.next() == \"\\\\\" && !escaped;\n  }\n  return \"string\";\n}\nfunction tokenNestedComment(depth) {\n  return function (stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"*\" && stream.eat(\"/\")) {\n        if (depth == 1) {\n          state.tokenize = null;\n          break;\n        } else {\n          state.tokenize = tokenNestedComment(depth - 1);\n          return state.tokenize(stream, state);\n        }\n      } else if (ch == \"/\" && stream.eat(\"*\")) {\n        state.tokenize = tokenNestedComment(depth + 1);\n        return state.tokenize(stream, state);\n      }\n    }\n    return \"comment\";\n  };\n}\nexport var scala = clike({\n  name: \"scala\",\n  keywords: words( /* scala */\n  \"abstract case catch class def do else extends final finally for forSome if \" + \"implicit import lazy match new null object override package private protected return \" + \"sealed super this throw trait try type val var while with yield _ \" + /* package scala */\n  \"assert assume require print println printf readLine readBoolean readByte readShort \" + \"readChar readInt readLong readFloat readDouble\"),\n  types: words(\"AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either \" + \"Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable \" + \"Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering \" + \"Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder \" + \"StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector \" + /* package java.lang */\n  \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" + \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" + \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" + \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void\"),\n  multiLineStrings: true,\n  blockKeywords: words(\"catch class enum do else finally for forSome if match switch try while\"),\n  defKeywords: words(\"class enum def object package trait type val var\"),\n  atoms: words(\"true false null\"),\n  indentStatements: false,\n  indentSwitch: false,\n  isOperatorChar: /[+\\-*&%=<>!?|\\/#:@]/,\n  hooks: {\n    \"@\": function _(stream) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '\"': function _(stream, state) {\n      if (!stream.match('\"\"')) return false;\n      state.tokenize = tokenTripleString;\n      return state.tokenize(stream, state);\n    },\n    \"'\": function _(stream) {\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      return \"atom\";\n    },\n    \"=\": function _(stream, state) {\n      var cx = state.context;\n      if (cx.type == \"}\" && cx.align && stream.eat(\">\")) {\n        state.context = new Context(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);\n        return \"operator\";\n      } else {\n        return false;\n      }\n    },\n    \"/\": function _(stream, state) {\n      if (!stream.eat(\"*\")) return false;\n      state.tokenize = tokenNestedComment(1);\n      return state.tokenize(stream, state);\n    }\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', '\"\"\"']\n    }\n  }\n});\nfunction tokenKotlinString(tripleString) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while (!stream.eol()) {\n      if (!tripleString && !escaped && stream.match('\"')) {\n        end = true;\n        break;\n      }\n      if (tripleString && stream.match('\"\"\"')) {\n        end = true;\n        break;\n      }\n      next = stream.next();\n      if (!escaped && next == \"$\" && stream.match('{')) stream.skipTo(\"}\");\n      escaped = !escaped && next == \"\\\\\" && !tripleString;\n    }\n    if (end || !tripleString) state.tokenize = null;\n    return \"string\";\n  };\n}\nexport var kotlin = clike({\n  name: \"kotlin\",\n  keywords: words( /*keywords*/\n  \"package as typealias class interface this super val operator \" + \"var fun for is in This throw return annotation \" + \"break continue object if else while do try when !in !is as? \" + /*soft keywords*/\n  \"file import where by get set abstract enum open inner override private public internal \" + \"protected catch finally out final vararg reified dynamic companion constructor init \" + \"sealed field property receiver param sparam lateinit data inline noinline tailrec \" + \"external annotation crossinline const operator infix suspend actual expect setparam\"),\n  types: words( /* package java.lang */\n  \"Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable \" + \"Compiler Double Exception Float Integer Long Math Number Object Package Pair Process \" + \"Runtime Runnable SecurityManager Short StackTraceElement StrictMath String \" + \"StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray \" + \"ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy \" + \"LazyThreadSafetyMode LongArray Nothing ShortArray Unit\"),\n  intendSwitch: false,\n  indentStatements: false,\n  multiLineStrings: true,\n  number: /^(?:0x[a-f\\d_]+|0b[01_]+|(?:[\\d_]+(\\.\\d+)?|\\.\\d+)(?:e[-+]?[\\d_]+)?)(u|ll?|l|f)?/i,\n  blockKeywords: words(\"catch class do else finally for if where try while enum\"),\n  defKeywords: words(\"class val var object interface fun\"),\n  atoms: words(\"true false null this\"),\n  hooks: {\n    \"@\": function _(stream) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '*': function _(_stream, state) {\n      return state.prevToken == '.' ? 'variable' : 'operator';\n    },\n    '\"': function _(stream, state) {\n      state.tokenize = tokenKotlinString(stream.match('\"\"'));\n      return state.tokenize(stream, state);\n    },\n    \"/\": function _(stream, state) {\n      if (!stream.eat(\"*\")) return false;\n      state.tokenize = tokenNestedComment(1);\n      return state.tokenize(stream, state);\n    },\n    indent: function indent(state, ctx, textAfter, indentUnit) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      if ((state.prevToken == \"}\" || state.prevToken == \")\") && textAfter == \"\") return state.indented;\n      if (state.prevToken == \"operator\" && textAfter != \"}\" && state.context.type != \"}\" || state.prevToken == \"variable\" && firstChar == \".\" || (state.prevToken == \"}\" || state.prevToken == \")\") && firstChar == \".\") return indentUnit * 2 + ctx.indented;\n      if (ctx.align && ctx.type == \"}\") return ctx.indented + (state.context.type == (textAfter || \"\").charAt(0) ? 0 : indentUnit);\n    }\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', '\"\"\"']\n    }\n  }\n});\nexport var shader = clike({\n  name: \"shader\",\n  keywords: words(\"sampler1D sampler2D sampler3D samplerCube \" + \"sampler1DShadow sampler2DShadow \" + \"const attribute uniform varying \" + \"break continue discard return \" + \"for while do if else struct \" + \"in out inout\"),\n  types: words(\"float int bool void \" + \"vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 \" + \"mat2 mat3 mat4\"),\n  blockKeywords: words(\"for while do if else struct\"),\n  builtin: words(\"radians degrees sin cos tan asin acos atan \" + \"pow exp log exp2 sqrt inversesqrt \" + \"abs sign floor ceil fract mod min max clamp mix step smoothstep \" + \"length distance dot cross normalize ftransform faceforward \" + \"reflect refract matrixCompMult \" + \"lessThan lessThanEqual greaterThan greaterThanEqual \" + \"equal notEqual any all not \" + \"texture1D texture1DProj texture1DLod texture1DProjLod \" + \"texture2D texture2DProj texture2DLod texture2DProjLod \" + \"texture3D texture3DProj texture3DLod texture3DProjLod \" + \"textureCube textureCubeLod \" + \"shadow1D shadow2D shadow1DProj shadow2DProj \" + \"shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod \" + \"dFdx dFdy fwidth \" + \"noise1 noise2 noise3 noise4\"),\n  atoms: words(\"true false \" + \"gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex \" + \"gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 \" + \"gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 \" + \"gl_FogCoord gl_PointCoord \" + \"gl_Position gl_PointSize gl_ClipVertex \" + \"gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor \" + \"gl_TexCoord gl_FogFragCoord \" + \"gl_FragCoord gl_FrontFacing \" + \"gl_FragData gl_FragDepth \" + \"gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix \" + \"gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse \" + \"gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse \" + \"gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose \" + \"gl_ProjectionMatrixInverseTranspose \" + \"gl_ModelViewProjectionMatrixInverseTranspose \" + \"gl_TextureMatrixInverseTranspose \" + \"gl_NormalScale gl_DepthRange gl_ClipPlane \" + \"gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel \" + \"gl_FrontLightModelProduct gl_BackLightModelProduct \" + \"gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ \" + \"gl_FogParameters \" + \"gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords \" + \"gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats \" + \"gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits \" + \"gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits \" + \"gl_MaxDrawBuffers\"),\n  indentSwitch: false,\n  hooks: {\n    \"#\": cppHook\n  }\n});\nexport var nesC = clike({\n  name: \"nesc\",\n  keywords: words(cKeywords + \" as atomic async call command component components configuration event generic \" + \"implementation includes interface module new norace nx_struct nx_union post provides \" + \"signal task uses abstract extends\"),\n  types: cTypes,\n  blockKeywords: words(cBlockKeywords),\n  atoms: words(\"null true false\"),\n  hooks: {\n    \"#\": cppHook\n  }\n});\nexport var objectiveC = clike({\n  name: \"objectivec\",\n  keywords: words(cKeywords + \" \" + objCKeywords),\n  types: objCTypes,\n  builtin: words(objCBuiltins),\n  blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized\"),\n  defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class\"),\n  dontIndentStatements: /^@.*$/,\n  typeFirstDefinitions: true,\n  atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook\n  }\n});\nexport var objectiveCpp = clike({\n  name: \"objectivecpp\",\n  keywords: words(cKeywords + \" \" + objCKeywords + \" \" + cppKeywords),\n  types: objCTypes,\n  builtin: words(objCBuiltins),\n  blockKeywords: words(cBlockKeywords + \" @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch\"),\n  defKeywords: words(cDefKeywords + \" @interface @implementation @protocol @class class namespace\"),\n  dontIndentStatements: /^@.*$|^template$/,\n  typeFirstDefinitions: true,\n  atoms: words(\"YES NO NULL Nil nil true false nullptr\"),\n  isReservedIdentifier: cIsReservedIdentifier,\n  hooks: {\n    \"#\": cppHook,\n    \"*\": pointerHook,\n    \"u\": cpp11StringHook,\n    \"U\": cpp11StringHook,\n    \"L\": cpp11StringHook,\n    \"R\": cpp11StringHook,\n    \"0\": cpp14Literal,\n    \"1\": cpp14Literal,\n    \"2\": cpp14Literal,\n    \"3\": cpp14Literal,\n    \"4\": cpp14Literal,\n    \"5\": cpp14Literal,\n    \"6\": cpp14Literal,\n    \"7\": cpp14Literal,\n    \"8\": cpp14Literal,\n    \"9\": cpp14Literal,\n    token: function token(stream, state, style) {\n      if (style == \"variable\" && stream.peek() == \"(\" && (state.prevToken == \";\" || state.prevToken == null || state.prevToken == \"}\") && cppLooksLikeConstructor(stream.current())) return \"def\";\n    }\n  },\n  namespaceSeparator: \"::\"\n});\nexport var squirrel = clike({\n  name: \"squirrel\",\n  keywords: words(\"base break clone continue const default delete enum extends function in class\" + \" foreach local resume return this throw typeof yield constructor instanceof static\"),\n  types: cTypes,\n  blockKeywords: words(\"case catch class else for foreach if switch try while\"),\n  defKeywords: words(\"function local class\"),\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null\"),\n  hooks: {\n    \"#\": cppHook\n  }\n});\n\n// Ceylon Strings need to deal with interpolation\nvar stringTokenizer = null;\nfunction tokenCeylonString(type) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while (!stream.eol()) {\n      if (!escaped && stream.match('\"') && (type == \"single\" || stream.match('\"\"'))) {\n        end = true;\n        break;\n      }\n      if (!escaped && stream.match('``')) {\n        stringTokenizer = tokenCeylonString(type);\n        end = true;\n        break;\n      }\n      next = stream.next();\n      escaped = type == \"single\" && !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = null;\n    return \"string\";\n  };\n}\nexport var ceylon = clike({\n  name: \"ceylon\",\n  keywords: words(\"abstracts alias assembly assert assign break case catch class continue dynamic else\" + \" exists extends finally for function given if import in interface is let module new\" + \" nonempty object of out outer package return satisfies super switch then this throw\" + \" try value void while\"),\n  types: function types(word) {\n    // In Ceylon all identifiers that start with an uppercase are types\n    var first = word.charAt(0);\n    return first === first.toUpperCase() && first !== first.toLowerCase();\n  },\n  blockKeywords: words(\"case catch class dynamic else finally for function if interface module new object switch try while\"),\n  defKeywords: words(\"class dynamic function interface module object package value\"),\n  builtin: words(\"abstract actual aliased annotation by default deprecated doc final formal late license\" + \" native optional sealed see serializable shared suppressWarnings tagged throws variable\"),\n  isPunctuationChar: /[\\[\\]{}\\(\\),;\\:\\.`]/,\n  isOperatorChar: /[+\\-*&%=<>!?|^~:\\/]/,\n  numberStart: /[\\d#$]/,\n  number: /^(?:#[\\da-fA-F_]+|\\$[01_]+|[\\d_]+[kMGTPmunpf]?|[\\d_]+\\.[\\d_]+(?:[eE][-+]?\\d+|[kMGTPmunpf]|)|)/i,\n  multiLineStrings: true,\n  typeFirstDefinitions: true,\n  atoms: words(\"true false null larger smaller equal empty finished\"),\n  indentSwitch: false,\n  styleDefs: false,\n  hooks: {\n    \"@\": function _(stream) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    },\n    '\"': function _(stream, state) {\n      state.tokenize = tokenCeylonString(stream.match('\"\"') ? \"triple\" : \"single\");\n      return state.tokenize(stream, state);\n    },\n    '`': function _(stream, state) {\n      if (!stringTokenizer || !stream.match('`')) return false;\n      state.tokenize = stringTokenizer;\n      stringTokenizer = null;\n      return state.tokenize(stream, state);\n    },\n    \"'\": function _(stream) {\n      stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n      return \"atom\";\n    },\n    token: function token(_stream, state, style) {\n      if ((style == \"variable\" || style == \"type\") && state.prevToken == \".\") {\n        return \"variableName.special\";\n      }\n    }\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", \"'\", '\"', '\"\"\"']\n    }\n  }\n});\nfunction pushInterpolationStack(state) {\n  (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n}\nfunction popInterpolationStack(state) {\n  return (state.interpolationStack || (state.interpolationStack = [])).pop();\n}\nfunction sizeInterpolationStack(state) {\n  return state.interpolationStack ? state.interpolationStack.length : 0;\n}\nfunction tokenDartString(quote, stream, state, raw) {\n  var tripleQuoted = false;\n  if (stream.eat(quote)) {\n    if (stream.eat(quote)) tripleQuoted = true;else return \"string\"; //empty string\n  }\n\n  function tokenStringHelper(stream, state) {\n    var escaped = false;\n    while (!stream.eol()) {\n      if (!raw && !escaped && stream.peek() == \"$\") {\n        pushInterpolationStack(state);\n        state.tokenize = tokenInterpolation;\n        return \"string\";\n      }\n      var next = stream.next();\n      if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n        state.tokenize = null;\n        break;\n      }\n      escaped = !raw && !escaped && next == \"\\\\\";\n    }\n    return \"string\";\n  }\n  state.tokenize = tokenStringHelper;\n  return tokenStringHelper(stream, state);\n}\nfunction tokenInterpolation(stream, state) {\n  stream.eat(\"$\");\n  if (stream.eat(\"{\")) {\n    // let clike handle the content of ${...},\n    // we take over again when \"}\" appears (see hooks).\n    state.tokenize = null;\n  } else {\n    state.tokenize = tokenInterpolationIdentifier;\n  }\n  return null;\n}\nfunction tokenInterpolationIdentifier(stream, state) {\n  stream.eatWhile(/[\\w_]/);\n  state.tokenize = popInterpolationStack(state);\n  return \"variable\";\n}\nexport var dart = clike({\n  name: \"dart\",\n  keywords: words(\"this super static final const abstract class extends external factory \" + \"implements mixin get native set typedef with enum throw rethrow \" + \"assert break case continue default in return new deferred async await covariant \" + \"try catch finally do else for if switch while import library export \" + \"part of show hide is as extension on yield late required\"),\n  blockKeywords: words(\"try catch finally do else for if switch while\"),\n  builtin: words(\"void bool num int double dynamic var String Null Never\"),\n  atoms: words(\"true false null\"),\n  hooks: {\n    \"@\": function _(stream) {\n      stream.eatWhile(/[\\w\\$_\\.]/);\n      return \"meta\";\n    },\n    // custom string handling to deal with triple-quoted strings and string interpolation\n    \"'\": function _(stream, state) {\n      return tokenDartString(\"'\", stream, state, false);\n    },\n    \"\\\"\": function _(stream, state) {\n      return tokenDartString(\"\\\"\", stream, state, false);\n    },\n    \"r\": function r(stream, state) {\n      var peek = stream.peek();\n      if (peek == \"'\" || peek == \"\\\"\") {\n        return tokenDartString(stream.next(), stream, state, true);\n      }\n      return false;\n    },\n    \"}\": function _(_stream, state) {\n      // \"}\" is end of interpolation, if interpolation stack is non-empty\n      if (sizeInterpolationStack(state) > 0) {\n        state.tokenize = popInterpolationStack(state);\n        return null;\n      }\n      return false;\n    },\n    \"/\": function _(stream, state) {\n      if (!stream.eat(\"*\")) return false;\n      state.tokenize = tokenNestedComment(1);\n      return state.tokenize(stream, state);\n    },\n    token: function token(stream, _, style) {\n      if (style == \"variable\") {\n        // Assume uppercase symbols are classes\n        var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$', 'g');\n        if (isUpper.test(stream.current())) {\n          return 'type';\n        }\n      }\n    }\n  }\n});"],"sourceRoot":""}