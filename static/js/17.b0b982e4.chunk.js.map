{"version":3,"sources":["D:/react_app/app_1/node_modules/@lezer/json/dist/index.es.js","D:/react_app/app_1/node_modules/@codemirror/lang-json/dist/index.js"],"names":["jsonHighlighting","Object","highlight_dist","String","string","Number","number","True False","bool","PropertyName","propertyName","Null","null",",","separator","[ ]","squareBracket","{ }","brace","parser","dist","deserialize","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","propSources","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","JsonText","tokenPrec","__webpack_require__","d","__webpack_exports__","json","jsonLanguage","jsonParseLinter","view","JSON","parse","state","doc","toString","e","SyntaxError","pos","error","m","message","match","Math","min","length","line","from","getErrorPosition","severity","to","language_dist","define","name","configure","props","add","except","Array","Object Array","languageData","closeBrackets","brackets","indentOnInput"],"mappings":"qHAEAA,EAAuBC,OAAAC,EAAA,EAAAD,CAAS,CAChCE,OAAUD,EAAA,EAAIE,OACdC,OAAUH,EAAA,EAAII,OACdC,aAAgBL,EAAA,EAAIM,KACpBC,aAAgBP,EAAA,EAAIQ,aACpBC,KAAQT,EAAA,EAAIU,KACZC,IAAOX,EAAA,EAAIY,UACXC,MAASb,EAAA,EAAIc,cACbC,MAASf,EAAA,EAAIgB,QAIbC,EAAaC,EAAA,EAAQC,YAAA,CACrBC,QAAA,GACAC,OAAA,mRACAC,UAAA,iGACAC,KAAA,kFACAC,UAAA,2FACAC,QAAA,GACAC,UAAA,mBAAgC,0BAA+B,SAC/DC,YAAA,CAAA7B,GACA8B,aAAA,IACAC,gBAAA,EACAC,UAAA,wkBACAC,WAAA,IACAC,SAAA,CACAC,SAAA,OAEAC,UAAA,WC9BAC,EAAAC,EAAAC,EAAA,yBAAAC,IAAAH,EAAAC,EAAAC,EAAA,iCAAAE,IAAAJ,EAAAC,EAAAC,EAAA,oCAAAG,IASA,IAAAA,EAAA,WACA,gBAAAC,GACA,IACAC,KAAAC,MAAAF,EAAAG,MAAAC,IAAAC,YACK,MAAAC,GACL,KAAAA,aAAAC,aAAA,MAAAD,EACA,IAAAE,EAWA,SAAAC,EAAAL,GACA,IAAAM,EACA,OAAAA,EAAAD,EAAAE,QAAAC,MAAA,sBAAAC,KAAAC,KAAAJ,EAAA,GAAAN,EAAAW,SACAL,EAAAD,EAAAE,QAAAC,MAAA,+BAAAC,KAAAC,IAAAV,EAAAY,MAAAN,EAAA,IAAAO,OAAAP,EAAA,KAAAN,EAAAW,QACA,EAfAG,CAAAZ,EAAAN,EAAAG,MAAAC,KACA,QACAa,KAAAT,EACAG,QAAAL,EAAAK,QACAQ,SAAA,QACAC,GAAAZ,IAGA,WAaA,IAAAV,EAAgCuB,EAAA,EAAUC,OAAA,CAC1CC,KAAA,OACA/C,OAAuBA,EAAMgD,UAAA,CAC7BC,MAAA,CAAyBJ,EAAA,EAAcK,IAAA,CACvCpE,OAA2BA,OAAA+D,EAAA,EAAA/D,CAAe,CAC1CqE,OAAA,WAEAC,MAA0BtE,OAAA+D,EAAA,EAAA/D,CAAe,CACzCqE,OAAA,aAEqBN,EAAA,EAAYK,IAAA,CACjCG,eAAsBR,EAAA,OAGtBS,aAAA,CACAC,cAAA,CACAC,SAAA,SAAwB,MAExBC,cAAA,iBAMA,SAAApC,IACA,WAAawB,EAAA,EAAevB","file":"static/js/17.b0b982e4.chunk.js","sourcesContent":["import { LRParser } from '@lezer/lr';\nimport { styleTags, tags } from '@lezer/highlight';\nvar jsonHighlighting = styleTags({\n  String: tags.string,\n  Number: tags.number,\n  \"True False\": tags.bool,\n  PropertyName: tags.propertyName,\n  Null: tags.null,\n  \",\": tags.separator,\n  \"[ ]\": tags.squareBracket,\n  \"{ }\": tags.brace\n});\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nvar parser = LRParser.deserialize({\n  version: 14,\n  states: \"$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j\",\n  stateData: \"#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O\",\n  goto: \"!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R\",\n  nodeNames: \"âš  JsonText True False Null Number String } { Object Property PropertyName ] [ Array\",\n  maxTerm: 25,\n  nodeProps: [[\"openedBy\", 7, \"{\", 12, \"[\"], [\"closedBy\", 8, \"}\", 13, \"]\"]],\n  propSources: [jsonHighlighting],\n  skippedNodes: [0],\n  repeatNodeCount: 2,\n  tokenData: \"(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~\",\n  tokenizers: [0],\n  topRules: {\n    \"JsonText\": [0, 1]\n  },\n  tokenPrec: 0\n});\nexport { parser };","import { parser } from '@lezer/json';\nimport { LRLanguage, indentNodeProp, continuedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nCalls\n[`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\non the document and, if that throws an error, reports it as a\nsingle diagnostic.\n*/\nvar jsonParseLinter = function jsonParseLinter() {\n  return function (view) {\n    try {\n      JSON.parse(view.state.doc.toString());\n    } catch (e) {\n      if (!(e instanceof SyntaxError)) throw e;\n      var pos = getErrorPosition(e, view.state.doc);\n      return [{\n        from: pos,\n        message: e.message,\n        severity: 'error',\n        to: pos\n      }];\n    }\n    return [];\n  };\n};\nfunction getErrorPosition(error, doc) {\n  var m;\n  if (m = error.message.match(/at position (\\d+)/)) return Math.min(+m[1], doc.length);\n  if (m = error.message.match(/at line (\\d+) column (\\d+)/)) return Math.min(doc.line(+m[1]).from + +m[2] - 1, doc.length);\n  return 0;\n}\n\n/**\nA language provider that provides JSON parsing.\n*/\nvar jsonLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"json\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      Object: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\}/\n      }),\n      Array: /*@__PURE__*/continuedIndent({\n        except: /^\\s*\\]/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"Object Array\": foldInside\n    })]\n  }),\n  languageData: {\n    closeBrackets: {\n      brackets: [\"[\", \"{\", '\"']\n    },\n    indentOnInput: /^\\s*[\\}\\]]$/\n  }\n});\n/**\nJSON language support.\n*/\nfunction json() {\n  return new LanguageSupport(jsonLanguage);\n}\nexport { json, jsonLanguage, jsonParseLinter };"],"sourceRoot":""}