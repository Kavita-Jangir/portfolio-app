{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/simple-mode.js","D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/dockerfile.js"],"names":["simpleMode","states","ensureState","states_","meta","languageData","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","indent","dedent","name","startState","pending","copyState","s","slice","stack","token","tokenFunction","indentFunction","Error","next","this","regex","val","caret","flags","RegExp","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","j","backUp","join","textAfter","dontIndentStates","doneIndentState","indexOf","rules","scan","dedentIfLineStart","m","exec","__webpack_require__","d","__webpack_exports__","r","dockerFile","_simple_mode_js__WEBPACK_IMPORTED_MODULE_0__","from","fromRegex","shells","shellsAsArrayRegex","expose","exposeRegex","instructionRegex","concat","instructionOnlyLine","instructionWithArguments","Object","start","single","double","array","arguments","commentTokens","line"],"mappings":"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","file":"static/js/13.0395b2e3.chunk.js","sourcesContent":["export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {},\n    meta = states.languageData || {},\n    hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [],\n      orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function startState() {\n      return {\n        state: \"start\",\n        pending: null,\n        indent: hasIndentation ? [] : null\n      };\n    },\n    copyState: function copyState(state) {\n      var s = {\n        state: state.state,\n        pending: state.pending,\n        indent: state.indent && state.indent.slice(0)\n      };\n      if (state.stack) s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  };\n}\n;\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val;\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++) result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\nfunction tokenFunction(states) {\n  return function (stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n        if (rule.data.indent) state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent) state.indent.pop();\n        var token = rule.token;\n        if (token && token.apply) token = token(matches);\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++) if (matches[j]) state.pending.push({\n            text: matches[j],\n            token: rule.token[j - 1]\n          });\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\nfunction indentFunction(states, meta) {\n  return function (state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1) return null;\n    var pos = state.indent.length - 1,\n      rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}","import { simpleMode } from \"./simple-mode.js\";\nvar from = \"from\";\nvar fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\nvar shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\nvar shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\nvar expose = \"expose\";\nvar exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\nvar others = [\"arg\", \"from\", \"maintainer\", \"label\", \"env\", \"add\", \"copy\", \"volume\", \"user\", \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n  instructionRegex = \"(\" + instructions.join('|') + \")\",\n  instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n  instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\nexport var dockerFile = simpleMode({\n  start: [\n  // Block comment: This is a line starting with a comment\n  {\n    regex: /^\\s*#.*$/,\n    sol: true,\n    token: \"comment\"\n  }, {\n    regex: fromRegex,\n    token: [null, \"keyword\"],\n    sol: true,\n    next: \"from\"\n  },\n  // Highlight an instruction without any arguments (for convenience)\n  {\n    regex: instructionOnlyLine,\n    token: [null, \"keyword\", null, \"error\"],\n    sol: true\n  }, {\n    regex: shellsAsArrayRegex,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"array\"\n  }, {\n    regex: exposeRegex,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"expose\"\n  },\n  // Highlight an instruction followed by arguments\n  {\n    regex: instructionWithArguments,\n    token: [null, \"keyword\", null],\n    sol: true,\n    next: \"arguments\"\n  }, {\n    regex: /./,\n    token: null\n  }],\n  from: [{\n    regex: /\\s*$/,\n    token: null,\n    next: \"start\"\n  }, {\n    // Line comment without instruction arguments is an error\n    regex: /(\\s*)(#.*)$/,\n    token: [null, \"error\"],\n    next: \"start\"\n  }, {\n    regex: /(\\s*\\S+\\s+)(as)/i,\n    token: [null, \"keyword\"],\n    next: \"start\"\n  },\n  // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  single: [{\n    regex: /(?:[^\\\\']|\\\\.)/,\n    token: \"string\"\n  }, {\n    regex: /'/,\n    token: \"string\",\n    pop: true\n  }],\n  double: [{\n    regex: /(?:[^\\\\\"]|\\\\.)/,\n    token: \"string\"\n  }, {\n    regex: /\"/,\n    token: \"string\",\n    pop: true\n  }],\n  array: [{\n    regex: /\\]/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n    token: \"string\"\n  }],\n  expose: [{\n    regex: /\\d+$/,\n    token: \"number\",\n    next: \"start\"\n  }, {\n    regex: /[^\\d]+$/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /\\d+/,\n    token: \"number\"\n  }, {\n    regex: /[^\\d]+/,\n    token: null\n  },\n  // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  arguments: [{\n    regex: /^\\s*#.*$/,\n    sol: true,\n    token: \"comment\"\n  }, {\n    regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /\"/,\n    token: \"string\",\n    push: \"double\"\n  }, {\n    regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n    token: \"string\",\n    next: \"start\"\n  }, {\n    regex: /'/,\n    token: \"string\",\n    push: \"single\"\n  }, {\n    regex: /[^#\"']+[\\\\`]$/,\n    token: null\n  }, {\n    regex: /[^#\"']+$/,\n    token: null,\n    next: \"start\"\n  }, {\n    regex: /[^#\"']+/,\n    token: null\n  },\n  // Fail safe return to start\n  {\n    token: null,\n    next: \"start\"\n  }],\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n});"],"sourceRoot":""}