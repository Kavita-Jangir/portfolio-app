{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/fortran.js"],"names":["words","array","keys","i","length","__webpack_require__","r","__webpack_exports__","d","fortran","keywords","builtins","dataTypes","isOperatorChar","litOperator","name","startState","tokenize","token","stream","state","eatSpace","style","match","quote","ch","next","skipToEnd","escaped","end","test","eatWhile","word","current","toLowerCase","hasOwnProperty"],"mappings":"2FAAA,SAAAA,EAAAC,GAEA,IADA,IAAAC,EAAA,GACAC,EAAA,EAAiBA,EAAAF,EAAAG,SAAkBD,EACnCD,EAAAD,EAAAE,KAAA,EAEA,OAAAD,EALAG,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAOA,IAAAC,EAAAV,EAAA,u1BACAW,EAAAX,EAAA,6zEACAY,EAAAZ,EAAA,2dACAa,EAAA,iBACAC,EAAA,gDAsDO,IAAAL,EAAA,CACPM,KAAA,UACAC,WAAA,WACA,OACAC,SAAA,OAGAC,MAAA,SAAAC,EAAAC,GACA,GAAAD,EAAAE,WAAA,YACA,IAAAC,GAAAF,EAAAH,UA9DA,SAAAE,EAAAC,GACA,GAAAD,EAAAI,MAAAT,GACA,iBAEA,IA8BAU,EA9BAC,EAAAN,EAAAO,OACA,QAAAD,EAEA,OADAN,EAAAQ,YACA,UAEA,QAAAF,GAAA,KAAAA,EAEA,OADAL,EAAAH,UAwBAO,EAxBAC,EAyBA,SAAAN,EAAAC,GAIA,IAHA,IACAM,EADAE,GAAA,EAEAC,GAAA,EACA,OAAAH,EAAAP,EAAAO,SAAA,CACA,GAAAA,GAAAF,IAAAI,EAAA,CACAC,GAAA,EACA,MAEAD,MAAA,MAAAF,EAGA,OADAG,GAAAD,IAAAR,EAAAH,SAAA,MACA,WApCAG,EAAAH,SAAAE,EAAAC,GAEA,iBAAAU,KAAAL,GACA,YAEA,QAAAK,KAAAL,GAEA,OADAN,EAAAY,SAAA,UACA,SAEA,GAAAlB,EAAAiB,KAAAL,GAEA,OADAN,EAAAY,SAAAlB,GACA,WAEAM,EAAAY,SAAA,WACA,IAAAC,EAAAb,EAAAc,UAAAC,cACA,OAAAxB,EAAAyB,eAAAH,GACA,UAEArB,EAAAwB,eAAAH,IAAApB,EAAAuB,eAAAH,GACA,UAEA,aA8BAb,EAAAC,GACA,OAAAE","file":"static/js/46.c76dcc95.chunk.js","sourcesContent":["function words(array) {\n  var keys = {};\n  for (var i = 0; i < array.length; ++i) {\n    keys[array[i]] = true;\n  }\n  return keys;\n}\nvar keywords = words([\"abstract\", \"accept\", \"allocatable\", \"allocate\", \"array\", \"assign\", \"asynchronous\", \"backspace\", \"bind\", \"block\", \"byte\", \"call\", \"case\", \"class\", \"close\", \"common\", \"contains\", \"continue\", \"cycle\", \"data\", \"deallocate\", \"decode\", \"deferred\", \"dimension\", \"do\", \"elemental\", \"else\", \"encode\", \"end\", \"endif\", \"entry\", \"enumerator\", \"equivalence\", \"exit\", \"external\", \"extrinsic\", \"final\", \"forall\", \"format\", \"function\", \"generic\", \"go\", \"goto\", \"if\", \"implicit\", \"import\", \"include\", \"inquire\", \"intent\", \"interface\", \"intrinsic\", \"module\", \"namelist\", \"non_intrinsic\", \"non_overridable\", \"none\", \"nopass\", \"nullify\", \"open\", \"optional\", \"options\", \"parameter\", \"pass\", \"pause\", \"pointer\", \"print\", \"private\", \"program\", \"protected\", \"public\", \"pure\", \"read\", \"recursive\", \"result\", \"return\", \"rewind\", \"save\", \"select\", \"sequence\", \"stop\", \"subroutine\", \"target\", \"then\", \"to\", \"type\", \"use\", \"value\", \"volatile\", \"where\", \"while\", \"write\"]);\nvar builtins = words([\"abort\", \"abs\", \"access\", \"achar\", \"acos\", \"adjustl\", \"adjustr\", \"aimag\", \"aint\", \"alarm\", \"all\", \"allocated\", \"alog\", \"amax\", \"amin\", \"amod\", \"and\", \"anint\", \"any\", \"asin\", \"associated\", \"atan\", \"besj\", \"besjn\", \"besy\", \"besyn\", \"bit_size\", \"btest\", \"cabs\", \"ccos\", \"ceiling\", \"cexp\", \"char\", \"chdir\", \"chmod\", \"clog\", \"cmplx\", \"command_argument_count\", \"complex\", \"conjg\", \"cos\", \"cosh\", \"count\", \"cpu_time\", \"cshift\", \"csin\", \"csqrt\", \"ctime\", \"c_funloc\", \"c_loc\", \"c_associated\", \"c_null_ptr\", \"c_null_funptr\", \"c_f_pointer\", \"c_null_char\", \"c_alert\", \"c_backspace\", \"c_form_feed\", \"c_new_line\", \"c_carriage_return\", \"c_horizontal_tab\", \"c_vertical_tab\", \"dabs\", \"dacos\", \"dasin\", \"datan\", \"date_and_time\", \"dbesj\", \"dbesj\", \"dbesjn\", \"dbesy\", \"dbesy\", \"dbesyn\", \"dble\", \"dcos\", \"dcosh\", \"ddim\", \"derf\", \"derfc\", \"dexp\", \"digits\", \"dim\", \"dint\", \"dlog\", \"dlog\", \"dmax\", \"dmin\", \"dmod\", \"dnint\", \"dot_product\", \"dprod\", \"dsign\", \"dsinh\", \"dsin\", \"dsqrt\", \"dtanh\", \"dtan\", \"dtime\", \"eoshift\", \"epsilon\", \"erf\", \"erfc\", \"etime\", \"exit\", \"exp\", \"exponent\", \"extends_type_of\", \"fdate\", \"fget\", \"fgetc\", \"float\", \"floor\", \"flush\", \"fnum\", \"fputc\", \"fput\", \"fraction\", \"fseek\", \"fstat\", \"ftell\", \"gerror\", \"getarg\", \"get_command\", \"get_command_argument\", \"get_environment_variable\", \"getcwd\", \"getenv\", \"getgid\", \"getlog\", \"getpid\", \"getuid\", \"gmtime\", \"hostnm\", \"huge\", \"iabs\", \"iachar\", \"iand\", \"iargc\", \"ibclr\", \"ibits\", \"ibset\", \"ichar\", \"idate\", \"idim\", \"idint\", \"idnint\", \"ieor\", \"ierrno\", \"ifix\", \"imag\", \"imagpart\", \"index\", \"int\", \"ior\", \"irand\", \"isatty\", \"ishft\", \"ishftc\", \"isign\", \"iso_c_binding\", \"is_iostat_end\", \"is_iostat_eor\", \"itime\", \"kill\", \"kind\", \"lbound\", \"len\", \"len_trim\", \"lge\", \"lgt\", \"link\", \"lle\", \"llt\", \"lnblnk\", \"loc\", \"log\", \"logical\", \"long\", \"lshift\", \"lstat\", \"ltime\", \"matmul\", \"max\", \"maxexponent\", \"maxloc\", \"maxval\", \"mclock\", \"merge\", \"move_alloc\", \"min\", \"minexponent\", \"minloc\", \"minval\", \"mod\", \"modulo\", \"mvbits\", \"nearest\", \"new_line\", \"nint\", \"not\", \"or\", \"pack\", \"perror\", \"precision\", \"present\", \"product\", \"radix\", \"rand\", \"random_number\", \"random_seed\", \"range\", \"real\", \"realpart\", \"rename\", \"repeat\", \"reshape\", \"rrspacing\", \"rshift\", \"same_type_as\", \"scale\", \"scan\", \"second\", \"selected_int_kind\", \"selected_real_kind\", \"set_exponent\", \"shape\", \"short\", \"sign\", \"signal\", \"sinh\", \"sin\", \"sleep\", \"sngl\", \"spacing\", \"spread\", \"sqrt\", \"srand\", \"stat\", \"sum\", \"symlnk\", \"system\", \"system_clock\", \"tan\", \"tanh\", \"time\", \"tiny\", \"transfer\", \"transpose\", \"trim\", \"ttynam\", \"ubound\", \"umask\", \"unlink\", \"unpack\", \"verify\", \"xor\", \"zabs\", \"zcos\", \"zexp\", \"zlog\", \"zsin\", \"zsqrt\"]);\nvar dataTypes = words([\"c_bool\", \"c_char\", \"c_double\", \"c_double_complex\", \"c_float\", \"c_float_complex\", \"c_funptr\", \"c_int\", \"c_int16_t\", \"c_int32_t\", \"c_int64_t\", \"c_int8_t\", \"c_int_fast16_t\", \"c_int_fast32_t\", \"c_int_fast64_t\", \"c_int_fast8_t\", \"c_int_least16_t\", \"c_int_least32_t\", \"c_int_least64_t\", \"c_int_least8_t\", \"c_intmax_t\", \"c_intptr_t\", \"c_long\", \"c_long_double\", \"c_long_double_complex\", \"c_long_long\", \"c_ptr\", \"c_short\", \"c_signed_char\", \"c_size_t\", \"character\", \"complex\", \"double\", \"integer\", \"logical\", \"real\"]);\nvar isOperatorChar = /[+\\-*&=<>\\/\\:]/;\nvar litOperator = /^\\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\\./i;\nfunction tokenBase(stream, state) {\n  if (stream.match(litOperator)) {\n    return 'operator';\n  }\n  var ch = stream.next();\n  if (ch == \"!\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]\\(\\),]/.test(ch)) {\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  var word = stream.current().toLowerCase();\n  if (keywords.hasOwnProperty(word)) {\n    return 'keyword';\n  }\n  if (builtins.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {\n    return 'builtin';\n  }\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) state.tokenize = null;\n    return \"string\";\n  };\n}\n\n// Interface\n\nexport var fortran = {\n  name: \"fortran\",\n  startState: function startState() {\n    return {\n      tokenize: null\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    return style;\n  }\n};"],"sourceRoot":""}