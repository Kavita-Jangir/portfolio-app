{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/lua.js"],"names":["wordRE","words","RegExp","join","__webpack_require__","r","__webpack_exports__","d","lua","builtins","keywords","indentTokens","dedentTokens","dedentPartial","readBracket","stream","level","eat","normal","state","quote","ch","next","cur","bracketed","skipToEnd","escaped","test","peek","eatWhile","style","curlev","name","startState","basecol","indentDepth","token","eatSpace","word","current","indent","textAfter","cx","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close"],"mappings":"2FAGA,SAAAA,EAAAC,GACA,WAAAC,OAAA,OAAAD,EAAAE,KAAA,eAJAC,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,wBAAAE,IAQA,IAAAC,EAAAT,EAAA,8sDACAU,EAAAV,EAAA,wJACAW,EAAAX,EAAA,2CACAY,EAAAZ,EAAA,2BACAa,EAXA,IAAAX,OAAA,OAWA,yBAAuD,iBAXvDC,KAAA,cAYA,SAAAW,EAAAC,GAEA,IADA,IAAAC,EAAA,EACAD,EAAAE,IAAA,QAAAD,EAEA,OADAD,EAAAE,IAAA,KACAD,EAEA,SAAAE,EAAAH,EAAAI,GACA,IAiCAC,EAjCAC,EAAAN,EAAAO,OACA,WAAAD,GAAAN,EAAAE,IAAA,KACAF,EAAAE,IAAA,MAAAF,EAAAE,IAAA,MAAAE,EAAAI,IAAAC,EAAAV,EAAAC,GAAA,YAAAA,EAAAI,IACAJ,EAAAU,YACA,WAEA,KAAAJ,GAAA,KAAAA,GAAAF,EAAAI,KA2BAH,EA3BAC,EA4BA,SAAAN,EAAAI,GAGA,IAFA,IACAE,EADAK,GAAA,EAEA,OAAAL,EAAAN,EAAAO,UACAD,GAAAD,GAAAM,IACAA,MAAA,MAAAL,EAGA,OADAK,IAAAP,EAAAI,IAAAL,GACA,YApCAH,EAAAI,GACA,KAAAE,GAAA,QAAAM,KAAAZ,EAAAa,SAAAT,EAAAI,IAAAC,EAAAV,EAAAC,GAAA,WAAAA,EAAAI,GACA,KAAAQ,KAAAN,IACAN,EAAAc,SAAA,UACA,UAEA,QAAAF,KAAAN,IACAN,EAAAc,SAAA,cACA,YAEA,KAEA,SAAAL,EAAAR,EAAAc,GACA,gBAAAf,EAAAI,GAGA,IAFA,IACAE,EADAU,EAAA,KAEA,OAAAV,EAAAN,EAAAO,SACA,SAAAS,EACA,KAAAV,IAAAU,EAAA,QACO,QAAAV,IAAAU,MAA8B,SAAAV,GAAAU,GAAAf,EAAA,CACrCG,EAAAI,IAAAL,EACA,MACOa,EAAA,KAEP,OAAAD,GAeO,IAAAtB,EAAA,CACPwB,KAAA,MACAC,WAAA,WACA,OACAC,QAAA,EACAC,YAAA,EACAZ,IAAAL,IAGAkB,MAAA,SAAArB,EAAAI,GACA,GAAAJ,EAAAsB,WAAA,YACA,IAAAP,EAAAX,EAAAI,IAAAR,EAAAI,GACAmB,EAAAvB,EAAAwB,UAOA,MANA,YAAAT,IACApB,EAAAiB,KAAAW,GAAAR,EAAA,UAAiDrB,EAAAkB,KAAAW,KAAAR,EAAA,YAEjD,WAAAA,GAAA,UAAAA,IACAnB,EAAAgB,KAAAW,KAAAnB,EAAAgB,YAAuDvB,EAAAe,KAAAW,MAAAnB,EAAAgB,aAEvDL,GAEAU,OAAA,SAAArB,EAAAsB,EAAAC,GACA,IAAAC,EAAA9B,EAAAc,KAAAc,GACA,OAAAtB,EAAAe,QAAAQ,EAAAE,MAAAzB,EAAAgB,aAAAQ,EAAA,OAEAE,aAAA,CACAC,cAAA,gCACAC,cAAA,CACAC,KAAA,KACAC,MAAA,CACAC,KAAA,OACAC,MAAA","file":"static/js/58.c808bbdd.chunk.js","sourcesContent":["function prefixRE(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")\", \"i\");\n}\nfunction wordRE(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\n\n// long list of standard functions from lua manual\nvar builtins = wordRE([\"_G\", \"_VERSION\", \"assert\", \"collectgarbage\", \"dofile\", \"error\", \"getfenv\", \"getmetatable\", \"ipairs\", \"load\", \"loadfile\", \"loadstring\", \"module\", \"next\", \"pairs\", \"pcall\", \"print\", \"rawequal\", \"rawget\", \"rawset\", \"require\", \"select\", \"setfenv\", \"setmetatable\", \"tonumber\", \"tostring\", \"type\", \"unpack\", \"xpcall\", \"coroutine.create\", \"coroutine.resume\", \"coroutine.running\", \"coroutine.status\", \"coroutine.wrap\", \"coroutine.yield\", \"debug.debug\", \"debug.getfenv\", \"debug.gethook\", \"debug.getinfo\", \"debug.getlocal\", \"debug.getmetatable\", \"debug.getregistry\", \"debug.getupvalue\", \"debug.setfenv\", \"debug.sethook\", \"debug.setlocal\", \"debug.setmetatable\", \"debug.setupvalue\", \"debug.traceback\", \"close\", \"flush\", \"lines\", \"read\", \"seek\", \"setvbuf\", \"write\", \"io.close\", \"io.flush\", \"io.input\", \"io.lines\", \"io.open\", \"io.output\", \"io.popen\", \"io.read\", \"io.stderr\", \"io.stdin\", \"io.stdout\", \"io.tmpfile\", \"io.type\", \"io.write\", \"math.abs\", \"math.acos\", \"math.asin\", \"math.atan\", \"math.atan2\", \"math.ceil\", \"math.cos\", \"math.cosh\", \"math.deg\", \"math.exp\", \"math.floor\", \"math.fmod\", \"math.frexp\", \"math.huge\", \"math.ldexp\", \"math.log\", \"math.log10\", \"math.max\", \"math.min\", \"math.modf\", \"math.pi\", \"math.pow\", \"math.rad\", \"math.random\", \"math.randomseed\", \"math.sin\", \"math.sinh\", \"math.sqrt\", \"math.tan\", \"math.tanh\", \"os.clock\", \"os.date\", \"os.difftime\", \"os.execute\", \"os.exit\", \"os.getenv\", \"os.remove\", \"os.rename\", \"os.setlocale\", \"os.time\", \"os.tmpname\", \"package.cpath\", \"package.loaded\", \"package.loaders\", \"package.loadlib\", \"package.path\", \"package.preload\", \"package.seeall\", \"string.byte\", \"string.char\", \"string.dump\", \"string.find\", \"string.format\", \"string.gmatch\", \"string.gsub\", \"string.len\", \"string.lower\", \"string.match\", \"string.rep\", \"string.reverse\", \"string.sub\", \"string.upper\", \"table.concat\", \"table.insert\", \"table.maxn\", \"table.remove\", \"table.sort\"]);\nvar keywords = wordRE([\"and\", \"break\", \"elseif\", \"false\", \"nil\", \"not\", \"or\", \"return\", \"true\", \"function\", \"end\", \"if\", \"then\", \"else\", \"do\", \"while\", \"repeat\", \"until\", \"for\", \"in\", \"local\"]);\nvar indentTokens = wordRE([\"function\", \"if\", \"repeat\", \"do\", \"\\\\(\", \"{\"]);\nvar dedentTokens = wordRE([\"end\", \"until\", \"\\\\)\", \"}\"]);\nvar dedentPartial = prefixRE([\"end\", \"until\", \"\\\\)\", \"}\", \"else\", \"elseif\"]);\nfunction readBracket(stream) {\n  var level = 0;\n  while (stream.eat(\"=\")) ++level;\n  stream.eat(\"[\");\n  return level;\n}\nfunction normal(stream, state) {\n  var ch = stream.next();\n  if (ch == \"-\" && stream.eat(\"-\")) {\n    if (stream.eat(\"[\") && stream.eat(\"[\")) return (state.cur = bracketed(readBracket(stream), \"comment\"))(stream, state);\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (ch == \"\\\"\" || ch == \"'\") return (state.cur = string(ch))(stream, state);\n  if (ch == \"[\" && /[\\[=]/.test(stream.peek())) return (state.cur = bracketed(readBracket(stream), \"string\"))(stream, state);\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w.%]/);\n    return \"number\";\n  }\n  if (/[\\w_]/.test(ch)) {\n    stream.eatWhile(/[\\w\\\\\\-_.]/);\n    return \"variable\";\n  }\n  return null;\n}\nfunction bracketed(level, style) {\n  return function (stream, state) {\n    var curlev = null,\n      ch;\n    while ((ch = stream.next()) != null) {\n      if (curlev == null) {\n        if (ch == \"]\") curlev = 0;\n      } else if (ch == \"=\") ++curlev;else if (ch == \"]\" && curlev == level) {\n        state.cur = normal;\n        break;\n      } else curlev = null;\n    }\n    return style;\n  };\n}\nfunction string(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.cur = normal;\n    return \"string\";\n  };\n}\nexport var lua = {\n  name: \"lua\",\n  startState: function startState() {\n    return {\n      basecol: 0,\n      indentDepth: 0,\n      cur: normal\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.cur(stream, state);\n    var word = stream.current();\n    if (style == \"variable\") {\n      if (keywords.test(word)) style = \"keyword\";else if (builtins.test(word)) style = \"builtin\";\n    }\n    if (style != \"comment\" && style != \"string\") {\n      if (indentTokens.test(word)) ++state.indentDepth;else if (dedentTokens.test(word)) --state.indentDepth;\n    }\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var closing = dedentPartial.test(textAfter);\n    return state.basecol + cx.unit * (state.indentDepth - (closing ? 1 : 0));\n  },\n  languageData: {\n    indentOnInput: /^\\s*(?:end|until|else|\\)|\\})$/,\n    commentTokens: {\n      line: \"--\",\n      block: {\n        open: \"--[[\",\n        close: \"]]--\"\n      }\n    }\n  }\n};"],"sourceRoot":""}