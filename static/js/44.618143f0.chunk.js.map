{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/fcl.js"],"names":["__webpack_require__","r","__webpack_exports__","d","fcl","keywords","term","method","accu","rule","then","is","and","or","if","default","start_blocks","var_input","var_output","fuzzify","defuzzify","function_block","ruleblock","end_blocks","end_ruleblock","end_defuzzify","end_function_block","end_fuzzify","end_var","atoms","true","false","nan","real","min","max","cog","cogs","isOperatorChar","tokenBase","stream","state","ch","next","test","match","eat","tokenize","tokenComment","skipToEnd","eatWhile","cur","current","toLowerCase","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","name","startState","indentUnit","context","startOfLine","token","ctx","sol","indentation","eatSpace","style","col","pushContext","popContext","indent","textAfter","cx","closing","unit","languageData","commentTokens","line","block","open","close"],"mappings":"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","file":"static/js/44.618143f0.chunk.js","sourcesContent":["var keywords = {\n  \"term\": true,\n  \"method\": true,\n  \"accu\": true,\n  \"rule\": true,\n  \"then\": true,\n  \"is\": true,\n  \"and\": true,\n  \"or\": true,\n  \"if\": true,\n  \"default\": true\n};\nvar start_blocks = {\n  \"var_input\": true,\n  \"var_output\": true,\n  \"fuzzify\": true,\n  \"defuzzify\": true,\n  \"function_block\": true,\n  \"ruleblock\": true\n};\nvar end_blocks = {\n  \"end_ruleblock\": true,\n  \"end_defuzzify\": true,\n  \"end_function_block\": true,\n  \"end_fuzzify\": true,\n  \"end_var\": true\n};\nvar atoms = {\n  \"true\": true,\n  \"false\": true,\n  \"nan\": true,\n  \"real\": true,\n  \"min\": true,\n  \"max\": true,\n  \"cog\": true,\n  \"cogs\": true\n};\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n  if (ch == \"/\" || ch == \"(\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current().toLowerCase();\n  if (keywords.propertyIsEnumerable(cur) || start_blocks.propertyIsEnumerable(cur) || end_blocks.propertyIsEnumerable(cur)) {\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if ((ch == \"/\" || ch == \")\") && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \"end_block\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport var fcl = {\n  name: \"fcl\",\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n    var cur = stream.current().toLowerCase();\n    if (start_blocks.propertyIsEnumerable(cur)) pushContext(state, stream.column(), \"end_block\");else if (end_blocks.propertyIsEnumerable(cur)) popContext(state);\n    state.startOfLine = false;\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n    var ctx = state.context;\n    var closing = end_blocks.propertyIsEnumerable(textAfter);\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"(*\",\n        close: \"*)\"\n      }\n    }\n  }\n};"],"sourceRoot":""}