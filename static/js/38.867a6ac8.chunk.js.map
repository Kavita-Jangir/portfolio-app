{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/dylan.js"],"names":["forEach","arr","f","i","length","some","__webpack_require__","r","__webpack_exports__","d","dylan","words","unnamedDefinition","namedDefinition","typeParameterizedDefinition","otherParameterizedDefinition","constantSimpleDefinition","variableSimpleDefinition","otherSimpleDefinition","statement","separator","other","signalingCalls","concat","symbolPattern","symbol","RegExp","patterns","symbolKeyword","symbolClass","symbolGlobal","symbolConstant","patternStyles","patternName","hasOwnProperty","styles","keyword","definition","simpleDefinition","wordLookup","styleLookup","chain","stream","state","tokenize","tokenBase","ch","peek","next","tokenString","eat","tokenComment","skipToEnd","backUp","test","match","eatWhile","indexOf","name","pattern","Array","p","current","maybeEnd","maybeNested","nestedCount","quote","style","escaped","end","type","word","startState","currentIndent","token","eatSpace","languageData","commentTokens","block","open","close"],"mappings":"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","file":"static/js/38.867a6ac8.chunk.js","sourcesContent":["function forEach(arr, f) {\n  for (var i = 0; i < arr.length; i++) f(arr[i], i);\n}\nfunction some(arr, f) {\n  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true;\n  return false;\n}\n\n// Words\nvar words = {\n  // Words that introduce unnamed definitions like \"define interface\"\n  unnamedDefinition: [\"interface\"],\n  // Words that introduce simple named definitions like \"define library\"\n  namedDefinition: [\"module\", \"library\", \"macro\", \"C-struct\", \"C-union\", \"C-function\", \"C-callable-wrapper\"],\n  // Words that introduce type definitions like \"define class\".\n  // These are also parameterized like \"define method\" and are\n  // appended to otherParameterizedDefinitionWords\n  typeParameterizedDefinition: [\"class\", \"C-subtype\", \"C-mapped-subtype\"],\n  // Words that introduce trickier definitions like \"define method\".\n  // These require special definitions to be added to startExpressions\n  otherParameterizedDefinition: [\"method\", \"function\", \"C-variable\", \"C-address\"],\n  // Words that introduce module constant definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  constantSimpleDefinition: [\"constant\"],\n  // Words that introduce module variable definitions.\n  // These must also be simple definitions and are\n  // appended to otherSimpleDefinitionWords\n  variableSimpleDefinition: [\"variable\"],\n  // Other words that introduce simple definitions\n  // (without implicit bodies).\n  otherSimpleDefinition: [\"generic\", \"domain\", \"C-pointer-type\", \"table\"],\n  // Words that begin statements with implicit bodies.\n  statement: [\"if\", \"block\", \"begin\", \"method\", \"case\", \"for\", \"select\", \"when\", \"unless\", \"until\", \"while\", \"iterate\", \"profiling\", \"dynamic-bind\"],\n  // Patterns that act as separators in compound statements.\n  // This may include any general pattern that must be indented\n  // specially.\n  separator: [\"finally\", \"exception\", \"cleanup\", \"else\", \"elseif\", \"afterwards\"],\n  // Keywords that do not require special indentation handling,\n  // but which should be highlighted\n  other: [\"above\", \"below\", \"by\", \"from\", \"handler\", \"in\", \"instance\", \"let\", \"local\", \"otherwise\", \"slot\", \"subclass\", \"then\", \"to\", \"keyed-by\", \"virtual\"],\n  // Condition signaling function calls\n  signalingCalls: [\"signal\", \"error\", \"cerror\", \"break\", \"check-type\", \"abort\"]\n};\nwords[\"otherDefinition\"] = words[\"unnamedDefinition\"].concat(words[\"namedDefinition\"]).concat(words[\"otherParameterizedDefinition\"]);\nwords[\"definition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherDefinition\"]);\nwords[\"parameterizedDefinition\"] = words[\"typeParameterizedDefinition\"].concat(words[\"otherParameterizedDefinition\"]);\nwords[\"simpleDefinition\"] = words[\"constantSimpleDefinition\"].concat(words[\"variableSimpleDefinition\"]).concat(words[\"otherSimpleDefinition\"]);\nwords[\"keyword\"] = words[\"statement\"].concat(words[\"separator\"]).concat(words[\"other\"]);\n\n// Patterns\nvar symbolPattern = \"[-_a-zA-Z?!*@<>$%]+\";\nvar symbol = new RegExp(\"^\" + symbolPattern);\nvar patterns = {\n  // Symbols with special syntax\n  symbolKeyword: symbolPattern + \":\",\n  symbolClass: \"<\" + symbolPattern + \">\",\n  symbolGlobal: \"\\\\*\" + symbolPattern + \"\\\\*\",\n  symbolConstant: \"\\\\$\" + symbolPattern\n};\nvar patternStyles = {\n  symbolKeyword: \"atom\",\n  symbolClass: \"tag\",\n  symbolGlobal: \"variableName.standard\",\n  symbolConstant: \"variableName.constant\"\n};\n\n// Compile all patterns to regular expressions\nfor (var patternName in patterns) if (patterns.hasOwnProperty(patternName)) patterns[patternName] = new RegExp(\"^\" + patterns[patternName]);\n\n// Names beginning \"with-\" and \"without-\" are commonly\n// used as statement macro\npatterns[\"keyword\"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];\nvar styles = {};\nstyles[\"keyword\"] = \"keyword\";\nstyles[\"definition\"] = \"def\";\nstyles[\"simpleDefinition\"] = \"def\";\nstyles[\"signalingCalls\"] = \"builtin\";\n\n// protected words lookup table\nvar wordLookup = {};\nvar styleLookup = {};\nforEach([\"keyword\", \"definition\", \"simpleDefinition\", \"signalingCalls\"], function (type) {\n  forEach(words[type], function (word) {\n    wordLookup[word] = type;\n    styleLookup[word] = styles[type];\n  });\n});\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  // String\n  var ch = stream.peek();\n  if (ch == \"'\" || ch == '\"') {\n    stream.next();\n    return chain(stream, state, tokenString(ch, \"string\"));\n  }\n  // Comment\n  else if (ch == \"/\") {\n    stream.next();\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    stream.backUp(1);\n  }\n  // Decimal\n  else if (/[+\\-\\d\\.]/.test(ch)) {\n    if (stream.match(/^[+-]?[0-9]*\\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\\d+/)) {\n      return \"number\";\n    }\n  }\n  // Hash\n  else if (ch == \"#\") {\n    stream.next();\n    // Symbol with string syntax\n    ch = stream.peek();\n    if (ch == '\"') {\n      stream.next();\n      return chain(stream, state, tokenString('\"', \"string\"));\n    }\n    // Binary number\n    else if (ch == \"b\") {\n      stream.next();\n      stream.eatWhile(/[01]/);\n      return \"number\";\n    }\n    // Hex number\n    else if (ch == \"x\") {\n      stream.next();\n      stream.eatWhile(/[\\da-f]/i);\n      return \"number\";\n    }\n    // Octal number\n    else if (ch == \"o\") {\n      stream.next();\n      stream.eatWhile(/[0-7]/);\n      return \"number\";\n    }\n    // Token concatenation in macros\n    else if (ch == '#') {\n      stream.next();\n      return \"punctuation\";\n    }\n    // Sequence literals\n    else if (ch == '[' || ch == '(') {\n      stream.next();\n      return \"bracket\";\n      // Hash symbol\n    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {\n      return \"atom\";\n    } else {\n      stream.eatWhile(/[-a-zA-Z]/);\n      return \"error\";\n    }\n  } else if (ch == \"~\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      ch = stream.peek();\n      if (ch == \"=\") {\n        stream.next();\n        return \"operator\";\n      }\n      return \"operator\";\n    }\n    return \"operator\";\n  } else if (ch == \":\") {\n    stream.next();\n    ch = stream.peek();\n    if (ch == \"=\") {\n      stream.next();\n      return \"operator\";\n    } else if (ch == \":\") {\n      stream.next();\n      return \"punctuation\";\n    }\n  } else if (\"[](){}\".indexOf(ch) != -1) {\n    stream.next();\n    return \"bracket\";\n  } else if (\".,\".indexOf(ch) != -1) {\n    stream.next();\n    return \"punctuation\";\n  } else if (stream.match(\"end\")) {\n    return \"keyword\";\n  }\n  for (var name in patterns) {\n    if (patterns.hasOwnProperty(name)) {\n      var pattern = patterns[name];\n      if (pattern instanceof Array && some(pattern, function (p) {\n        return stream.match(p);\n      }) || stream.match(pattern)) return patternStyles[name];\n    }\n  }\n  if (/[+\\-*\\/^=<>&|]/.test(ch)) {\n    stream.next();\n    return \"operator\";\n  }\n  if (stream.match(\"define\")) {\n    return \"def\";\n  } else {\n    stream.eatWhile(/[\\w\\-]/);\n    // Keyword\n    if (wordLookup.hasOwnProperty(stream.current())) {\n      return styleLookup[stream.current()];\n    } else if (stream.current().match(symbol)) {\n      return \"variable\";\n    } else {\n      stream.next();\n      return \"variableName.standard\";\n    }\n  }\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    maybeNested = false,\n    nestedCount = 0,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      if (nestedCount > 0) {\n        nestedCount--;\n      } else {\n        state.tokenize = tokenBase;\n        break;\n      }\n    } else if (ch == \"*\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = ch == \"*\";\n    maybeNested = ch == \"/\";\n  }\n  return \"comment\";\n}\nfunction tokenString(quote, style) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return style;\n  };\n}\n\n// Interface\nexport var dylan = {\n  name: \"dylan\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    }\n  }\n};"],"sourceRoot":""}