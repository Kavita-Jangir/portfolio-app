{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/turtle.js"],"names":["curPunc","wordRegexp","words","RegExp","join","__webpack_require__","r","__webpack_exports__","d","turtle","keywords","operatorChars","tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","eatWhile","peek","word","current","pushContext","type","col","context","prev","indent","popContext","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"mappings":"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","file":"static/js/99.a5a5bd02.chunk.js","sourcesContent":["var curPunc;\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  } else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  } else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n      if (keywords.test(word)) {\n        return \"meta\";\n      }\n      if (ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n    var word = stream.current();\n    if (ops.test(word)) return null;else if (keywords.test(word)) return \"meta\";else return \"variable\";\n  }\n}\nfunction tokenLiteral(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\nfunction pushContext(state, type, col) {\n  state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\nexport var turtle = {\n  name: \"turtle\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n    var closing = context && firstChar == context.type;\n    if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}