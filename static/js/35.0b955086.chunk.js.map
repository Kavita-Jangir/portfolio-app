{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/d.js"],"names":["words","str","obj","split","i","length","__webpack_require__","r","__webpack_exports__","d","curPunc","blockKeywordsStr","parserConfig","keywords","blockKeywords","builtin","atoms","hooks","@","stream","_state","eatWhile","statementIndentUnit","multiLineStrings","isOperatorChar","tokenBase","state","quote","ch","next","result","tokenize","escaped","end","test","eat","tokenNestedComment","tokenComment","skipToEnd","cur","current","propertyIsEnumerable","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close"],"mappings":"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","file":"static/js/35.0b955086.chunk.js","sourcesContent":["function words(str) {\n  var obj = {},\n    words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar blockKeywordsStr = \"body catch class do else enum for foreach foreach_reverse if in interface mixin \" + \"out scope struct switch try union unittest version while with\";\nvar parserConfig = {\n  keywords: words(\"abstract alias align asm assert auto break case cast cdouble cent cfloat const continue \" + \"debug default delegate delete deprecated export extern final finally function goto immutable \" + \"import inout invariant is lazy macro module new nothrow override package pragma private \" + \"protected public pure ref return shared short static super synchronized template this \" + \"throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters \" + blockKeywordsStr),\n  blockKeywords: words(blockKeywordsStr),\n  builtin: words(\"bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte \" + \"ucent uint ulong ushort wchar wstring void size_t sizediff_t\"),\n  atoms: words(\"exit failure success true false null\"),\n  hooks: {\n    \"@\": function _(stream, _state) {\n      stream.eatWhile(/[\\w\\$_]/);\n      return \"meta\";\n    }\n  }\n};\nvar statementIndentUnit = parserConfig.statementIndentUnit,\n  keywords = parserConfig.keywords,\n  builtin = parserConfig.builtin,\n  blockKeywords = parserConfig.blockKeywords,\n  atoms = parserConfig.atoms,\n  hooks = parserConfig.hooks,\n  multiLineStrings = parserConfig.multiLineStrings;\nvar isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (hooks[ch]) {\n    var result = hooks[ch](stream, state);\n    if (result !== false) return result;\n  }\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"+\")) {\n      state.tokenize = tokenNestedComment;\n      return tokenNestedComment(stream, state);\n    }\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"keyword\";\n  }\n  if (builtin.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    return \"builtin\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      next,\n      end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings)) state.tokenize = null;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = ch == \"*\";\n  }\n  return \"comment\";\n}\nfunction tokenNestedComment(stream, state) {\n  var maybeEnd = false,\n    ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = ch == \"+\";\n  }\n  return \"comment\";\n}\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\") indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\") state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport var d = {\n  name: \"d\",\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n  token: function token(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\" || style == \"meta\") return style;\n    if (ctx.align == null) ctx.align = true;\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\") && ctx.type == \"statement\") popContext(state);else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    } else if (curPunc == ctx.type) popContext(state);else if ((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';' || ctx.type == \"statement\" && curPunc == \"newstatement\") pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context,\n      firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);else if (ctx.align) return ctx.column + (closing ? 0 : 1);else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    }\n  }\n};"],"sourceRoot":""}