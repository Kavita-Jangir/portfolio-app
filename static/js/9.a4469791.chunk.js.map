{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/verilog.js"],"names":["mkVerilog","parserConfig","statementIndentUnit","dontAlignCalls","noIndentKeywords","multiLineStrings","hooks","words","str","obj","split","i","length","curPunc","curKeyword","keywords","isOperatorChar","isBracketChar","unsignedNumber","decimalLiteral","binaryLiteral","octLiteral","hexLiteral","realLiteral","closingBracketOrWord","closingBracket","blockKeywords","openClose","keyword","undefined","statementKeywords","tokenBase","stream","state","style","quote","ch","peek","test","next","eatWhile","tokenize","escaped","end","eat","tokenComment","skipToEnd","backUp","match","cur","current","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","c","context","popContext","t","isClosing","text","contextClosing","closingKeywords","name","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","close","indent","textAfter","cx","fromHook","firstChar","charAt","closing","possibleClosing","unit","languageData","indentOnInput","allClosings","closings","j","push","RegExp","join","buildElectricInputRegEx","commentTokens","line","block","open","__webpack_require__","r","__webpack_exports__","d","verilog","tlv","tlvIdentifierStyle","|",">","$","$$","?$","?*","-","/","/-","@","@-","@++","@+=","@+=-","@--","@-=","%+","%-","%",">>","<<","<>","#","^","^^","^!","*","**","\\","\"","tlvScopePrefixChars","?","tlvIdentMatch","tlvLineIndentationMatch","tlvCommentMatch","electricInput","tlvInBlockComment","string","tlvCodeActive","pos","depth","tlvIndentationStyle","blankline","chPos","bodyString","slice","pop","tlvNextIndent","prefix","mnemonic","hasOwnProperty","eol"],"mappings":"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","file":"static/js/9.a4469791.chunk.js","sourcesContent":["function mkVerilog(parserConfig) {\n  var statementIndentUnit = parserConfig.statementIndentUnit,\n    dontAlignCalls = parserConfig.dontAlignCalls,\n    noIndentKeywords = parserConfig.noIndentKeywords || [],\n    multiLineStrings = parserConfig.multiLineStrings,\n    hooks = parserConfig.hooks || {};\n  function words(str) {\n    var obj = {},\n      words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\"accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind \" + \"bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config \" + \"const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable \" + \"dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup \" + \"endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask \" + \"enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin \" + \"function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import \" + \"incdir include initial inout input inside instance int integer interconnect interface intersect join join_any \" + \"join_none large let liblist library local localparam logic longint macromodule matches medium modport module \" + \"nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed \" + \"parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup \" + \"pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg \" + \"reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime \" + \"s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify \" + \"specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on \" + \"table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior \" + \"trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void \" + \"wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor\");\n\n  /** Operators from IEEE 1800-2012\n      unary_operator ::=\n      + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_operator ::=\n      + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n      | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n      | -> | <->\n      inc_or_dec_operator ::= ++ | --\n      unary_module_path_operator ::=\n      ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_module_path_operator ::=\n      == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n  var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of (\"end\" + keyword)\n  // E.g. \"task\" => \"endtask\"\n  var blockKeywords = words(\"case checker class clocking config function generate interface module package \" + \"primitive program property specify sequence table task\");\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = \"end\" + keyword;\n  }\n  openClose[\"begin\"] = \"end\";\n  openClose[\"casex\"] = \"endcase\";\n  openClose[\"casez\"] = \"endcase\";\n  openClose[\"do\"] = \"while\";\n  openClose[\"fork\"] = \"join;join_any;join_none\";\n  openClose[\"covergroup\"] = \"endgroup\";\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words(\"always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while\");\n  function tokenBase(stream, state) {\n    var ch = stream.peek(),\n      style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false) return style;\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return \"bracket\";\n    }\n    // Macros (tick-defines)\n    if (ch == '`') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"def\";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == '$') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return \"meta\";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == '#') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return \"def\";\n    }\n    // Strings\n    if (ch == '\"') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == \"/\") {\n      stream.next();\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) || stream.match(decimalLiteral) || stream.match(binaryLiteral) || stream.match(octLiteral) || stream.match(hexLiteral) || stream.match(unsignedNumber) || stream.match(realLiteral)) {\n      return \"number\";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      return \"meta\";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = \"newblock\";\n        }\n        if (statementKeywords[cur]) {\n          curPunc = \"newstatement\";\n        }\n        curKeyword = cur;\n        return \"keyword\";\n      }\n      return \"variable\";\n    }\n    stream.next();\n    return null;\n  }\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false,\n        next,\n        end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings)) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n  function tokenComment(stream, state) {\n    var maybeEnd = false,\n      ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = ch == \"*\";\n    }\n    return \"comment\";\n  }\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(\";\");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(\";\");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp(\"[{}()\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n    return re;\n  }\n\n  // Interface\n  return {\n    name: \"verilog\",\n    startState: function startState(indentUnit) {\n      var state = {\n        tokenize: null,\n        context: new Context(-indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n    token: function token(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\" || style == \"variable\") return style;\n      if (ctx.align == null) ctx.align = true;\n      if (curPunc == ctx.type) {\n        popContext(state);\n      } else if (curPunc == \";\" && ctx.type == \"statement\" || ctx.type && isClosing(curKeyword, ctx.type)) {\n        ctx = popContext(state);\n        while (ctx && ctx.type == \"statement\") ctx = popContext(state);\n      } else if (curPunc == \"{\") {\n        pushContext(state, stream.column(), \"}\");\n      } else if (curPunc == \"[\") {\n        pushContext(state, stream.column(), \"]\");\n      } else if (curPunc == \"(\") {\n        pushContext(state, stream.column(), \")\");\n      } else if (ctx && ctx.type == \"endcase\" && curPunc == \":\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newstatement\") {\n        pushContext(state, stream.column(), \"statement\");\n      } else if (curPunc == \"newblock\") {\n        if (curKeyword == \"function\" && ctx && (ctx.type == \"statement\" || ctx.type == \"endgroup\")) {\n          // The 'function' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == \"task\" && ctx && ctx.type == \"statement\") {\n          // Same thing for task\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close);\n        }\n      }\n      state.startOfLine = false;\n      return style;\n    },\n    indent: function indent(state, textAfter, cx) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return null;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context,\n        firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == \"statement\" && firstChar == \"}\") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing) closing = isClosing(possibleClosing[0], ctx.type);\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : statementIndentUnit || cx.unit);else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);else if (ctx.type == \")\" && !closing) return ctx.indented + (statementIndentUnit || cx.unit);else return ctx.indented + (closing ? 0 : cx.unit);\n    },\n    languageData: {\n      indentOnInput: buildElectricInputRegEx(),\n      commentTokens: {\n        line: \"//\",\n        block: {\n          open: \"/*\",\n          close: \"*/\"\n        }\n      }\n    }\n  };\n}\n;\nexport var verilog = mkVerilog({});\n\n// TL-Verilog mode.\n// See tl-x.org for language spec.\n// See the mode in action at makerchip.com.\n// Contact: steve.hoover@redwoodeda.com\n\n// TLV Identifier prefixes.\n// Note that sign is not treated separately, so \"+/-\" versions of numeric identifiers\n// are included.\nvar tlvIdentifierStyle = {\n  \"|\": \"link\",\n  \">\": \"property\",\n  // Should condition this off for > TLV 1c.\n  \"$\": \"variable\",\n  \"$$\": \"variable\",\n  \"?$\": \"qualifier\",\n  \"?*\": \"qualifier\",\n  \"-\": \"contentSeparator\",\n  \"/\": \"property\",\n  \"/-\": \"property\",\n  \"@\": \"variableName.special\",\n  \"@-\": \"variableName.special\",\n  \"@++\": \"variableName.special\",\n  \"@+=\": \"variableName.special\",\n  \"@+=-\": \"variableName.special\",\n  \"@--\": \"variableName.special\",\n  \"@-=\": \"variableName.special\",\n  \"%+\": \"tag\",\n  \"%-\": \"tag\",\n  \"%\": \"tag\",\n  \">>\": \"tag\",\n  \"<<\": \"tag\",\n  \"<>\": \"tag\",\n  \"#\": \"tag\",\n  // Need to choose a style for this.\n  \"^\": \"attribute\",\n  \"^^\": \"attribute\",\n  \"^!\": \"attribute\",\n  \"*\": \"variable\",\n  \"**\": \"variable\",\n  \"\\\\\": \"keyword\",\n  \"\\\"\": \"comment\"\n};\n\n// Lines starting with these characters define scope (result in indentation).\nvar tlvScopePrefixChars = {\n  \"/\": \"beh-hier\",\n  \">\": \"beh-hier\",\n  \"-\": \"phys-hier\",\n  \"|\": \"pipe\",\n  \"?\": \"when\",\n  \"@\": \"stage\",\n  \"\\\\\": \"keyword\"\n};\nvar tlvIndentUnit = 3;\nvar tlvTrackStatements = false;\nvar tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|'\"<>]+)([\\d\\w_]*)/; // Matches an identifier.\n// Note that ':' is excluded, because of it's use in [:].\nvar tlvLineIndentationMatch = /^[! ] */;\nvar tlvCommentMatch = /^\\/[\\/\\*]/;\nexport var tlv = mkVerilog({\n  hooks: {\n    electricInput: false,\n    // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n    // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n    // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n    //   - M4 tokens\n    //   - TLV scope indentation\n    //   - Statement delimitation (enabled by tlvTrackStatements)\n    token: function token(stream, state) {\n      var style = undefined;\n      var match; // Return value of pattern matches.\n\n      // Set highlighting mode based on code region (TLV or SV).\n      if (stream.sol() && !state.tlvInBlockComment) {\n        // Process region.\n        if (stream.peek() == '\\\\') {\n          style = \"def\";\n          stream.skipToEnd();\n          if (stream.string.match(/\\\\SV/)) {\n            state.tlvCodeActive = false;\n          } else if (stream.string.match(/\\\\TLV/)) {\n            state.tlvCodeActive = true;\n          }\n        }\n        // Correct indentation in the face of a line prefix char.\n        if (state.tlvCodeActive && stream.pos == 0 && state.indented == 0 && (match = stream.match(tlvLineIndentationMatch, false))) {\n          state.indented = match[0].length;\n        }\n\n        // Compute indentation state:\n        //   o Auto indentation on next line\n        //   o Indentation scope styles\n        var indented = state.indented;\n        var depth = indented / tlvIndentUnit;\n        if (depth <= state.tlvIndentationStyle.length) {\n          // not deeper than current scope\n\n          var blankline = stream.string.length == indented;\n          var chPos = depth * tlvIndentUnit;\n          if (chPos < stream.string.length) {\n            var bodyString = stream.string.slice(chPos);\n            var ch = bodyString[0];\n            if (tlvScopePrefixChars[ch] && (match = bodyString.match(tlvIdentMatch)) && tlvIdentifierStyle[match[1]]) {\n              // This line begins scope.\n              // Next line gets indented one level.\n              indented += tlvIndentUnit;\n              // Style the next level of indentation (except non-region keyword identifiers,\n              //   which are statements themselves)\n              if (!(ch == \"\\\\\" && chPos > 0)) {\n                state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                if (tlvTrackStatements) {\n                  state.statementComment = false;\n                }\n                depth++;\n              }\n            }\n          }\n          // Clear out deeper indentation levels unless line is blank.\n          if (!blankline) {\n            while (state.tlvIndentationStyle.length > depth) {\n              state.tlvIndentationStyle.pop();\n            }\n          }\n        }\n        // Set next level of indentation.\n        state.tlvNextIndent = indented;\n      }\n      if (state.tlvCodeActive) {\n        // Highlight as TLV.\n\n        var beginStatement = false;\n        if (tlvTrackStatements) {\n          // This starts a statement if the position is at the scope level\n          // and we're not within a statement leading comment.\n          beginStatement = stream.peek() != \" \" &&\n          // not a space\n          style === undefined &&\n          // not a region identifier\n          !state.tlvInBlockComment &&\n          // not in block comment\n          //!stream.match(tlvCommentMatch, false) && // not comment start\n          stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit; // at scope level\n          if (beginStatement) {\n            if (state.statementComment) {\n              // statement already started by comment\n              beginStatement = false;\n            }\n            state.statementComment = stream.match(tlvCommentMatch, false); // comment start\n          }\n        }\n\n        var match;\n        if (style !== undefined) {} else if (state.tlvInBlockComment) {\n          // In a block comment.\n          if (stream.match(/^.*?\\*\\//)) {\n            // Exit block comment.\n            state.tlvInBlockComment = false;\n            if (tlvTrackStatements && !stream.eol()) {\n              // Anything after comment is assumed to be real statement content.\n              state.statementComment = false;\n            }\n          } else {\n            stream.skipToEnd();\n          }\n          style = \"comment\";\n        } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n          // Start comment.\n          if (match[0] == \"//\") {\n            // Line comment.\n            stream.skipToEnd();\n          } else {\n            // Block comment.\n            state.tlvInBlockComment = true;\n          }\n          style = \"comment\";\n        } else if (match = stream.match(tlvIdentMatch)) {\n          // looks like an identifier (or identifier prefix)\n          var prefix = match[1];\n          var mnemonic = match[2];\n          if (\n          // is identifier prefix\n          tlvIdentifierStyle.hasOwnProperty(prefix) && (\n          // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)\n          mnemonic.length > 0 || stream.eol())) {\n            style = tlvIdentifierStyle[prefix];\n          } else {\n            // Just swallow one character and try again.\n            // This enables subsequent identifier match with preceding symbol character, which\n            //   is legal within a statement.  (Eg, !$reset).  It also enables detection of\n            //   comment start with preceding symbols.\n            stream.backUp(stream.current().length - 1);\n          }\n        } else if (stream.match(/^\\t+/)) {\n          // Highlight tabs, which are illegal.\n          style = \"invalid\";\n        } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n          // [:], (), {}, ;.\n          style = \"meta\";\n        } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n          // m4 pre proc\n          style = match[1] == \"+\" ? \"keyword.special\" : \"keyword\";\n        } else if (stream.match(/^ +/)) {\n          // Skip over spaces.\n          if (stream.eol()) {\n            // Trailing spaces.\n            style = \"error\";\n          }\n        } else if (stream.match(/^[\\w\\d_]+/)) {\n          // alpha-numeric token.\n          style = \"number\";\n        } else {\n          // Eat the next char w/ no formatting.\n          stream.next();\n        }\n      } else {\n        if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n          // m4 pre proc\n          style = \"keyword\";\n        }\n      }\n      return style;\n    },\n    indent: function indent(state) {\n      return state.tlvCodeActive == true ? state.tlvNextIndent : -1;\n    },\n    startState: function startState(state) {\n      state.tlvIndentationStyle = []; // Styles to use for each level of indentation.\n      state.tlvCodeActive = true; // True when we're in a TLV region (and at beginning of file).\n      state.tlvNextIndent = -1; // The number of spaces to autoindent the next line if tlvCodeActive.\n      state.tlvInBlockComment = false; // True inside /**/ comment.\n      if (tlvTrackStatements) {\n        state.statementComment = false; // True inside a statement's header comment.\n      }\n    }\n  }\n});"],"sourceRoot":""}