{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/sparql.js"],"names":["curPunc","wordRegexp","words","RegExp","join","__webpack_require__","r","__webpack_exports__","d","sparql","ops","keywords","operatorChars","tokenBase","stream","state","quote","ch","next","match","tokenize","escaped","test","skipToEnd","eatPnLocal","eatWhile","eat","word","current","pushContext","type","col","context","prev","indent","popContext","name","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"mappings":"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","file":"static/js/86.a627e4d2.chunk.js","sourcesContent":["var curPunc;\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\", \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\", \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\", \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\", \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\", \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\", \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\", \"isblank\", \"isliteral\", \"a\", \"bind\"]);\nvar keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\", \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\", \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\", \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\", \"true\", \"false\", \"with\", \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\nvar operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"$\" || ch == \"?\") {\n    if (ch == \"?\" && stream.match(/\\s/, false)) {\n      return \"operator\";\n    }\n    stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n    return \"variableName.local\";\n  } else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  } else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  } else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"bracket\";\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (operatorChars.test(ch)) {\n    return \"operator\";\n  } else if (ch == \":\") {\n    eatPnLocal(stream);\n    return \"atom\";\n  } else if (ch == \"@\") {\n    stream.eatWhile(/[a-z\\d\\-]/i);\n    return \"meta\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if (stream.eat(\":\")) {\n      eatPnLocal(stream);\n      return \"atom\";\n    }\n    var word = stream.current();\n    if (ops.test(word)) return \"builtin\";else if (keywords.test(word)) return \"keyword\";else return \"variable\";\n  }\n}\nfunction eatPnLocal(stream) {\n  stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\nfunction tokenLiteral(quote) {\n  return function (stream, state) {\n    var escaped = false,\n      ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\nfunction pushContext(state, type, col) {\n  state.context = {\n    prev: state.context,\n    indent: state.indent,\n    col: col,\n    type: type\n  };\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\nexport var sparql = {\n  name: \"sparql\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      context: null,\n      indent: 0,\n      col: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) {\n        popContext(state);\n        if (curPunc == \"}\" && state.context && state.context.type == \"pattern\") popContext(state);\n      }\n    } else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type)) pushContext(state, \"pattern\", stream.column());else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar)) while (context && context.type == \"pattern\") context = context.prev;\n    var closing = context && firstChar == context.type;\n    if (!context) return 0;else if (context.type == \"pattern\") return context.col;else if (context.align) return context.col + (closing ? 0 : 1);else return context.indent + (closing ? 0 : cx.unit);\n  },\n  languageData: {\n    commentTokens: {\n      line: \"#\"\n    }\n  }\n};"],"sourceRoot":""}