{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/toml.js"],"names":["__webpack_require__","r","__webpack_exports__","d","toml","name","startState","inString","stringType","lhs","inArray","token","stream","state","peek","next","sol","eol","match","skipTo","skipToEnd","eatSpace","eatWhile","c","languageData","commentTokens","line"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAO,IAAAA,EAAA,CACPC,KAAA,OACAC,WAAA,WACA,OACAC,UAAA,EACAC,WAAA,GACAC,KAAA,EACAC,QAAA,IAGAC,MAAA,SAAAC,EAAAC,GAYA,GAVAA,EAAAN,UAAA,KAAAK,EAAAE,QAAA,KAAAF,EAAAE,SACAD,EAAAL,WAAAI,EAAAE,OACAF,EAAAG,OACAF,EAAAN,UAAA,GAGAK,EAAAI,OAAA,IAAAH,EAAAH,UACAG,EAAAJ,KAAA,GAGAI,EAAAN,SAAA,CACA,KAAAM,EAAAN,WAAAK,EAAAK,OACAL,EAAAE,SAAAD,EAAAL,YACAI,EAAAG,OACAF,EAAAN,UAAA,GACS,OAAAK,EAAAE,QACTF,EAAAG,OACAH,EAAAG,QAEAH,EAAAM,MAAA,gBAGA,OAAAL,EAAAJ,IAAA,oBACK,OAAAI,EAAAH,SAAA,MAAAE,EAAAE,QACLF,EAAAG,OACAF,EAAAH,UACA,WACKG,EAAAJ,KAAA,MAAAG,EAAAE,QAAAF,EAAAO,OAAA,MACLP,EAAAG,OAEA,MAAAH,EAAAE,QAAAF,EAAAG,OACA,QACK,MAAAH,EAAAE,QACLF,EAAAQ,YACA,WACKR,EAAAS,WACL,KACKR,EAAAJ,KAAAG,EAAAU,SAAA,SAAAC,GACL,WAAAA,GAAA,KAAAA,IAEA,WACKV,EAAAJ,KAAA,MAAAG,EAAAE,QACLF,EAAAG,OACAF,EAAAJ,KAAA,EACA,OACKI,EAAAJ,KAAAG,EAAAM,MAAA,0BACL,OACKL,EAAAJ,MAAAG,EAAAM,MAAA,UAAAN,EAAAM,MAAA,SAEAL,EAAAJ,KAAA,MAAAG,EAAAE,QAIAD,EAAAJ,KAAAG,EAAAM,MAAA,qBACL,UACKN,EAAAS,YACLT,EAAAG,OAEA,OARAF,EAAAH,UACAE,EAAAG,OACA,WAJA,QAYAS,aAAA,CACAC,cAAA,CACAC,KAAA","file":"static/js/95.379d3aca.chunk.js","sourcesContent":["export var toml = {\n  name: \"toml\",\n  startState: function startState() {\n    return {\n      inString: false,\n      stringType: \"\",\n      lhs: true,\n      inArray: 0\n    };\n  },\n  token: function token(stream, state) {\n    //check for state changes\n    if (!state.inString && (stream.peek() == '\"' || stream.peek() == \"'\")) {\n      state.stringType = stream.peek();\n      stream.next(); // Skip quote\n      state.inString = true; // Update state\n    }\n\n    if (stream.sol() && state.inArray === 0) {\n      state.lhs = true;\n    }\n    //return state\n    if (state.inString) {\n      while (state.inString && !stream.eol()) {\n        if (stream.peek() === state.stringType) {\n          stream.next(); // Skip quote\n          state.inString = false; // Clear flag\n        } else if (stream.peek() === '\\\\') {\n          stream.next();\n          stream.next();\n        } else {\n          stream.match(/^.[^\\\\\\\"\\']*/);\n        }\n      }\n      return state.lhs ? \"property\" : \"string\"; // Token style\n    } else if (state.inArray && stream.peek() === ']') {\n      stream.next();\n      state.inArray--;\n      return 'bracket';\n    } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {\n      stream.next(); //skip closing ]\n      // array of objects has an extra open & close []\n      if (stream.peek() === ']') stream.next();\n      return \"atom\";\n    } else if (stream.peek() === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (state.lhs && stream.eatWhile(function (c) {\n      return c != '=' && c != ' ';\n    })) {\n      return \"property\";\n    } else if (state.lhs && stream.peek() === \"=\") {\n      stream.next();\n      state.lhs = false;\n      return null;\n    } else if (!state.lhs && stream.match(/^\\d\\d\\d\\d[\\d\\-\\:\\.T]*Z/)) {\n      return 'atom'; //date\n    } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {\n      return 'atom';\n    } else if (!state.lhs && stream.peek() === '[') {\n      state.inArray++;\n      stream.next();\n      return 'bracket';\n    } else if (!state.lhs && stream.match(/^\\-?\\d+(?:\\.\\d+)?/)) {\n      return 'number';\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  },\n  languageData: {\n    commentTokens: {\n      line: '#'\n    }\n  }\n};"],"sourceRoot":""}