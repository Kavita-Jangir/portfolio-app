{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/lang-wast/dist/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","wast","wastLanguage","_codemirror_language__WEBPACK_IMPORTED_MODULE_0__","_lezer_highlight__WEBPACK_IMPORTED_MODULE_1__","_lezer_lr__WEBPACK_IMPORTED_MODULE_2__","spec_Keyword","__proto__","anyref","dataref","eqref","externref","i31ref","funcref","i8","i16","i32","i64","f32","f64","parser","deserialize","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","Module","specialized","term","get","value","tokenPrec","define","name","configure","props","add","App","Object","closing","align","BlockComment","tree","from","to","Keyword","keyword","Type","typeName","Number","number","String","string","Identifier","variableName","LineComment","lineComment","blockComment","( )","paren","languageData","commentTokens","line","block","open","close","closeBrackets","brackets"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,iCAAAG,IAAA,IAAAC,EAAAN,EAAA,GAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAKAS,EAAA,CACAC,UAAA,KACAC,OAAA,GACAC,QAAA,GACAC,MAAA,GACAC,UAAA,GACAC,OAAA,GACAC,QAAA,GACAC,GAAA,GACAC,IAAA,GACAC,IAAA,GACAC,IAAA,GACAC,IAAA,GACAC,IAAA,IAEAC,EAA0Bf,EAAA,EAAQgB,YAAA,CAClCC,QAAA,GACAC,OAAA,2GACAC,UAAA,oDACAC,KAAA,4CACAC,UAAA,uFACAC,QAAA,GACAC,UAAA,gFACAC,aAAA,QACAC,gBAAA,EACAC,UAAA,wkCACAC,WAAA,IACAC,SAAA,CACAC,OAAA,OAEAC,YAAA,EACAC,KAAA,EACAC,IAAA,SAAAC,GACA,OAAAhC,EAAAgC,KAAA,KAGAC,UAAA,IAEArC,EAAgCC,EAAA,EAAUqC,OAAA,CAC1CC,KAAA,OACArB,SAAAsB,UAAA,CACAC,MAAA,CAAyBxC,EAAA,EAAcyC,IAAA,CACvCC,IAAwBC,OAAA3C,EAAA,EAAA2C,CAAe,CACvCC,QAAA,IACAC,OAAA,MAEqB7C,EAAA,EAAYyC,IAAA,CACjCC,IAAW1C,EAAA,EACX8C,aAAA,SAAAC,GACA,OACAC,KAAAD,EAAAC,KAAA,EACAC,GAAAF,EAAAE,GAAA,MAGqBN,OAAA1C,EAAA,EAAA0C,CAAS,CAC9BO,QAAejD,EAAA,EAAIkD,QACnBC,KAAYnD,EAAA,EAAIoD,SAChBC,OAAcrD,EAAA,EAAIsD,OAClBC,OAAcvD,EAAA,EAAIwD,OAClBC,WAAkBzD,EAAA,EAAI0D,aACtBC,YAAmB3D,EAAA,EAAI4D,YACvBf,aAAoB7C,EAAA,EAAI6D,aACxBC,MAAa9D,EAAA,EAAI+D,WAGjBC,aAAA,CACAC,cAAA,CACAC,KAAA,KACAC,MAAA,CACAC,KAAA,KACAC,MAAA,OAGAC,cAAA,CACAC,SAAA,cAIA,SAAA1E,IACA,WAAaE,EAAA,EAAeD","file":"static/js/22.bf2a60d7.chunk.js","sourcesContent":["import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { LRParser } from '@lezer/lr';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nvar spec_Keyword = {\n  __proto__: null,\n  anyref: 34,\n  dataref: 34,\n  eqref: 34,\n  externref: 34,\n  i31ref: 34,\n  funcref: 34,\n  i8: 34,\n  i16: 34,\n  i32: 34,\n  i64: 34,\n  f32: 34,\n  f64: 34\n};\nvar parser = /*@__PURE__*/LRParser.deserialize({\n  version: 14,\n  states: \"!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h\",\n  stateData: \"!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O\",\n  goto: \"xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV\",\n  nodeNames: \"âš  LineComment BlockComment Module ) ( App Identifier Type Keyword Number String\",\n  maxTerm: 17,\n  nodeProps: [[\"openedBy\", 4, \"(\"], [\"closedBy\", 5, \")\"], [\"group\", -6, 6, 7, 8, 9, 10, 11, \"Expression\"]],\n  skippedNodes: [0, 1, 2],\n  repeatNodeCount: 1,\n  tokenData: \"/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^\",\n  tokenizers: [0],\n  topRules: {\n    \"Module\": [0, 3]\n  },\n  specialized: [{\n    term: 9,\n    get: function get(value) {\n      return spec_Keyword[value] || -1;\n    }\n  }],\n  tokenPrec: 0\n});\nvar wastLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"wast\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      App: /*@__PURE__*/delimitedIndent({\n        closing: \")\",\n        align: false\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      App: foldInside,\n      BlockComment: function BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n    }), /*@__PURE__*/styleTags({\n      Keyword: tags.keyword,\n      Type: tags.typeName,\n      Number: tags.number,\n      String: tags.string,\n      Identifier: tags.variableName,\n      LineComment: tags.lineComment,\n      BlockComment: tags.blockComment,\n      \"( )\": tags.paren\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \";;\",\n      block: {\n        open: \"(;\",\n        close: \";)\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", '\"']\n    }\n  }\n});\nfunction wast() {\n  return new LanguageSupport(wastLanguage);\n}\nexport { wast, wastLanguage };"],"sourceRoot":""}