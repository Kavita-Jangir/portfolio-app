{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/commonlisp.js"],"names":["__webpack_require__","r","__webpack_exports__","d","commonLisp","type","specialForm","assumeBody","numLiteral","symbol","readSym","stream","ch","next","test","backUp","current","base","state","eatSpace","match","tokenize","inString","skipToEnd","skipTo","inComment","name","charAt","lastType","escaped","last","startState","ctx","prev","start","indentTo","token","sol","style","indentUnit","column","indent","i","languageData","commentTokens","line","block","open","close","closeBrackets","brackets"],"mappings":"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","file":"static/js/32.049ea72e.chunk.js","sourcesContent":["var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\nfunction readSym(stream) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();else if (!symbol.test(ch)) {\n      stream.backUp(1);\n      break;\n    }\n  }\n  return stream.current();\n}\nfunction base(stream, state) {\n  if (stream.eatSpace()) {\n    type = \"ws\";\n    return null;\n  }\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);else if (ch == \"(\") {\n    type = \"open\";\n    return \"bracket\";\n  } else if (ch == \")\" || ch == \"]\") {\n    type = \"close\";\n    return \"bracket\";\n  } else if (ch == \";\") {\n    stream.skipToEnd();\n    type = \"ws\";\n    return \"comment\";\n  } else if (/['`,@]/.test(ch)) return null;else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) {\n      stream.next();\n      return \"variableName\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n    if (ch == \"(\") {\n      type = \"open\";\n      return \"bracket\";\n    } else if (/[+\\-=\\.']/.test(ch)) return null;else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);else if (ch == \":\") {\n      readSym(stream);\n      return \"meta\";\n    } else if (ch == \"\\\\\") {\n      stream.next();\n      readSym(stream);\n      return \"string.special\";\n    } else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\nfunction inString(stream, state) {\n  var escaped = false,\n    next;\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) {\n      state.tokenize = base;\n      break;\n    }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  return \"string\";\n}\nfunction inComment(stream, state) {\n  var next, last;\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") {\n      state.tokenize = base;\n      break;\n    }\n    last = next;\n  }\n  type = \"ws\";\n  return \"comment\";\n}\nexport var commonLisp = {\n  name: \"commonlisp\",\n  startState: function startState() {\n    return {\n      ctx: {\n        prev: null,\n        start: 0,\n        indentTo: 0\n      },\n      lastType: null,\n      tokenize: base\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\") state.ctx.indentTo = state.ctx.start + 1;\n    type = null;\n    var style = state.tokenize(stream, state);\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current())) state.ctx.indentTo = state.ctx.start + stream.indentUnit;else state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastType = type;\n    }\n    if (type == \"open\") state.ctx = {\n      prev: state.ctx,\n      start: stream.column(),\n      indentTo: null\n    };else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n  indent: function indent(state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n  languageData: {\n    commentTokens: {\n      line: \";;\",\n      block: {\n        open: \"#|\",\n        close: \"|#\"\n      }\n    },\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    }\n  }\n};"],"sourceRoot":""}