{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/ruby.js"],"names":["wordObj","words","o","i","e","length","__webpack_require__","r","__webpack_exports__","d","ruby","curPunc","keywordList","keywords","indentWords","dedentWords","opening","[","{","(","closing","]","}",")","chain","newtok","stream","state","tokenize","push","tokenBase","sol","match","eol","readBlockComment","eatSpace","m","phrase","mayIndent","ch","next","readQuoted","start","pos","depth","found","escaped","indexOf","backUp","regexpAhead","style","embed","eat","delim","propertyIsEnumerable","skipToEnd","pop","eatWhile","test","varList","lastTok","more","tokenBaseUntilBrace","peek","tokenBaseOnce","alreadyCalled","quote","unescaped","context","type","prev","name","startState","indentUnit","indented","continuedLine","token","indentation","kwtype","thisTok","word","current","column","indent","textAfter","cx","firstChar","charAt","ct","closed","unit","languageData","indentOnInput","commentTokens","line","autocomplete"],"mappings":"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","file":"static/js/78.59051478.chunk.js","sourcesContent":["function wordObj(words) {\n  var o = {};\n  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n  return o;\n}\nvar keywordList = [\"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\", \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\", \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\", \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\", \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\", \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"],\n  keywords = wordObj(keywordList);\nvar indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\", \"catch\", \"loop\", \"proc\", \"begin\"]);\nvar dedentWords = wordObj([\"end\", \"until\"]);\nvar opening = {\n  \"[\": \"]\",\n  \"{\": \"}\",\n  \"(\": \")\"\n};\nvar closing = {\n  \"]\": \"[\",\n  \"}\": \"{\",\n  \")\": \"(\"\n};\nvar curPunc;\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\nfunction tokenBase(stream, state) {\n  if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n    state.tokenize.push(readBlockComment);\n    return \"comment\";\n  }\n  if (stream.eatSpace()) return null;\n  var ch = stream.next(),\n    m;\n  if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n    return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n  } else if (ch == \"/\") {\n    if (regexpAhead(stream)) return chain(readQuoted(ch, \"string.special\", true), stream, state);else return \"operator\";\n  } else if (ch == \"%\") {\n    var style = \"string\",\n      embed = true;\n    if (stream.eat(\"s\")) style = \"atom\";else if (stream.eat(/[WQ]/)) style = \"string\";else if (stream.eat(/[r]/)) style = \"string.special\";else if (stream.eat(/[wxq]/)) {\n      style = \"string\";\n      embed = false;\n    }\n    var delim = stream.eat(/[^\\w\\s=]/);\n    if (!delim) return \"operator\";\n    if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n    return chain(readQuoted(delim, style, embed, true), stream, state);\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n    return chain(readHereDoc(m[2], m[1]), stream, state);\n  } else if (ch == \"0\") {\n    if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);else stream.eatWhile(/[0-7]/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n    return \"number\";\n  } else if (ch == \"?\") {\n    while (stream.match(/^\\\\[CM]-/)) {}\n    if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);else stream.next();\n    return \"string\";\n  } else if (ch == \":\") {\n    if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n    if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n    // :> :>> :< :<< are valid symbols\n    if (stream.eat(/[\\<\\>]/)) {\n      stream.eat(/[\\<\\>]/);\n      return \"atom\";\n    }\n\n    // :+ :- :/ :* :| :& :! are valid symbols\n    if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n      return \"atom\";\n    }\n\n    // Symbols can't start by a digit\n    if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n      stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n      // Only one ? ! = is allowed and only as the last character\n      stream.eat(/[\\?\\!\\=]/);\n      return \"atom\";\n    }\n    return \"operator\";\n  } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n    stream.eat(\"@\");\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    return \"propertyName\";\n  } else if (ch == \"$\") {\n    if (stream.eat(/[a-zA-Z_]/)) {\n      stream.eatWhile(/[\\w]/);\n    } else if (stream.eat(/\\d/)) {\n      stream.eat(/\\d/);\n    } else {\n      stream.next(); // Must be a special global like $: or $!\n    }\n\n    return \"variableName.special\";\n  } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    stream.eat(/[\\?\\!]/);\n    if (stream.eat(\":\")) return \"atom\";\n    return \"variable\";\n  } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n    curPunc = \"|\";\n    return null;\n  } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"-\" && stream.eat(\">\")) {\n    return \"operator\";\n  } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n    var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n    if (ch == \".\" && !more) curPunc = \".\";\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\nfunction regexpAhead(stream) {\n  var start = stream.pos,\n    depth = 0,\n    next,\n    found = false,\n    escaped = false;\n  while ((next = stream.next()) != null) {\n    if (!escaped) {\n      if (\"[{(\".indexOf(next) > -1) {\n        depth++;\n      } else if (\"]})\".indexOf(next) > -1) {\n        depth--;\n        if (depth < 0) break;\n      } else if (next == \"/\" && depth == 0) {\n        found = true;\n        break;\n      }\n      escaped = next == \"\\\\\";\n    } else {\n      escaped = false;\n    }\n  }\n  stream.backUp(stream.pos - start);\n  return found;\n}\nfunction tokenBaseUntilBrace(depth) {\n  if (!depth) depth = 1;\n  return function (stream, state) {\n    if (stream.peek() == \"}\") {\n      if (depth == 1) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length - 1](stream, state);\n      } else {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n      }\n    } else if (stream.peek() == \"{\") {\n      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n    }\n    return tokenBase(stream, state);\n  };\n}\nfunction tokenBaseOnce() {\n  var alreadyCalled = false;\n  return function (stream, state) {\n    if (alreadyCalled) {\n      state.tokenize.pop();\n      return state.tokenize[state.tokenize.length - 1](stream, state);\n    }\n    alreadyCalled = true;\n    return tokenBase(stream, state);\n  };\n}\nfunction readQuoted(quote, style, embed, unescaped) {\n  return function (stream, state) {\n    var escaped = false,\n      ch;\n    if (state.context.type === 'read-quoted-paused') {\n      state.context = state.context.prev;\n      stream.eat(\"}\");\n    }\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n      if (embed && ch == \"#\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          if (quote == \"}\") {\n            state.context = {\n              prev: state.context,\n              type: 'read-quoted-paused'\n            };\n          }\n          state.tokenize.push(tokenBaseUntilBrace());\n          break;\n        } else if (/[@\\$]/.test(stream.peek())) {\n          state.tokenize.push(tokenBaseOnce());\n          break;\n        }\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return style;\n  };\n}\nfunction readHereDoc(phrase, mayIndent) {\n  return function (stream, state) {\n    if (mayIndent) stream.eatSpace();\n    if (stream.match(phrase)) state.tokenize.pop();else stream.skipToEnd();\n    return \"string\";\n  };\n}\nfunction readBlockComment(stream, state) {\n  if (stream.sol() && stream.match(\"=end\") && stream.eol()) state.tokenize.pop();\n  stream.skipToEnd();\n  return \"comment\";\n}\nexport var ruby = {\n  name: \"ruby\",\n  startState: function startState(indentUnit) {\n    return {\n      tokenize: [tokenBase],\n      indented: 0,\n      context: {\n        type: \"top\",\n        indented: -indentUnit\n      },\n      continuedLine: false,\n      lastTok: null,\n      varList: false\n    };\n  },\n  token: function token(stream, state) {\n    curPunc = null;\n    if (stream.sol()) state.indented = stream.indentation();\n    var style = state.tokenize[state.tokenize.length - 1](stream, state),\n      kwtype;\n    var thisTok = curPunc;\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = state.lastTok == \".\" ? \"property\" : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : /^[A-Z]/.test(word) ? \"tag\" : state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList ? \"def\" : \"variable\";\n      if (style == \"keyword\") {\n        thisTok = word;\n        if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation()) kwtype = \"indent\";else if (word == \"do\" && state.context.indented < state.indented) kwtype = \"indent\";\n      }\n    }\n    if (curPunc || style && style != \"comment\") state.lastTok = thisTok;\n    if (curPunc == \"|\") state.varList = !state.varList;\n    if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc)) state.context = {\n      prev: state.context,\n      type: curPunc || style,\n      indented: state.indented\n    };else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev) state.context = state.context.prev;\n    if (stream.eol()) state.continuedLine = curPunc == \"\\\\\" || style == \"operator\";\n    return style;\n  },\n  indent: function indent(state, textAfter, cx) {\n    if (state.tokenize[state.tokenize.length - 1] != tokenBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0);\n    var ct = state.context;\n    var closed = ct.type == closing[firstChar] || ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n    return ct.indented + (closed ? 0 : cx.unit) + (state.continuedLine ? cx.unit : 0);\n  },\n  languageData: {\n    indentOnInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    commentTokens: {\n      line: \"#\"\n    },\n    autocomplete: keywordList\n  }\n};"],"sourceRoot":""}