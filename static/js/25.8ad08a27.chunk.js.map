{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/asciiarmor.js"],"names":["errorIfNotEmpty","stream","nonWS","match","skipToEnd","__webpack_require__","r","__webpack_exports__","d","asciiArmor","name","token","state","m","sol","type","result","eatWhile","next","blankLine","startState"],"mappings":"2FAAA,SAAAA,EAAAC,GACA,IAAAC,EAAAD,EAAAE,MAAA,UAEA,OADAF,EAAAG,YACAF,EAAA,aAHAG,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,+BAAAE,IAKO,IAAAA,EAAA,CACPC,KAAA,aACAC,MAAA,SAAAV,EAAAW,GACA,IAAAC,EACA,UAAAD,QACA,OAAAX,EAAAa,QAAAD,EAAAZ,EAAAE,MAAA,gCACAS,QAAA,UACAA,EAAAG,KAAAF,EAAA,GACA,OAEAb,EAAAC,GACK,cAAAW,QAAA,CACL,GAAAX,EAAAa,OAAAb,EAAAE,MAAA,SAEA,OADAS,QAAA,SACA,OAEA,IAAAI,EAAAhB,EAAAC,GAEA,OADAe,IAAAJ,QAAA,QACAI,EAEK,gBAAAJ,SACLX,EAAAG,YACAQ,QAAA,UACA,UACK,QAAAA,QACLX,EAAAa,QAAAD,EAAAZ,EAAAE,MAAA,6BACAU,EAAA,IAAAD,EAAAG,KAAA,SACAH,QAAA,MACA,OAEAX,EAAAgB,SAAA,mBACA,MAEAhB,EAAAiB,OACA,SAGK,OAAAN,QACLZ,EAAAC,QADK,GAILkB,UAAA,SAAAP,GACA,WAAAA,kBAAA,SAEAQ,WAAA,WACA,OACAR,MAAA,MACAG,KAAA","file":"static/js/25.8ad08a27.chunk.js","sourcesContent":["function errorIfNotEmpty(stream) {\n  var nonWS = stream.match(/^\\s*\\S/);\n  stream.skipToEnd();\n  return nonWS ? \"error\" : null;\n}\nexport var asciiArmor = {\n  name: \"asciiarmor\",\n  token: function token(stream, state) {\n    var m;\n    if (state.state == \"top\") {\n      if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n        state.state = \"headers\";\n        state.type = m[1];\n        return \"tag\";\n      }\n      return errorIfNotEmpty(stream);\n    } else if (state.state == \"headers\") {\n      if (stream.sol() && stream.match(/^\\w+:/)) {\n        state.state = \"header\";\n        return \"atom\";\n      } else {\n        var result = errorIfNotEmpty(stream);\n        if (result) state.state = \"body\";\n        return result;\n      }\n    } else if (state.state == \"header\") {\n      stream.skipToEnd();\n      state.state = \"headers\";\n      return \"string\";\n    } else if (state.state == \"body\") {\n      if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n        if (m[1] != state.type) return \"error\";\n        state.state = \"end\";\n        return \"tag\";\n      } else {\n        if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n          return null;\n        } else {\n          stream.next();\n          return \"error\";\n        }\n      }\n    } else if (state.state == \"end\") {\n      return errorIfNotEmpty(stream);\n    }\n  },\n  blankLine: function blankLine(state) {\n    if (state.state == \"headers\") state.state = \"body\";\n  },\n  startState: function startState() {\n    return {\n      state: \"top\",\n      type: null\n    };\n  }\n};"],"sourceRoot":""}