{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/stex.js"],"names":["mkStex","mathMode","pushCommand","state","command","cmdState","push","peekCommand","length","addPluginPattern","pluginName","cmdStyle","styles","this","name","bracketNo","style","argument","styleIdentifier","openBracket","closeBracket","plugins","setState","f","normal","source","plug","match","cmdName","current","slice","hasOwnProperty","beginParams","inMathMode","ch","next","skipToEnd","test","eatWhile","context","i","getMostPowerful","endModeSeq","eatSpace","peek","eat","pop","popCommand","startState","copyState","s","token","stream","blankLine","languageData","commentTokens","line","__webpack_require__","r","__webpack_exports__","d","stex","stexMath"],"mappings":"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","file":"static/js/8.db0117d7.chunk.js","sourcesContent":["function mkStex(mathMode) {\n  function pushCommand(state, command) {\n    state.cmdState.push(command);\n  }\n  function peekCommand(state) {\n    if (state.cmdState.length > 0) {\n      return state.cmdState[state.cmdState.length - 1];\n    } else {\n      return null;\n    }\n  }\n  function popCommand(state) {\n    var plug = state.cmdState.pop();\n    if (plug) {\n      plug.closeBracket();\n    }\n  }\n\n  // returns the non-default plugin closest to the end of the list\n  function getMostPowerful(state) {\n    var context = state.cmdState;\n    for (var i = context.length - 1; i >= 0; i--) {\n      var plug = context[i];\n      if (plug.name == \"DEFAULT\") {\n        continue;\n      }\n      return plug;\n    }\n    return {\n      styleIdentifier: function styleIdentifier() {\n        return null;\n      }\n    };\n  }\n  function addPluginPattern(pluginName, cmdStyle, styles) {\n    return function () {\n      this.name = pluginName;\n      this.bracketNo = 0;\n      this.style = cmdStyle;\n      this.styles = styles;\n      this.argument = null; // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n      this.styleIdentifier = function () {\n        return this.styles[this.bracketNo - 1] || null;\n      };\n      this.openBracket = function () {\n        this.bracketNo++;\n        return \"bracket\";\n      };\n      this.closeBracket = function () {};\n    };\n  }\n  var plugins = {};\n  plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n  plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n  plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n  plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n  plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n  plugins[\"label\"] = addPluginPattern(\"label\", \"tag\", [\"atom\"]);\n  plugins[\"ref\"] = addPluginPattern(\"ref\", \"tag\", [\"atom\"]);\n  plugins[\"eqref\"] = addPluginPattern(\"eqref\", \"tag\", [\"atom\"]);\n  plugins[\"cite\"] = addPluginPattern(\"cite\", \"tag\", [\"atom\"]);\n  plugins[\"bibitem\"] = addPluginPattern(\"bibitem\", \"tag\", [\"atom\"]);\n  plugins[\"Bibitem\"] = addPluginPattern(\"Bibitem\", \"tag\", [\"atom\"]);\n  plugins[\"RBibitem\"] = addPluginPattern(\"RBibitem\", \"tag\", [\"atom\"]);\n  plugins[\"DEFAULT\"] = function () {\n    this.name = \"DEFAULT\";\n    this.style = \"tag\";\n    this.styleIdentifier = this.openBracket = this.closeBracket = function () {};\n  };\n  function setState(state, f) {\n    state.f = f;\n  }\n\n  // called when in a normal (no environment) context\n  function normal(source, state) {\n    var plug;\n    // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n    if (source.match(/^\\\\[a-zA-Z@]+/)) {\n      var cmdName = source.current().slice(1);\n      plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\"DEFAULT\"];\n      plug = new plug();\n      pushCommand(state, plug);\n      setState(state, beginParams);\n      return plug.style;\n    }\n\n    // escape characters\n    if (source.match(/^\\\\[$&%#{}_]/)) {\n      return \"tag\";\n    }\n\n    // white space control characters\n    if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n      return \"tag\";\n    }\n\n    // find if we're starting various math modes\n    if (source.match(\"\\\\[\")) {\n      setState(state, function (source, state) {\n        return inMathMode(source, state, \"\\\\]\");\n      });\n      return \"keyword\";\n    }\n    if (source.match(\"\\\\(\")) {\n      setState(state, function (source, state) {\n        return inMathMode(source, state, \"\\\\)\");\n      });\n      return \"keyword\";\n    }\n    if (source.match(\"$$\")) {\n      setState(state, function (source, state) {\n        return inMathMode(source, state, \"$$\");\n      });\n      return \"keyword\";\n    }\n    if (source.match(\"$\")) {\n      setState(state, function (source, state) {\n        return inMathMode(source, state, \"$\");\n      });\n      return \"keyword\";\n    }\n    var ch = source.next();\n    if (ch == \"%\") {\n      source.skipToEnd();\n      return \"comment\";\n    } else if (ch == '}' || ch == ']') {\n      plug = peekCommand(state);\n      if (plug) {\n        plug.closeBracket(ch);\n        setState(state, beginParams);\n      } else {\n        return \"error\";\n      }\n      return \"bracket\";\n    } else if (ch == '{' || ch == '[') {\n      plug = plugins[\"DEFAULT\"];\n      plug = new plug();\n      pushCommand(state, plug);\n      return \"bracket\";\n    } else if (/\\d/.test(ch)) {\n      source.eatWhile(/[\\w.%]/);\n      return \"atom\";\n    } else {\n      source.eatWhile(/[\\w\\-_]/);\n      plug = getMostPowerful(state);\n      if (plug.name == 'begin') {\n        plug.argument = source.current();\n      }\n      return plug.styleIdentifier();\n    }\n  }\n  function inMathMode(source, state, endModeSeq) {\n    if (source.eatSpace()) {\n      return null;\n    }\n    if (endModeSeq && source.match(endModeSeq)) {\n      setState(state, normal);\n      return \"keyword\";\n    }\n    if (source.match(/^\\\\[a-zA-Z@]+/)) {\n      return \"tag\";\n    }\n    if (source.match(/^[a-zA-Z]+/)) {\n      return \"variableName.special\";\n    }\n    // escape characters\n    if (source.match(/^\\\\[$&%#{}_]/)) {\n      return \"tag\";\n    }\n    // white space control characters\n    if (source.match(/^\\\\[,;!\\/]/)) {\n      return \"tag\";\n    }\n    // special math-mode characters\n    if (source.match(/^[\\^_&]/)) {\n      return \"tag\";\n    }\n    // non-special characters\n    if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n      return null;\n    }\n    if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n      return \"number\";\n    }\n    var ch = source.next();\n    if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n      return \"bracket\";\n    }\n    if (ch == \"%\") {\n      source.skipToEnd();\n      return \"comment\";\n    }\n    return \"error\";\n  }\n  function beginParams(source, state) {\n    var ch = source.peek(),\n      lastPlug;\n    if (ch == '{' || ch == '[') {\n      lastPlug = peekCommand(state);\n      lastPlug.openBracket(ch);\n      source.eat(ch);\n      setState(state, normal);\n      return \"bracket\";\n    }\n    if (/[ \\t\\r]/.test(ch)) {\n      source.eat(ch);\n      return null;\n    }\n    setState(state, normal);\n    popCommand(state);\n    return normal(source, state);\n  }\n  return {\n    name: \"stex\",\n    startState: function startState() {\n      var f = mathMode ? function (source, state) {\n        return inMathMode(source, state);\n      } : normal;\n      return {\n        cmdState: [],\n        f: f\n      };\n    },\n    copyState: function copyState(s) {\n      return {\n        cmdState: s.cmdState.slice(),\n        f: s.f\n      };\n    },\n    token: function token(stream, state) {\n      return state.f(stream, state);\n    },\n    blankLine: function blankLine(state) {\n      state.f = normal;\n      state.cmdState.length = 0;\n    },\n    languageData: {\n      commentTokens: {\n        line: \"%\"\n      }\n    }\n  };\n}\n;\nexport var stex = mkStex(false);\nexport var stexMath = mkStex(true);"],"sourceRoot":""}