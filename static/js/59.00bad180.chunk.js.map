{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/mathematica.js"],"names":["__webpack_require__","r","__webpack_exports__","d","mathematica","pFloat","pPrecision","reBaseForm","RegExp","reFloatForm","reIdInContext","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","end","escaped","prev","name","startState","token","eatSpace","languageData","commentTokens","block","open","close"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,gCAAAE,IACA,IAEAC,EAAA,+BAEAC,EAAA,YAAAD,EAAA,MAGAE,EAAA,IAAAC,OAAA,mDAAAF,EAAA,2BACAG,EAAA,IAAAD,OAAA,MAAAH,EAAAC,EAAA,0BACAI,EAAA,IAAAF,OAAA,kFACA,SAAAG,EAAAC,EAAAC,GACA,IAAAC,EAMA,aAHAA,EAAAF,EAAAG,SAIAF,EAAAG,SAAAC,EACAJ,EAAAG,SAAAJ,EAAAC,IAIA,MAAAC,GACAF,EAAAM,IAAA,MACAL,EAAAM,eACAN,EAAAG,SAAAI,EACAP,EAAAG,SAAAJ,EAAAC,KAKAD,EAAAS,OAAA,GAIAT,EAAAU,MAAAf,GAAA,MACA,SAKAK,EAAAU,MAAAb,GAAA,MACA,SAIAG,EAAAU,MAAA,8BACA,OAIAV,EAAAU,MAAA,+DACA,OAIAV,EAAAU,MAAA,oFACA,iBAKAV,EAAAU,MAAA,yGACA,uBAMAV,EAAAU,MAAA,4DACA,uBAEAV,EAAAU,MAAA,oCACA,uBAEAV,EAAAU,MAAA,oCACA,uBAIAV,EAAAU,MAAA,wCACA,YAIAV,EAAAU,MAAA,uBAAgC,MAChC,UAKAV,EAAAU,MAAA,gDACA,wBAIAV,EAAAU,MAAAZ,GAAA,MACA,UAIAE,EAAAU,MAAA,8DAAyC,MACzC,YAIAV,EAAAG,OACA,UAEA,SAAAE,EAAAL,EAAAC,GAIA,IAHA,IAAAE,EACAQ,GAAA,EACAC,GAAA,EACA,OAAAT,EAAAH,EAAAG,SAAA,CACA,SAAAA,IAAAS,EAAA,CACAD,GAAA,EACA,MAEAC,MAAA,OAAAT,EAKA,OAHAQ,IAAAC,IACAX,EAAAG,SAAAL,GAEA,SAGA,SAAAS,EAAAR,EAAAC,GAEA,IADA,IAAAY,EAAAV,EACAF,EAAAM,aAAA,UAAAJ,EAAAH,EAAAG,SACA,MAAAU,GAAA,MAAAV,GAAAF,EAAAM,eACA,MAAAM,GAAA,MAAAV,GAAAF,EAAAM,eACAM,EAAAV,EAKA,OAHAF,EAAAM,cAAA,IACAN,EAAAG,SAAAL,GAEA,UAEO,IAAAP,EAAA,CACPsB,KAAA,cACAC,WAAA,WACA,OACAX,SAAAL,EACAQ,aAAA,IAGAS,MAAA,SAAAhB,EAAAC,GACA,OAAAD,EAAAiB,WAAA,KACAhB,EAAAG,SAAAJ,EAAAC,IAEAiB,aAAA,CACAC,cAAA,CACAC,MAAA,CACAC,KAAA,KACAC,MAAA","file":"static/js/59.00bad180.chunk.js","sourcesContent":["// used pattern building blocks\nvar Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar pBase = \"(?:\\\\d+)\";\nvar pFloat = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar pPrecision = \"(?:`(?:`?\" + pFloat + \")?)\";\n\n// regular expressions\nvar reBaseForm = new RegExp('(?:' + pBase + '(?:\\\\^\\\\^' + pFloatBase + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar reFloatForm = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar reIdInContext = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\nfunction tokenBase(stream, state) {\n  var ch;\n\n  // get next character\n  ch = stream.next();\n\n  // string\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  }\n\n  // comment\n  if (ch === '(') {\n    if (stream.eat('*')) {\n      state.commentLevel++;\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n  }\n\n  // go back one character\n  stream.backUp(1);\n\n  // look for numbers\n  // Numbers in a baseform\n  if (stream.match(reBaseForm, true, false)) {\n    return 'number';\n  }\n\n  // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n\n  /* In[23] and Out[34] */\n  if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n    return 'atom';\n  }\n\n  // usage\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n    return 'meta';\n  }\n\n  // message\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n    return 'string.special';\n  }\n\n  // this makes a look-ahead match for something like variable:{_Integer}\n  // the match is then forwarded to the mma-patterns tokenizer.\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n  // Cannot start with a number, but can have numbers at any other position. Examples\n  // blub__Integer, a1_, b34_Integer32\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // Named characters in Mathematica, like \\[Gamma].\n  if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n    return 'character';\n  }\n\n  // Match all braces separately\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  }\n\n  // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n  // only one.\n  if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n    return 'variableName.constant';\n  }\n\n  // Literals like variables, keywords, functions\n  if (stream.match(reIdInContext, true, false)) {\n    return 'keyword';\n  }\n\n  // operators. Note that operators like @@ or /; are matched separately for each symbol.\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n    return 'operator';\n  }\n\n  // everything else is an error\n  stream.next(); // advance the stream.\n  return 'error';\n}\nfunction tokenString(stream, state) {\n  var next,\n    end = false,\n    escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next === '\\\\';\n  }\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n  return 'string';\n}\n;\nfunction tokenComment(stream, state) {\n  var prev, next;\n  while (state.commentLevel > 0 && (next = stream.next()) != null) {\n    if (prev === '(' && next === '*') state.commentLevel++;\n    if (prev === '*' && next === ')') state.commentLevel--;\n    prev = next;\n  }\n  if (state.commentLevel <= 0) {\n    state.tokenize = tokenBase;\n  }\n  return 'comment';\n}\nexport var mathematica = {\n  name: \"mathematica\",\n  startState: function startState() {\n    return {\n      tokenize: tokenBase,\n      commentLevel: 0\n    };\n  },\n  token: function token(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {\n      block: {\n        open: \"(*\",\n        close: \"*)\"\n      }\n    }\n  }\n};"],"sourceRoot":""}