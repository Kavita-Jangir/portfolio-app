{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/ebnf.js"],"names":["__webpack_require__","r","__webpack_exports__","d","ebnf","commentType","stateType","name","startState","stringType","braced","lhs","localState","stack","inDefinition","token","stream","state","length","peek","next","unshift","match","eol","shift","skipToEnd","indexOf","eatSpace"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAA,IAAAC,EACA,EADAA,EAEA,EAEAC,EACA,EADAA,EAEA,EAFAA,EAGA,EAEOF,EAAA,CACPG,KAAA,OACAC,WAAA,WACA,OACAC,WAAA,KACAJ,YAAA,KACAK,OAAA,EACAC,KAAA,EACAC,WAAA,KACAC,MAAA,GACAC,cAAA,IAGAC,MAAA,SAAAC,EAAAC,GACA,GAAAD,EAAA,CAsBA,OAnBA,IAAAC,EAAAJ,MAAAK,SAEA,KAAAF,EAAAG,QAAA,KAAAH,EAAAG,QACAF,EAAAR,WAAAO,EAAAG,OACAH,EAAAI,OACAH,EAAAJ,MAAAQ,QAAAf,IACOU,EAAAM,MAAA,OAEPL,EAAAJ,MAAAQ,QAAAf,GACAW,EAAAZ,eACOW,EAAAM,MAAA,QAEPL,EAAAJ,MAAAQ,QAAAf,GACAW,EAAAZ,gBAMAY,EAAAJ,MAAA,IACA,KAAAP,EACA,KAAAW,EAAAJ,MAAA,KAAAP,IAAAU,EAAAO,OACAP,EAAAG,SAAAF,EAAAR,YACAO,EAAAI,OACAH,EAAAJ,MAAAW,SACW,OAAAR,EAAAG,QACXH,EAAAI,OACAJ,EAAAI,QAEAJ,EAAAM,MAAA,gBAGA,OAAAL,EAAAN,IAAA,oBAGA,KAAAL,EACA,KAAAW,EAAAJ,MAAA,KAAAP,IAAAU,EAAAO,OACAN,EAAAZ,iBAAAW,EAAAM,MAAA,OACAL,EAAAJ,MAAAW,QACAP,EAAAZ,YAAA,MACWY,EAAAZ,iBAAAW,EAAAM,MAAA,OACXL,EAAAJ,MAAAW,QACAP,EAAAZ,YAAA,MAEAW,EAAAM,MAAA,YAGA,gBACA,KAAAhB,EACA,KAAAW,EAAAJ,MAAA,KAAAP,IAAAU,EAAAO,OACAP,EAAAM,MAAA,cAAAN,EAAAM,MAAA,MACAL,EAAAJ,MAAAW,QAGA,iBAEA,IAAAL,EAAAH,EAAAG,OAGA,OAAAA,GACA,QAGA,OAFAH,EAAAI,OACAH,EAAAJ,MAAAQ,QAAAf,GACA,UACA,QACA,QACA,QAEA,OADAU,EAAAI,OACA,WACA,QACA,GAAAJ,EAAAM,MAAA,MACA,eACS,GAAAN,EAAAM,MAAA,gBACT,gBACS,GAAAN,EAAAM,MAAA,UACT,gBAEA,MACA,QACA,GAAAN,EAAAM,MAAA,iBACA,gBAEA,SACA,GAAAN,EAAAM,MAAA,aACA,uBAEA,QACA,GAAAN,EAAAM,MAAA,KACA,aAEA,QACA,QACA,QACA,QACA,GAAAN,EAAAM,MAAAH,GACA,aAEA,QACA,GAAAH,EAAAM,MAAA,MACA,gBACS,GAAAN,EAAAM,MAAA,aACT,6BAEA,QACA,GAAAN,EAAAM,MAAA,kBACA,gBAGA,OAAAN,EAAAM,MAAA,OACAN,EAAAS,YACA,WACKT,EAAAM,MAAA,UACL,WACKN,EAAAM,MAAA,2BACLN,EAAAM,MAAA,aACA,WACON,EAAAM,MAAA,mBACP,MAEA,wBACK,qBAAAI,QAAAV,EAAAG,SACLH,EAAAI,OACA,YACKJ,EAAAW,YACLX,EAAAI,OAEA","file":"static/js/39.f5d85c85.chunk.js","sourcesContent":["var commentType = {\n  slash: 0,\n  parenthesis: 1\n};\nvar stateType = {\n  comment: 0,\n  _string: 1,\n  characterClass: 2\n};\nexport var ebnf = {\n  name: \"ebnf\",\n  startState: function startState() {\n    return {\n      stringType: null,\n      commentType: null,\n      braced: 0,\n      lhs: true,\n      localState: null,\n      stack: [],\n      inDefinition: false\n    };\n  },\n  token: function token(stream, state) {\n    if (!stream) return;\n\n    //check for state changes\n    if (state.stack.length === 0) {\n      //strings\n      if (stream.peek() == '\"' || stream.peek() == \"'\") {\n        state.stringType = stream.peek();\n        stream.next(); // Skip quote\n        state.stack.unshift(stateType._string);\n      } else if (stream.match('/*')) {\n        //comments starting with /*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.slash;\n      } else if (stream.match('(*')) {\n        //comments starting with (*\n        state.stack.unshift(stateType.comment);\n        state.commentType = commentType.parenthesis;\n      }\n    }\n\n    //return state\n    //stack has\n    switch (state.stack[0]) {\n      case stateType._string:\n        while (state.stack[0] === stateType._string && !stream.eol()) {\n          if (stream.peek() === state.stringType) {\n            stream.next(); // Skip quote\n            state.stack.shift(); // Clear flag\n          } else if (stream.peek() === \"\\\\\") {\n            stream.next();\n            stream.next();\n          } else {\n            stream.match(/^.[^\\\\\\\"\\']*/);\n          }\n        }\n        return state.lhs ? \"property\" : \"string\";\n      // Token style\n\n      case stateType.comment:\n        while (state.stack[0] === stateType.comment && !stream.eol()) {\n          if (state.commentType === commentType.slash && stream.match('*/')) {\n            state.stack.shift(); // Clear flag\n            state.commentType = null;\n          } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {\n            state.stack.shift(); // Clear flag\n            state.commentType = null;\n          } else {\n            stream.match(/^.[^\\*]*/);\n          }\n        }\n        return \"comment\";\n      case stateType.characterClass:\n        while (state.stack[0] === stateType.characterClass && !stream.eol()) {\n          if (!(stream.match(/^[^\\]\\\\]+/) || stream.match('.'))) {\n            state.stack.shift();\n          }\n        }\n        return \"operator\";\n    }\n    var peek = stream.peek();\n\n    //no stack\n    switch (peek) {\n      case \"[\":\n        stream.next();\n        state.stack.unshift(stateType.characterClass);\n        return \"bracket\";\n      case \":\":\n      case \"|\":\n      case \";\":\n        stream.next();\n        return \"operator\";\n      case \"%\":\n        if (stream.match(\"%%\")) {\n          return \"header\";\n        } else if (stream.match(/[%][A-Za-z]+/)) {\n          return \"keyword\";\n        } else if (stream.match(/[%][}]/)) {\n          return \"bracket\";\n        }\n        break;\n      case \"/\":\n        if (stream.match(/[\\/][A-Za-z]+/)) {\n          return \"keyword\";\n        }\n      case \"\\\\\":\n        if (stream.match(/[\\][a-z]+/)) {\n          return \"string.special\";\n        }\n      case \".\":\n        if (stream.match(\".\")) {\n          return \"atom\";\n        }\n      case \"*\":\n      case \"-\":\n      case \"+\":\n      case \"^\":\n        if (stream.match(peek)) {\n          return \"atom\";\n        }\n      case \"$\":\n        if (stream.match(\"$$\")) {\n          return \"builtin\";\n        } else if (stream.match(/[$][0-9]+/)) {\n          return \"variableName.special\";\n        }\n      case \"<\":\n        if (stream.match(/<<[a-zA-Z_]+>>/)) {\n          return \"builtin\";\n        }\n    }\n    if (stream.match('//')) {\n      stream.skipToEnd();\n      return \"comment\";\n    } else if (stream.match('return')) {\n      return \"operator\";\n    } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {\n      if (stream.match(/(?=[\\(.])/)) {\n        return \"variable\";\n      } else if (stream.match(/(?=[\\s\\n]*[:=])/)) {\n        return \"def\";\n      }\n      return \"variableName.special\";\n    } else if ([\"[\", \"]\", \"(\", \")\"].indexOf(stream.peek()) != -1) {\n      stream.next();\n      return \"bracket\";\n    } else if (!stream.eatSpace()) {\n      stream.next();\n    }\n    return null;\n  }\n};"],"sourceRoot":""}