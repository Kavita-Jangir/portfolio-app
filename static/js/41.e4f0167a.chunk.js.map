{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/eiffel.js"],"names":["wordObj","words","o","i","e","length","__webpack_require__","r","__webpack_exports__","d","eiffel","keywords","operators","tokenBase","stream","state","eatSpace","quote","style","unescaped","ch","next","newtok","tokenize","push","chain","escaped","pop","eat","skipToEnd","test","eatWhile","name","startState","token","word","current","propertyIsEnumerable","languageData","commentTokens","line"],"mappings":"2FAAA,SAAAA,EAAAC,GAEA,IADA,IAAAC,EAAA,GACAC,EAAA,EAAAC,EAAAH,EAAAI,OAAmCF,EAAAC,IAAOD,EAAAD,EAAAD,EAAAE,KAAA,EAC1C,OAAAD,EAHAI,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,2BAAAE,IAKA,IAAAC,EAAAX,EAAA,8iBACAY,EAAAZ,EAAA,wCAKA,SAAAa,EAAAC,EAAAC,GACA,GAAAD,EAAAE,WAAA,YACA,IAuBAC,EAAAC,EAAAC,EAvBAC,EAAAN,EAAAO,OACA,WAAAD,GAAA,KAAAA,EAPA,SAAAE,EAAAR,EAAAC,GAEA,OADAA,EAAAQ,SAAAC,KAAAF,GACAA,EAAAR,EAAAC,GAMAU,EAqBAR,EArBAG,EAqBAF,EArBA,SAsBA,SAAAJ,EAAAC,GAGA,IAFA,IACAK,EADAM,GAAA,EAEA,OAAAN,EAAAN,EAAAO,SAAA,CACA,GAAAD,GAAAH,IAAAE,IAAAO,GAAA,CACAX,EAAAQ,SAAAI,MACA,MAEAD,MAAA,KAAAN,EAEA,OAAAF,IAhCAJ,EAAAC,GACG,KAAAK,GAAAN,EAAAc,IAAA,MACHd,EAAAe,YACA,WACG,KAAAT,GAAAN,EAAAc,IAAA,KACH,WACG,QAAAE,KAAAV,IACHN,EAAAiB,SAAA,iBACAjB,EAAAc,IAAA,UACA,YACG,eAAAE,KAAAV,IACHN,EAAAiB,SAAA,gBACAjB,EAAAc,IAAA,UACA,YACG,iBAAAE,KAAAV,IACHN,EAAAiB,SAAA,kBACA,YAEA,KAiBO,IAAArB,EAAA,CACPsB,KAAA,SACAC,WAAA,WACA,OACAV,SAAA,CAAAV,KAGAqB,MAAA,SAAApB,EAAAC,GACA,IAAAG,EAAAH,EAAAQ,SAAAR,EAAAQ,SAAAlB,OAAA,GAAAS,EAAAC,GACA,eAAAG,EAAA,CACA,IAAAiB,EAAArB,EAAAsB,UACAlB,EAAAP,EAAA0B,qBAAAvB,EAAAsB,WAAA,UAAAxB,EAAAyB,qBAAAvB,EAAAsB,WAAA,gCAAAN,KAAAK,GAAA,uBAAAL,KAAAK,GAAA,0BAAAL,KAAAK,GAAA,gCAAAL,KAAAK,GAAA,gDAAAL,KAAAK,GAAA,qBAAAL,KAAAK,GAAA,oBAEA,OAAAjB,GAEAoB,aAAA,CACAC,cAAA,CACAC,KAAA","file":"static/js/41.e4f0167a.chunk.js","sourcesContent":["function wordObj(words) {\n  var o = {};\n  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n  return o;\n}\nvar keywords = wordObj(['note', 'across', 'when', 'variant', 'until', 'unique', 'undefine', 'then', 'strip', 'select', 'retry', 'rescue', 'require', 'rename', 'reference', 'redefine', 'prefix', 'once', 'old', 'obsolete', 'loop', 'local', 'like', 'is', 'inspect', 'infix', 'include', 'if', 'frozen', 'from', 'external', 'export', 'ensure', 'end', 'elseif', 'else', 'do', 'creation', 'create', 'check', 'alias', 'agent', 'separate', 'invariant', 'inherit', 'indexing', 'feature', 'expanded', 'deferred', 'class', 'Void', 'True', 'Result', 'Precursor', 'False', 'Current', 'create', 'attached', 'detachable', 'as', 'and', 'implies', 'not', 'or']);\nvar operators = wordObj([\":=\", \"and then\", \"and\", \"or\", \"<<\", \">>\"]);\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) return null;\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    return chain(readQuoted(ch, \"string\"), stream, state);\n  } else if (ch == \"-\" && stream.eat(\"-\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \":\" && stream.eat(\"=\")) {\n    return \"operator\";\n  } else if (/[0-9]/.test(ch)) {\n    stream.eatWhile(/[xXbBCc0-9\\.]/);\n    stream.eat(/[\\?\\!]/);\n    return \"variable\";\n  } else if (/[a-zA-Z_0-9]/.test(ch)) {\n    stream.eatWhile(/[a-zA-Z_0-9]/);\n    stream.eat(/[\\?\\!]/);\n    return \"variable\";\n  } else if (/[=+\\-\\/*^%<>~]/.test(ch)) {\n    stream.eatWhile(/[=+\\-\\/*^%<>~]/);\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\nfunction readQuoted(quote, style, unescaped) {\n  return function (stream, state) {\n    var escaped = false,\n      ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n      escaped = !escaped && ch == \"%\";\n    }\n    return style;\n  };\n}\nexport var eiffel = {\n  name: \"eiffel\",\n  startState: function startState() {\n    return {\n      tokenize: [tokenBase]\n    };\n  },\n  token: function token(stream, state) {\n    var style = state.tokenize[state.tokenize.length - 1](stream, state);\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = keywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : operators.propertyIsEnumerable(stream.current()) ? \"operator\" : /^[A-Z][A-Z_0-9]*$/g.test(word) ? \"tag\" : /^0[bB][0-1]+$/g.test(word) ? \"number\" : /^0[cC][0-7]+$/g.test(word) ? \"number\" : /^0[xX][a-fA-F0-9]+$/g.test(word) ? \"number\" : /^([0-9]+\\.[0-9]*)|([0-9]*\\.[0-9]+)$/g.test(word) ? \"number\" : /^[0-9]+$/g.test(word) ? \"number\" : \"variable\";\n    }\n    return style;\n  },\n  languageData: {\n    commentTokens: {\n      line: \"--\"\n    }\n  }\n};"],"sourceRoot":""}