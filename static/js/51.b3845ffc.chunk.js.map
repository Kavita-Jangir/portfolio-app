{"version":3,"sources":["D:/react_app/app_1/node_modules/@codemirror/legacy-modes/mode/haskell.js"],"names":["switchState","source","setState","f","__webpack_require__","r","__webpack_exports__","d","haskell","smallRE","largeRE","digitRE","hexitRE","octitRE","idRE","symbolRE","specialRE","whiteCharRE","normal","eatWhile","ch","next","test","eat","t","ncomment","type","nest","currNest","eol","stringLiteral","match","skipToEnd","stringGap","wellKnownWords","wkw","setType","i","arguments","length","name","startState","copyState","s","token","stream","state","w","current","hasOwnProperty","languageData","commentTokens","line","block","open","close"],"mappings":"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","file":"static/js/51.b3845ffc.chunk.js","sourcesContent":["function switchState(source, setState, f) {\n  setState(f);\n  return f(source, setState);\n}\n\n// These should all be Unicode extended, as per the Haskell 2010 report\nvar smallRE = /[a-z_]/;\nvar largeRE = /[A-Z]/;\nvar digitRE = /\\d/;\nvar hexitRE = /[0-9A-Fa-f]/;\nvar octitRE = /[0-7]/;\nvar idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\nvar symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\nvar specialRE = /[(),;[\\]`{}]/;\nvar whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal(source, setState) {\n  if (source.eatWhile(whiteCharRE)) {\n    return null;\n  }\n  var ch = source.next();\n  if (specialRE.test(ch)) {\n    if (ch == '{' && source.eat('-')) {\n      var t = \"comment\";\n      if (source.eat('#')) {\n        t = \"meta\";\n      }\n      return switchState(source, setState, ncomment(t, 1));\n    }\n    return null;\n  }\n  if (ch == '\\'') {\n    if (source.eat('\\\\')) {\n      source.next(); // should handle other escapes here\n    } else {\n      source.next();\n    }\n    if (source.eat('\\'')) {\n      return \"string\";\n    }\n    return \"error\";\n  }\n  if (ch == '\"') {\n    return switchState(source, setState, stringLiteral);\n  }\n  if (largeRE.test(ch)) {\n    source.eatWhile(idRE);\n    if (source.eat('.')) {\n      return \"qualifier\";\n    }\n    return \"type\";\n  }\n  if (smallRE.test(ch)) {\n    source.eatWhile(idRE);\n    return \"variable\";\n  }\n  if (digitRE.test(ch)) {\n    if (ch == '0') {\n      if (source.eat(/[xX]/)) {\n        source.eatWhile(hexitRE); // should require at least 1\n        return \"integer\";\n      }\n      if (source.eat(/[oO]/)) {\n        source.eatWhile(octitRE); // should require at least 1\n        return \"number\";\n      }\n    }\n    source.eatWhile(digitRE);\n    var t = \"number\";\n    if (source.match(/^\\.\\d+/)) {\n      t = \"number\";\n    }\n    if (source.eat(/[eE]/)) {\n      t = \"number\";\n      source.eat(/[-+]/);\n      source.eatWhile(digitRE); // should require at least 1\n    }\n\n    return t;\n  }\n  if (ch == \".\" && source.eat(\".\")) return \"keyword\";\n  if (symbolRE.test(ch)) {\n    if (ch == '-' && source.eat(/-/)) {\n      source.eatWhile(/-/);\n      if (!source.eat(symbolRE)) {\n        source.skipToEnd();\n        return \"comment\";\n      }\n    }\n    source.eatWhile(symbolRE);\n    return \"variable\";\n  }\n  return \"error\";\n}\nfunction ncomment(type, nest) {\n  if (nest == 0) {\n    return normal;\n  }\n  return function (source, setState) {\n    var currNest = nest;\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '{' && source.eat('-')) {\n        ++currNest;\n      } else if (ch == '-' && source.eat('}')) {\n        --currNest;\n        if (currNest == 0) {\n          setState(normal);\n          return type;\n        }\n      }\n    }\n    setState(ncomment(type, currNest));\n    return type;\n  };\n}\nfunction stringLiteral(source, setState) {\n  while (!source.eol()) {\n    var ch = source.next();\n    if (ch == '\"') {\n      setState(normal);\n      return \"string\";\n    }\n    if (ch == '\\\\') {\n      if (source.eol() || source.eat(whiteCharRE)) {\n        setState(stringGap);\n        return \"string\";\n      }\n      if (source.eat('&')) {} else {\n        source.next(); // should handle other escapes here\n      }\n    }\n  }\n\n  setState(normal);\n  return \"error\";\n}\nfunction stringGap(source, setState) {\n  if (source.eat('\\\\')) {\n    return switchState(source, setState, stringLiteral);\n  }\n  source.next();\n  setState(normal);\n  return \"error\";\n}\nvar wellKnownWords = function () {\n  var wkw = {};\n  function setType(t) {\n    return function () {\n      for (var i = 0; i < arguments.length; i++) wkw[arguments[i]] = t;\n    };\n  }\n  setType(\"keyword\")(\"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\", \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\", \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n  setType(\"keyword\")(\"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n  setType(\"builtin\")(\"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\", \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\", \"*>\", \"**\");\n  setType(\"builtin\")(\"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\", \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\", \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\", \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\", \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\", \"String\", \"True\");\n  setType(\"builtin\")(\"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\", \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\", \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\", \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\", \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\", \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\", \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\", \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\", \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\", \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\", \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\", \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\", \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\", \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\", \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\", \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\", \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\", \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\", \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\", \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\", \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\", \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\", \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\", \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\", \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\", \"zip3\", \"zipWith\", \"zipWith3\");\n  return wkw;\n}();\nexport var haskell = {\n  name: \"haskell\",\n  startState: function startState() {\n    return {\n      f: normal\n    };\n  },\n  copyState: function copyState(s) {\n    return {\n      f: s.f\n    };\n  },\n  token: function token(stream, state) {\n    var t = state.f(stream, function (s) {\n      state.f = s;\n    });\n    var w = stream.current();\n    return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n  },\n  languageData: {\n    commentTokens: {\n      line: \"--\",\n      block: {\n        open: \"{-\",\n        close: \"-}\"\n      }\n    }\n  }\n};"],"sourceRoot":""}